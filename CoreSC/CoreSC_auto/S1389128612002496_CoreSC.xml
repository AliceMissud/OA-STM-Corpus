<?xml version="1.0" ?><PAPER><mode2 hasDoc="yes" name="S1389128612002496.tmf1" version="elsevier"/>
<TITLE>Flow level detection and filtering of low-rate DDoS
</TITLE>
<ABSTRACT>

Abstract
<s sid="1"><CoreSc1 advantage="None" conceptID="Met1" novelty="None" type="Met"/><text>The recently proposed TCP-targeted Low-rate Distributed Denial-of-Service (LDDoS) attacks send fewer packets to attack legitimate flows by exploiting the vulnerability in TCP's congestion control mechanism.</text></s>
<s sid="2"><CoreSc1 advantage="None" conceptID="Res1" novelty="None" type="Res"/><text>They are difficult to detect while causing severe damage to TCP-based applications.</text></s>
<s sid="3"><CoreSc1 advantage="None" conceptID="Res2" novelty="None" type="Res"/><text>Existing approaches can only detect the presence of an LDDoS attack, but fail to identify LDDoS flows.</text></s>
<s sid="4"><CoreSc1 advantage="None" conceptID="Obj1" novelty="None" type="Obj"/><text>In this paper, we propose a novel metric - Congestion Participation Rate (CPR) - and a CPR-based approach to detect and filter LDDoS attacks by their intention to congest the network.</text></s>
<s sid="5"><CoreSc1 advantage="None" conceptID="Obj2" novelty="None" type="Obj"/><text>The major innovation of the CPR-base approach is its ability to identify LDDoS flows.</text></s>
<s sid="6"><CoreSc1 advantage="None" conceptID="Met2" novelty="None" type="Met"/><text>A flow with a CPR higher than a predefined threshold is classified as an LDDoS flow, and consequently all of its packets will be dropped.</text></s>
<s sid="7"><CoreSc1 advantage="None" conceptID="Met3" novelty="None" type="Met"/><text>We analyze the effectiveness of CPR theoretically by quantifying the average CPR difference between normal TCP flows and LDDoS flows and showing that CPR can differentiate them.</text></s>
<s sid="8"><CoreSc1 advantage="None" conceptID="Goa1" novelty="None" type="Goa"/><text>We conduct ns-2 simulations, test-bed experiments, and Internet traffic trace analysis to validate our analytical results and evaluate the performance of the proposed approach.</text></s>
<s sid="9"><CoreSc1 advantage="None" conceptID="Con1" novelty="None" type="Con"/><text>Experimental results demonstrate that the proposed CPR-based approach is substantially more effective compared to an existing Discrete Fourier Transform (DFT)-based approach - one of the most efficient approaches in detecting LDDoS attacks.</text></s>
<s sid="10"><CoreSc1 advantage="None" conceptID="Obj3" novelty="None" type="Obj"/><text>We also provide experimental guidance to choose the CPR threshold in practice.</text></s>
</ABSTRACT>
<BODY>

Introduction
<s sid="11"><CoreSc1 advantage="None" conceptID="Obj4" novelty="None" type="Obj"/><text>Distributed Denial-of-Service (DDoS) attacks [1] have been identified as a major threat to today's Internet services.</text></s>
<s sid="12"><CoreSc1 advantage="None" conceptID="Obj5" novelty="None" type="Obj"/><text>Being a new kind of DDoS attacks, TCP-targeted Low-rate Distributed Denial-of-Service (LDDoS) [2] attacks are more efficient in terms of causing damage to legitimate flows and more difficult to detect when compared to traditional flooding-based DDoS attacks.</text></s>
<s sid="13"><CoreSc1 advantage="None" conceptID="Met4" novelty="None" type="Met"/><text>Traditional flooding-based DDoS attacks employ a &quot;sledge-hammer&quot; approach of high-rate transmission of packets, which obviously distinguishes themselves from normal data flows in statistical characteristics.</text></s>
<s sid="14"><CoreSc1 advantage="None" conceptID="Met5" novelty="None" type="Met"/><text>Many of the proposed approaches for detecting DDoS attacks have been based on these statistical characteristics [3-7].</text></s>
<s sid="15"><CoreSc1 advantage="None" conceptID="Met6" novelty="None" type="Met"/><text>LDDoS attacks are quite different from the traditional flooding-based DDoS attacks as they exploit the vulnerabilities in TCP's congestion control mechanism.</text></s>
<s sid="16"><CoreSc1 advantage="None" conceptID="Met7" novelty="None" type="Met"/><text>Instead of sending continuous network traffic, an LDDoS attacker sends periodically pulsing data flows, which may dramatically reduce the average rate of attack flows.</text></s>
<s sid="17"><CoreSc1 advantage="None" conceptID="Res3" novelty="None" type="Res"/><text>LDDoS attacks have already been observed in the Internet2 Abilene backbone [8], thus presenting a new challenge to the security of the Internet.</text></s>
<s sid="18"><CoreSc1 advantage="None" conceptID="Res4" novelty="None" type="Res"/><text>When facing large scale LDDoS attacks, existing defense approaches can only detect the presence of the LDDoS attack, but cannot determine whether a particular flow is an attack flow or not.</text></s>
<s sid="19"><CoreSc1 advantage="None" conceptID="Obj6" novelty="None" type="Obj"/><text>In this paper we propose a novel metric &quot;Congestion Participation Rate&quot; (CPR) to identify LDDoS flows.</text></s>
<s sid="20"><CoreSc1 advantage="None" conceptID="Obj7" novelty="None" type="Obj"/><text>The CPR-based approach exploits the fact that LDDoS flows actively induce network congestion whereas normal TCP flows actively avoid network congestion.</text></s>
<s sid="21"><CoreSc1 advantage="None" conceptID="Obj8" novelty="None" type="Obj"/><text>That is, normal TCP flows will tend to send fewer packets during network congestion whereas LDDoS flows would not.</text></s>
<s sid="22"><CoreSc1 advantage="None" conceptID="Obj9" novelty="None" type="Obj"/><text>The Congestion Participation Rate (CPR) can accurately capture this fundamental difference, and hence allow us to identify LDDoS flows.</text></s>
<s sid="23"><CoreSc1 advantage="None" conceptID="Obj10" novelty="None" type="Obj"/><text>Our contributions are summarized as follows:•</text></s>
<s sid="24"><CoreSc1 advantage="None" conceptID="Obj11" novelty="None" type="Obj"/><text>We propose a novel metric - Congestion Participation Rate (CPR) to identify LDDoS flows by measuring the intention of network flows to congest the network.</text></s>
<s sid="25"><CoreSc1 advantage="None" conceptID="Con2" novelty="None" type="Con"/><text>To the best of our knowledge, it is the first metric that could recognize LDDoS flows by quantifying each flow's intention of congesting the network.</text></s>
•
<s sid="26"><CoreSc1 advantage="None" conceptID="Obj12" novelty="None" type="Obj"/><text>We propose and implement a CPR-based approach to detect and filter LDDoS attacks.</text></s>
<s sid="27"><CoreSc1 advantage="None" conceptID="Obj13" novelty="None" type="Obj"/><text>The CPR-based approach is an originality innovation that can effectively identify LDDoS in a per-flow basis in large-scale LDDoS attacks as far as we are concerned.</text></s>
•
<s sid="28"><CoreSc1 advantage="None" conceptID="Obj14" novelty="None" type="Obj"/><text>We conduct intensive experiments, including both ns-2 simulations and test-bed experiments, to validate our analytical results and evaluate the performance of the CPR-based approach.</text></s>
<s sid="29"><CoreSc1 advantage="None" conceptID="Con3" novelty="None" type="Con"/><text>The experimental results demonstrate that the CPR-based approach is effective for all of the LDDoS attacks considered while the existing Discrete Fourier Transform (DFT)-based approach is only effective for a small set of LDDoS attacks.</text></s>
•
<s sid="30"><CoreSc1 advantage="None" conceptID="Res5" novelty="None" type="Res"/><text>We obtain the trade-off between the detection rate and the false positive rate for the CPR-based approach through a comprehensive set of experiments.</text></s>
<s sid="31"><CoreSc1 advantage="None" conceptID="Bac1" novelty="None" type="Bac"/><text>This trade-off provides experimental guidance for choosing a CPR threshold in practice.</text></s>
<s sid="32"><CoreSc1 advantage="None" conceptID="Bac2" novelty="None" type="Bac"/><text>It is worth noting that the CPR-based approach is designed to distinguish between normal TCP flows and LDDoS flows.</text></s>
<s sid="33"><CoreSc1 advantage="None" conceptID="Bac3" novelty="None" type="Bac"/><text>Differentiating normal UDP flows and LDDoS flows will be investigated in future work.</text></s>
<s sid="34"><CoreSc1 advantage="None" conceptID="Goa2" novelty="None" type="Goa"/><text>The LDDoS attacks in this paper, if not declared otherwise, precisely refer to TCP-targeted LDDoS attacks including Shrew attacks [2] and Pulsing DoS (PDoS) attacks [9].</text></s>
<s sid="35"><CoreSc1 advantage="None" conceptID="Goa3" novelty="None" type="Goa"/><text>The CPR-base approach is also designed to counter TCP-targeted LDDoS attacks [2,9].</text></s>
<s sid="36"><CoreSc1 advantage="None" conceptID="Bac4" novelty="None" type="Bac"/><text>The rest of the paper is organized as follows.</text></s>
<s sid="37"><CoreSc1 advantage="None" conceptID="Res6" novelty="None" type="Res"/><text>Section 2 presents the modeling of LDoS attacks and LDDoS attacks.</text></s>
<s sid="38"><CoreSc1 advantage="None" conceptID="Res7" novelty="None" type="Res"/><text>Section 3 defines the metric of CPR, describes the CPR-based approach and analyzes the boundaries of average CPR for normal and attack flows.</text></s>
<s sid="39"><CoreSc1 advantage="None" conceptID="Res8" novelty="None" type="Res"/><text>Intensive experiments based on ns-2 simulations and real network configurations are presented in Sections 4 and 5 respectively.</text></s>
<s sid="40"><CoreSc1 advantage="None" conceptID="Obj15" novelty="None" type="Obj"/><text>Section 6 discusses several important issues related to the deployment of the CPR-based approach.</text></s>
<s sid="41"><CoreSc1 advantage="None" conceptID="Obj16" novelty="None" type="Obj"/><text>Section 7 reviews existing work that is directly related to the proposed approach.</text></s>
<s sid="42"><CoreSc1 advantage="None" conceptID="Obj17" novelty="None" type="Obj"/><text>Finally we conclude the paper in Section 8.</text></s>
Modeling LDDoS attacks
<s sid="43"><CoreSc1 advantage="None" conceptID="Obj18" novelty="None" type="Obj"/><text>In this section we model the LDDoS attacks.</text></s>
<s sid="44"><CoreSc1 advantage="None" conceptID="Goa4" novelty="None" type="Goa"/><text>Our target is to detect and filter LDDoS attack flows.</text></s>
<s sid="45"><CoreSc1 advantage="None" conceptID="Mod1" novelty="None" type="Mod"/><text>A flow is uniquely determined by a 5-tuple (Source IP, Source Port, Destination IP, Destination Port, Protocol).</text></s>
<s sid="46"><CoreSc1 advantage="None" conceptID="Mod2" novelty="None" type="Mod"/><text>We use four parameters (Ta,Tb,Rb,s) to describe an LDoS attack flow, where Tais the LDoS attack period, Tb is the LDoS attack burst width (or pulsing width), Rb is the LDoS attack burst rate (or pulsing rate), and sis the starting time of the attack flow (see Fig. 1).</text></s>
<s sid="47"><CoreSc1 advantage="None" conceptID="Mod3" novelty="None" type="Mod"/><text>An LDDoS attack consists of multiple LDoS attack flows, F1,F2, … Fn, that may originate from different machines distributed on the Internet.</text></s>
<s sid="48"><CoreSc1 advantage="None" conceptID="Mod4" novelty="None" type="Mod"/><text>Assuming that Ta,Tb, and Rb are identical for every LDoS flow Fi, we define an LDDoS flow group as a set of attack flows that have the same starting time s.</text></s>
<s sid="49"><CoreSc1 advantage="None" conceptID="Mod5" novelty="None" type="Mod"/><text>The starting time of an LDDoS flow group is just the starting time of each flow in the group.</text></s>
<s sid="50"><CoreSc1 advantage="None" conceptID="Mod6" novelty="None" type="Mod"/><text>We assume that the starting gap between consecutive LDDoS flow groups remains constant in an LDDoS attack.</text></s>
<s sid="51"><CoreSc1 advantage="None" conceptID="Mod7" novelty="None" type="Mod"/><text>For example, in Fig. 2, sg1 represents the starting gap between LDDoS flow groups 1 and 2, and sg2 represents the starting gap between LDDoS flow groups 2 and 3.</text></s>
<s sid="52"><CoreSc1 advantage="None" conceptID="Mod8" novelty="None" type="Mod"/><text>Our assumption corresponds to that both sg1 and sg2 are equal to a constant in an LDDoS attack.</text></s>
<s sid="53"><CoreSc1 advantage="None" conceptID="Mod9" novelty="None" type="Mod"/><text>This starting gap is denoted as σ.</text></s>
<s sid="54"><CoreSc1 advantage="None" conceptID="Mod10" novelty="None" type="Mod"/><text>We further assume that each group has an identical number, m, of flows.</text></s>
<s sid="55"><CoreSc1 advantage="None" conceptID="Met8" novelty="None" type="Met"/><text>Based on the definition and assumption above, we describe an LDDoS attack using four parameters (n,g,m,σ), where n is the total number of flows in the attack, g is the number of attack flow groups, and m is the number of members in an LDDoS flow group.</text></s>
<s sid="56"><CoreSc1 advantage="None" conceptID="Res9" novelty="None" type="Res"/><text>It is clear that n=mg based on the above assumptions.</text></s>
<s sid="57"><CoreSc1 advantage="None" conceptID="Res10" novelty="None" type="Res"/><text>It is worth noting that the aforementioned assumption only eases the classification of LDDoS attacks and is not required by our detection system.</text></s>
<s sid="58"><CoreSc1 advantage="None" conceptID="Obj19" novelty="None" type="Obj"/><text>Based on these assumptions and definitions, we classify LDDoS attacks into four categories (Fig. 3), according to how the three characteristics Ta,Tb, and Rb are being distributed among multiple flows in an LDDoS attack.</text></s>
<s sid="59"><CoreSc1 advantage="None" conceptID="Obj20" novelty="None" type="Obj"/><text>Although our classification is by no means complete, it is enough for us to analyze the characteristics of the LDDoS attacks and to conduct experiments to evaluate our approach.1.</text></s>
<s sid="60"><CoreSc1 advantage="None" conceptID="Obj21" novelty="None" type="Obj"/><text>Attack Frequency Intensification (AFI) LDDoS attack(n&gt;0, g=n, m=1, σ=Ta/g)</text></s>
<s sid="61"><CoreSc1 advantage="None" conceptID="Obs1" novelty="None" type="Obs"/><text>The first category represents the LDDoS attacks whose aggregate attack period is equally distributed among n flows.</text></s>
<s sid="62"><CoreSc1 advantage="None" conceptID="Obs2" novelty="None" type="Obs"/><text>The attack frequency of the aggregate flow is intensified by n times, compared to the frequency of each attack flow.</text></s>
2.
<s sid="63"><CoreSc1 advantage="None" conceptID="Obs3" novelty="None" type="Obs"/><text>Attack burst Width Intensification (AWI) LDDoS attack(n&gt;0, g=n, m=1, σ=Tb)</text></s>
<s sid="64"><CoreSc1 advantage="None" conceptID="Obs4" novelty="None" type="Obs"/><text>The second category corresponds to the case when the aggregate burst width of an LDDoS attack is equally distributed among n flows.</text></s>
<s sid="65"><CoreSc1 advantage="None" conceptID="Obs5" novelty="None" type="Obs"/><text>An attack burst of a flow is immediately followed by a burst from another flow.</text></s>
<s sid="66"><CoreSc1 advantage="None" conceptID="Mod11" novelty="None" type="Mod"/><text>In this case, the attack burst width of the aggregate attack flow is intensified by ntimes.</text></s>
3.
<s sid="67"><CoreSc1 advantage="None" conceptID="Mod12" novelty="None" type="Mod"/><text>Attack burst Rate Intensification (ARI) LDDoS attack(n&gt;0, g=1, m=n, σ=0)</text></s>
<s sid="68"><CoreSc1 advantage="None" conceptID="Mod13" novelty="None" type="Mod"/><text>The third category describes the LDDoS attacks in which n flows start at the same time, and the burst rate of the aggregate attack flow is intensified n times.</text></s>
4.
<s sid="69"><CoreSc1 advantage="None" conceptID="Mod14" novelty="None" type="Mod"/><text>Mixed Intensification (MI) LDDoS attack</text></s>
(n&gt;0, g&gt;1, m&gt;1, σ⩾0)
<s sid="70"><CoreSc1 advantage="None" conceptID="Mod15" novelty="None" type="Mod"/><text>The last category can be considered as the combination of the previous three.</text></s>
<s sid="71"><CoreSc1 advantage="None" conceptID="Mod16" novelty="None" type="Mod"/><text>Let Ta,Tb, and Rb be the parameters for a single attack flow, and Ta+,Tb+, and Rb+ be the parameters for the aggregate flow of an LDDoS attack.</text></s>
<s sid="72"><CoreSc1 advantage="None" conceptID="Res11" novelty="None" type="Res"/><text>Table 1 demonstrates the relationship between Ta+,Tb+,Rb+, and Ta,Tb,Rb.</text></s>
The CPR-based approach
<s sid="73"><CoreSc1 advantage="None" conceptID="Obj22" novelty="None" type="Obj"/><text>In this section, we first propose the metric of CPR and then describe our CPR-based approach to detect and filter LDDoS attack flows.</text></s>
Congestion participation rate
<s sid="74"><CoreSc1 advantage="None" conceptID="Con4" novelty="None" type="Con"/><text>A major difference between normal TCP flows and LDDoS flows is that normal TCP flows actively avoid network congestion due to TCP's congestion control mechanism, whereas LDDoS flows actively induce network congestion to degrade network performance.</text></s>
<s sid="75"><CoreSc1 advantage="None" conceptID="Obj23" novelty="None" type="Obj"/><text>Motivated by this difference, we propose Congestion Participation Rate (CPR) to distinguish between an LDDoS flow and a normal TCP flow.</text></s>
<s sid="76"><CoreSc1 advantage="None" conceptID="Obj24" novelty="None" type="Obj"/><text>Consider a router through which different flows (normal TCP flows and LDDoS attack flows) pass (see Fig. 4), at time t, we sample the incoming link of the router for a duration d and count the number of packets from every flow Fi, denoted as Si,t.</text></s>
<s sid="77"><CoreSc1 advantage="None" conceptID="Obj25" novelty="None" type="Obj"/><text>At the same time, we monitor the packet queue in the router.</text></s>
<s sid="78"><CoreSc1 advantage="None" conceptID="Obj26" novelty="None" type="Obj"/><text>If there is at least a packet dropped at the packet queue (because the queue is full) during d, we consider that the outgoing link of the router is congested at time t.</text></s>
<s sid="79"><CoreSc1 advantage="None" conceptID="Obj27" novelty="None" type="Obj"/><text>After a series of sampling T, we define the CPR of flow Fi as(1)θi=∑t∈T∗Si,t∑t∈TSi,twhere T∗ is the set of sampling epochs when the outgoing link is congested.</text></s>
<s sid="80"><CoreSc1 advantage="None" conceptID="Res12" novelty="None" type="Res"/><text>In other words, the θi is the ratio of the incoming packets in congestion to the total incoming packets from flow Fi.</text></s>
<s sid="81"><CoreSc1 advantage="None" conceptID="Res13" novelty="None" type="Res"/><text>It is worth noting that the packets are sampled at the incoming link before they enter the packet queue or be dropped when the packet queue is full (due to the congestion of the outgoing link).</text></s>
<s sid="82"><CoreSc1 advantage="None" conceptID="Res14" novelty="None" type="Res"/><text>Thus the packet number measured here is for the packets sent by a flow to the router.</text></s>
<s sid="83"><CoreSc1 advantage="None" conceptID="Res15" novelty="None" type="Res"/><text>It is normally larger than the number of the packets from the flow that are forwarded by the router, as some of the packets may be dropped due to congestion.</text></s>
<s sid="84"><CoreSc1 advantage="None" conceptID="Res16" novelty="None" type="Res"/><text>Since LDDoS flows actively induce network congestion while normal TCP flows actively avoid network congestion, the CPR of an LDDoS flow is expected to be considerably bigger than that of a normal TCP flow.</text></s>
<s sid="85"><CoreSc1 advantage="None" conceptID="Obs6" novelty="None" type="Obs"/><text>The detecting and filtering approach</text></s>
<s sid="86"><CoreSc1 advantage="None" conceptID="Obs7" novelty="None" type="Obs"/><text>Fig. 5 shows the block diagram of our CPR-based approach for detecting and filtering LDDoS.</text></s>
<s sid="87"><CoreSc1 advantage="None" conceptID="Res17" novelty="None" type="Res"/><text>This approach is expected to be deployed on a router where we want to detect and filter LDDoS attack flows.</text></s>
<s sid="88"><CoreSc1 advantage="None" conceptID="Res18" novelty="None" type="Res"/><text>In the diagram, the flow size estimation module is a functional module that is already included in most Internet routers (for example Cisco NetFlow [10]).</text></s>
<s sid="89"><CoreSc1 advantage="None" conceptID="Res19" novelty="None" type="Res"/><text>The CPR metric mainly works in the LDDoS Attack Detection module.</text></s>
<s sid="90"><CoreSc1 advantage="None" conceptID="Obs8" novelty="None" type="Obs"/><text>The router keeps CPR for every flow.</text></s>
<s sid="91"><CoreSc1 advantage="None" conceptID="Obs9" novelty="None" type="Obs"/><text>A flow is considered as an LDDoS attack flow if its CPR is higher than a threshold τ.</text></s>
<s sid="92"><CoreSc1 advantage="None" conceptID="Goa5" novelty="None" type="Goa"/><text>We investigate this threshold analytically in Section 3.3 and use experiments to demonstrate how to determine the threshold in practice in Section 4.4.</text></s>
<s sid="93"><CoreSc1 advantage="None" conceptID="Met9" novelty="None" type="Met"/><text>When an LDDoS flow is detected, we drop all packets from the detected flow until its CPR becomes smaller than the threshold τ.</text></s>
<s sid="94"><CoreSc1 advantage="None" conceptID="Met10" novelty="None" type="Met"/><text>A normal TCP flow may be mistakenly interpreted as an attack flow if it is initiated and starts to send data while the network is congested.</text></s>
<s sid="95"><CoreSc1 advantage="None" conceptID="Met11" novelty="None" type="Met"/><text>To mitigate it, after a flow is regarded as an LDDoS flow, we keep on measuring its CPR.</text></s>
<s sid="96"><CoreSc1 advantage="None" conceptID="Met12" novelty="None" type="Met"/><text>If its CPR becomes smaller than the threshold, the flow will once again be considered as a normal flow and its packets will pass the router successfully.</text></s>
<s sid="97"><CoreSc1 advantage="None" conceptID="Met13" novelty="None" type="Met"/><text>A normal TCP flow that was misclassified as an attack flow will reduce its CPR by sending data when the network is not congested.</text></s>
<s sid="98"><CoreSc1 advantage="None" conceptID="Obs10" novelty="None" type="Obs"/><text>In the extreme scenario, the LDDoS attack can throttle all normal TCP flows and the aggregate rate of the LDDoS flows is also very close to the bottleneck bandwidth of network.</text></s>
<s sid="99"><CoreSc1 advantage="None" conceptID="Obs11" novelty="None" type="Obs"/><text>There is almost no packet will be dropped in the scenario and consequently no network congestion can be observed.</text></s>
<s sid="100"><CoreSc1 advantage="None" conceptID="Obs12" novelty="None" type="Obs"/><text>When no network congestion can be observed from a scenario, the CPRs of both LDDoS flows and normal TCP flows all tend to be 0 according to the definition in (1).</text></s>
<s sid="101"><CoreSc1 advantage="None" conceptID="Obs13" novelty="None" type="Obs"/><text>This is problematic for the CPR-based approach to distinguish LDDoS flows.</text></s>
<s sid="102"><CoreSc1 advantage="None" conceptID="Obj28" novelty="None" type="Obj"/><text>To solve this problem, we turn on the Random Early Detection (RED) [11] queue management mechanism on the router where we install the CPR-based module.</text></s>
<s sid="103"><CoreSc1 advantage="None" conceptID="Obj29" novelty="None" type="Obj"/><text>In the extreme scenario mentioned above, the RED mechanism actively drops packets from the pulsing LDDoS flows.</text></s>
<s sid="104"><CoreSc1 advantage="None" conceptID="Obs14" novelty="None" type="Obs"/><text>Normally, RED drops packets in order to send congestion signals back to the sources.</text></s>
<s sid="105"><CoreSc1 advantage="None" conceptID="Res20" novelty="None" type="Res"/><text>As will be covered in Section 4, the CPR-based approach with RED effectively detects LDDoS attacks in this scenario.</text></s>
<s sid="106"><CoreSc1 advantage="None" conceptID="Con5" novelty="None" type="Con"/><text>We configure the RED mechanism to be based on packet count as opposed to packet bytes because the packet-count RED is more sensitive to the small packets sent in an LDDoS attack flow.</text></s>
<s sid="107"><CoreSc1 advantage="None" conceptID="Obj30" novelty="None" type="Obj"/><text>Bounds of the congestion participation rates</text></s>
<s sid="108"><CoreSc1 advantage="None" conceptID="Obj31" novelty="None" type="Obj"/><text>In this subsection, we theoretically analyze the average CPR difference between normal TCP flows and LDDoS flows, which is critical for our approach to identify attack flows.</text></s>
<s sid="109"><CoreSc1 advantage="None" conceptID="Obj32" novelty="None" type="Obj"/><text>More precisely, we conduct a worst-case analysis by computing the minimum average CPR difference between normal TCP flows and LDDoS flows.</text></s>
<s sid="110"><CoreSc1 advantage="None" conceptID="Bac5" novelty="None" type="Bac"/><text>It is worth noting that, this section does not aim to establish a complete analytical model for CPR bounds, but to analyze the relationship between CPR bounds and several network parameters that are directly measureable.</text></s>
<s sid="111"><CoreSc1 advantage="None" conceptID="Bac6" novelty="None" type="Bac"/><text>As stated in Section 3.3.3, to get the exact value of those CPR bounds, one sill needs to experimentally measure several network parameters.</text></s>
<s sid="112"><CoreSc1 advantage="None" conceptID="Met14" novelty="None" type="Met"/><text>Since LDDoS flows tend to have a higher CPR than normal TCP flows, the minimum average CPR difference is obtained by subtracting the upper bound of normal TCP flows' average CPR from the lower bound of the average CPR of LDDoS flows.</text></s>
<s sid="113"><CoreSc1 advantage="None" conceptID="Res21" novelty="None" type="Res"/><text>We obtain the theoretical equations for these two bounds in this subsection and verify the results through experiments in a real network in Section 5.</text></s>
<s sid="114"><CoreSc1 advantage="None" conceptID="Obs15" novelty="None" type="Obs"/><text>Table 2 lists the notation used in our analysis.</text></s>
<s sid="115"><CoreSc1 advantage="None" conceptID="Res22" novelty="None" type="Res"/><text>When a network's bandwidth is sufficiently high, packets are unlikely to be dropped in the network, and an LDDoS attack cannot throttle normal TCP traffic either.</text></s>
<s sid="116"><CoreSc1 advantage="None" conceptID="Res23" novelty="None" type="Res"/><text>Therefore we focus on the scenario that a network's bandwidth is lower than users' demands, i.e., the network is relatively high loaded.</text></s>
<s sid="117"><CoreSc1 advantage="None" conceptID="Res24" novelty="None" type="Res"/><text>This can be represented as ρTCP+ρLDDoS&gt;B.</text></s>
Consider the following scenarios.
<s sid="118"><CoreSc1 advantage="None" conceptID="Res25" novelty="None" type="Res"/><text>In a time period T, a set of normal TCP flows and LDDoS attack flows with average aggregate peak incoming rates ρTCP and ρLDDoS go through a router with outgoing bandwidth B.</text></s>
<s sid="119"><CoreSc1 advantage="None" conceptID="Res26" novelty="None" type="Res"/><text>Since ρTCP+ρLDDoS&gt;B, network congestion and packet dropping will happen.</text></s>
<s sid="120"><CoreSc1 advantage="None" conceptID="Obj33" novelty="None" type="Obj"/><text>Let T∗⊆T be the time when the outgoing link is in congestion and packets are dropped.</text></s>
<s sid="121"><CoreSc1 advantage="None" conceptID="Obj34" novelty="None" type="Obj"/><text>We investigate the CPR through the ratio r of dropped packets to all incoming packets in this time period T.</text></s>
<s sid="122"><CoreSc1 advantage="None" conceptID="Goa6" novelty="None" type="Goa"/><text>More specifically, we want to establish the relationship between CPR and r.</text></s>
<s sid="123"><CoreSc1 advantage="None" conceptID="Res27" novelty="None" type="Res"/><text>Note that r is the packet drop ratio that can be measured directly from network traffic.</text></s>
<s sid="124"><CoreSc1 advantage="None" conceptID="Res28" novelty="None" type="Res"/><text>Upper bound of the CPR for normal TCP flows</text></s>
<s sid="125"><CoreSc1 advantage="None" conceptID="Con6" novelty="None" type="Con"/><text>Although many sophisticated TCP models have been proposed [12-15], we found that the simple model proposed in this subsection is sufficient for determining the upper bound of normal TCP flows' CPR.</text></s>
<s sid="126"><CoreSc1 advantage="None" conceptID="Obj35" novelty="None" type="Obj"/><text>We first consider the situation when there is no LDDoS attack flow, i.e., all flows are normal TCP flows.</text></s>
<s sid="127"><CoreSc1 advantage="None" conceptID="Obj36" novelty="None" type="Obj"/><text>The situation when attack flows are present will be described next.</text></s>
<s sid="128"><CoreSc1 advantage="None" conceptID="Obs16" novelty="None" type="Obs"/><text>When there are only normal TCP flows, the traffic in time period T can be depicted in Fig. 6, which is obtained from our testbed experiment results.</text></s>
<s sid="129"><CoreSc1 advantage="None" conceptID="Res29" novelty="None" type="Res"/><text>We assume that the packet dropping is all due to network congestion.</text></s>
<s sid="130"><CoreSc1 advantage="None" conceptID="Res30" novelty="None" type="Res"/><text>When the outgoing link is congested, the buffers of routers are fully filled, and ρTCP is higher than B.That is the reason for packet dropping.</text></s>
<s sid="131"><CoreSc1 advantage="None" conceptID="Res31" novelty="None" type="Res"/><text>Thus, we have (2).(2)δTCP=ρTCP-BFrom Fig. 6, one can see that the number of packets dropped in time period T is (T∗×δTCP)/z, whereas the total number of incoming packets in T is (T∗×ρTCP)/z+((T-T∗)×B)/z, which gives us rTCP in (3).</text></s>
<s sid="132"><CoreSc1 advantage="None" conceptID="Mod17" novelty="None" type="Mod"/><text>Intuitionally, rTCP is the ratio of the shaded area to the area enclosed by the Rate curve and the Time axis (from 0 to T) in Fig. 7, i.e., the area enclosed by the bold curves.(3)rTCP=T∗×δTCP/zT∗×ρTCP/z+(T-T∗)×B/z=T∗×δTCPT∗×ρTCP+(T-T∗)×B</text></s>
<s sid="133"><CoreSc1 advantage="None" conceptID="Mod18" novelty="None" type="Mod"/><text>According to the definition of CPR in (1), we have the CPR of the aggregate TCP flows, θTCP, as(4)θTCP=T∗×ρTCP/zT∗×ρTCP/z+(T-T∗)×B/z=T∗×ρTCPT∗×ρTCP+(T-T∗)×B</text></s>
<s sid="134"><CoreSc1 advantage="None" conceptID="Obs17" novelty="None" type="Obs"/><text>Fig. 8 graphically illustrates the calculation of θTCP in (4).</text></s>
<s sid="135"><CoreSc1 advantage="None" conceptID="Mod19" novelty="None" type="Mod"/><text>θTCP is the proportion of the shaded area to the area enclosed by the bold curves.</text></s>
<s sid="136"><CoreSc1 advantage="None" conceptID="Mod20" novelty="None" type="Mod"/><text>Eqs. (3) and (4) yield the relationship between the CPR of the aggregate TCP flows, θTCP, and rTCP in (5):(5)θTCP=ρTCPδTCP×rTCP(δTCP&gt;0)0(δTCP=0)</text></s>
<s sid="137"><CoreSc1 advantage="None" conceptID="Obs18" novelty="None" type="Obs"/><text>In (5), when δTCP=0, no packet dropping is observed.</text></s>
Consequently, T∗=0 and θTCP=0.
<s sid="138"><CoreSc1 advantage="None" conceptID="Res32" novelty="None" type="Res"/><text>From (2) and (5), we get (6):(6)θTCP=ρTCPρTCP-B×rTCP=11-B/ρTCP×rTCP(ρTCP&gt;B)…</text></s>
<s sid="139"><CoreSc1 advantage="None" conceptID="Res33" novelty="None" type="Res"/><text>From (6), we can see that the average CPR of normal TCP flows without attacks is determined by B/ρTCP and rTCP, which in practice can be obtained from network traffic.</text></s>
<s sid="140"><CoreSc1 advantage="None" conceptID="Res34" novelty="None" type="Res"/><text>In other words, once we obtain B, ρTCP and rTCP, we can use (6) to get θTCP.In Section 5, the accuracy of (6) is validated by real network traffic.</text></s>
<s sid="141"><CoreSc1 advantage="None" conceptID="Res35" novelty="None" type="Res"/><text>When LDDoS attack flows are present with normal TCP flows in the network, normal TCP flows would be forced by the LDDoS flows to send packets only in the off-period of the attack (when the network is not congested) or may even stop sending.</text></s>
<s sid="142"><CoreSc1 advantage="None" conceptID="Res36" novelty="None" type="Res"/><text>Thus the CPR of normal TCP flows in this case is smaller than the one in the first case as shown in (6).</text></s>
<s sid="143"><CoreSc1 advantage="None" conceptID="Res37" novelty="None" type="Res"/><text>Therefore θTCP in (6) represents the upper bound of the CPR of normal TCP flows.</text></s>
<s sid="144"><CoreSc1 advantage="None" conceptID="Res38" novelty="None" type="Res"/><text>Lower bound of the CPR for LDDoS flows</text></s>
<s sid="145"><CoreSc1 advantage="None" conceptID="Res39" novelty="None" type="Res"/><text>The lower bound of the average CPR for the aggregate LDDoS flows should be achieved in the extreme scenarios described in Section 3.2, i.e., when the aggregate rate of attack flows is very close to the bottleneck bandwidth.</text></s>
<s sid="146"><CoreSc1 advantage="None" conceptID="Res40" novelty="None" type="Res"/><text>Fig. 9 illustrates the scenarios where two aggregate bursts with rate ρLDDoS very close to bandwidth B were sent one after the other with an interval between them.</text></s>
<s sid="147"><CoreSc1 advantage="None" conceptID="Res41" novelty="None" type="Res"/><text>The network is congested during two bursts T1 and T2.</text></s>
<s sid="148"><CoreSc1 advantage="None" conceptID="Res42" novelty="None" type="Res"/><text>However, since ρLDDoS is close to B, the number of dropped packets may be very small if no Active Queue Management (e.g., RED) is being deployed.</text></s>
<s sid="149"><CoreSc1 advantage="None" conceptID="Con7" novelty="None" type="Con"/><text>As previously described, our CPR-based approach employs RED to actively drop packets from the pulsing LDDoS flows.</text></s>
<s sid="150"><CoreSc1 advantage="None" conceptID="Res43" novelty="None" type="Res"/><text>In Fig. 9, T1∗ and T2∗ represent the packet-dropping period (mainly due to the RED) in the two bursts.</text></s>
<s sid="151"><CoreSc1 advantage="None" conceptID="Res44" novelty="None" type="Res"/><text>Note that in the figure, both T1∗ and T2∗ are represented as a single period for illustrative purposes.</text></s>
<s sid="152"><CoreSc1 advantage="None" conceptID="Con8" novelty="None" type="Con"/><text>In fact, there may be multiple short periods distributed within each burst.</text></s>
<s sid="153"><CoreSc1 advantage="None" conceptID="Con9" novelty="None" type="Con"/><text>However, this simplification does not affect our analysis below.</text></s>
<s sid="154"><CoreSc1 advantage="None" conceptID="Mod21" novelty="None" type="Mod"/><text>In this situation, we can get (7) and (8).(7)rLDDoS=(T1∗+T2∗)×δLDDoS/z(T1+T2)×ρLDDoS/z=(T1∗+T2∗)×δLDDoS(T1+T2)×ρLDDoS(8)θLDDoS=(T1∗+T2∗)×ρLDDoS/z(T1+T2)×ρLDDoS/z=(T1∗+T2∗)(T1+T2)</text></s>
<s sid="155"><CoreSc1 advantage="None" conceptID="Res45" novelty="None" type="Res"/><text>From (7) and (8), we can get (9).(9)θLDDoS=ρLDDoSδLDDoS×rLDDoS(δLDDoS&gt;0)0(δLDDoS=0)In (9), when δLDDoS=0, no packet dropping is observed.</text></s>
Consequently, T∗=0 and θLDDoS=0.
<s sid="156"><CoreSc1 advantage="None" conceptID="Obs19" novelty="None" type="Obs"/><text>If no RED is deployed, rLDDoS and δLDDoS could drop to 0, resulting in the CPR for the LDDoS flow to be 0 as well.</text></s>
<s sid="157"><CoreSc1 advantage="None" conceptID="Res46" novelty="None" type="Res"/><text>Under these conditions no attack flows will be detected.</text></s>
<s sid="158"><CoreSc1 advantage="None" conceptID="Res47" novelty="None" type="Res"/><text>However, when we turn on RED on the router, packets will be dropped and attack flows will be detected.</text></s>
<s sid="159"><CoreSc1 advantage="None" conceptID="Res48" novelty="None" type="Res"/><text>rLDDoS and δLDDoS in (9) are mainly determined by the RED mechanism in practice, as will be described in the next section.</text></s>
<s sid="160"><CoreSc1 advantage="None" conceptID="Res49" novelty="None" type="Res"/><text>Minimum average CPR difference between TCP and LDDoS flows</text></s>
<s sid="161"><CoreSc1 advantage="None" conceptID="Res50" novelty="None" type="Res"/><text>The minimum average CPR difference is obtained by subtracting the upper bound of normal TCP flows' average CPR (θTCP) from the lower bound of the average CPR of LDDoS flows (θLDDoS).</text></s>
<s sid="162"><CoreSc1 advantage="None" conceptID="Res51" novelty="None" type="Res"/><text>In order to calculate θTCP and θLDDoS based on (6) and (9), several parameters need to be measured from network traffic, including B, ρTCP,rTCP,ρLDDoS,δLDDoS, and rLDDoS.</text></s>
<s sid="163"><CoreSc1 advantage="None" conceptID="Res52" novelty="None" type="Res"/><text>Note that ρTCP and ρLDDoS , which respectively represents the average aggregate peak incoming rate of normal TCP flows and LDDoS flows, are normally higher than B - the bandwidth of the outgoing link of a router.</text></s>
<s sid="164"><CoreSc1 advantage="None" conceptID="Res53" novelty="None" type="Res"/><text>They could be measured at a router by sampling packets from its incoming link before those packets enter the packet queue or be dropped when the packet queue is full (packets that manage to enter the packet queue will be finally sent to the outgoing link of the router).</text></s>
<s sid="165"><CoreSc1 advantage="None" conceptID="Res54" novelty="None" type="Res"/><text>We measure these parameters in three test-bed experiments in Section 5 and show the calculation results - θTCPe and θLDDoSe - in Table 6.</text></s>
<s sid="166"><CoreSc1 advantage="None" conceptID="Res55" novelty="None" type="Res"/><text>According to Table 6, the minimum-average-CPR differences between normal TCP and LDDoS flows (θDIFe, which equals to θLDDoSe-θTCPe) are 62.05%, 69.49%, and 73.46% for those three test-bed experiments, resulting in an overall minimum-average-CPR difference of 68.3%.</text></s>
Simulation experiments
<s sid="167"><CoreSc1 advantage="None" conceptID="Res56" novelty="None" type="Res"/><text>In this section we present our experiment results obtained from ns-2 [16].</text></s>
<s sid="168"><CoreSc1 advantage="None" conceptID="Res57" novelty="None" type="Res"/><text>Section 4.1 tests the influence of the RED mechanism on the approach.</text></s>
<s sid="169"><CoreSc1 advantage="None" conceptID="Con10" novelty="None" type="Con"/><text>Section 4.2 evaluates the performance of the CPR-based approach in the presence of different LDDoS attacks.</text></s>
<s sid="170"><CoreSc1 advantage="None" conceptID="Con11" novelty="None" type="Con"/><text>Section 4.3 evaluates the performance of the approach in a challenging scenario - distinguishing LDDoS flows from short-lived HTTP flows.</text></s>
<s sid="171"><CoreSc1 advantage="None" conceptID="Con12" novelty="None" type="Con"/><text>Section 4.4 evaluates the trade-off between the detection rate and the false positive rate of our CPR-based approach that provides a quantitative guideline to determine the CPR threshold τ in practice.</text></s>
<s sid="172"><CoreSc1 advantage="None" conceptID="Res58" novelty="None" type="Res"/><text>Dumbbell network topologies are commonly used in congestion control studies [17].</text></s>
<s sid="173"><CoreSc1 advantage="None" conceptID="Res59" novelty="None" type="Res"/><text>Fig. 10 shows the experimental topology, which consists of two routers (R0, R1), 30 users (User1⋯User30), 20 attackers (Attacker1⋯Attacker20), 30 servers (Server1⋯Server30), and a victim server (Victim Server).</text></s>
<s sid="174"><CoreSc1 advantage="None" conceptID="Res60" novelty="None" type="Res"/><text>The link between two routers is the bottleneck link with a bandwidth of 5Mbps and one-way propagation delay of 6ms.</text></s>
<s sid="175"><CoreSc1 advantage="None" conceptID="Res61" novelty="None" type="Res"/><text>All the other links have a bandwidth of 10Mbps and a one-way propagation delay of 2ms.</text></s>
<s sid="176"><CoreSc1 advantage="None" conceptID="Res62" novelty="None" type="Res"/><text>In this topology, Useri communicates with Serveri (i=1⋯30) using FTP (generated by Application/FTP using Newreno TCP in ns-2), and 20 attackers send UDP packets (generated by Application/Traffic/CBR in ns-2) to attack the Victim Server.</text></s>
<s sid="177"><CoreSc1 advantage="None" conceptID="Res63" novelty="None" type="Res"/><text>The queue size of the bottleneck link is 50.</text></s>
<s sid="178"><CoreSc1 advantage="None" conceptID="Res64" novelty="None" type="Res"/><text>A RED based on packet count is deployed at router R0 on the queues of the bottleneck link.</text></s>
<s sid="179"><CoreSc1 advantage="None" conceptID="Res65" novelty="None" type="Res"/><text>Other links use DropTail queues.</text></s>
<s sid="180"><CoreSc1 advantage="None" conceptID="Res66" novelty="None" type="Res"/><text>A CPR-based detection module is installed at router R0 where most normal TCP packets are dropped when an LDDoS attack is present.</text></s>
<s sid="181"><CoreSc1 advantage="None" conceptID="Res67" novelty="None" type="Res"/><text>For comparison, we also install a module based on Cumulative Amplitude Spectrum (CAS) [18] at R0, CAS uses Discrete Fourier Transform (DFT) to locate anomalies caused by LDDoS flows.</text></s>
<s sid="182"><CoreSc1 advantage="None" conceptID="Res68" novelty="None" type="Res"/><text>A set of simulations are conducted and outlined in each of the following subsections.</text></s>
<s sid="183"><CoreSc1 advantage="None" conceptID="Res69" novelty="None" type="Res"/><text>Each simulation lasts for 240s.</text></s>
<s sid="184"><CoreSc1 advantage="None" conceptID="Res70" novelty="None" type="Res"/><text>LDDoS attack traffic begins at 120s and continues until 220s.</text></s>
<s sid="185"><CoreSc1 advantage="None" conceptID="Res71" novelty="None" type="Res"/><text>In Sections 4.1, 4.2, and 4.3, normal TCP traffic (the FTP flows from User to Server) begins at 20s and ends at 240s.</text></s>
<s sid="186"><CoreSc1 advantage="None" conceptID="Res72" novelty="None" type="Res"/><text>While in Section 4.4, it begins at a random time between 20s and 240s, and ends at 240s.</text></s>
<s sid="187"><CoreSc1 advantage="None" conceptID="Obj37" novelty="None" type="Obj"/><text>In this section, we use a 7-tuple (n,g,m,σ,Ta,Tb,Rb) to describe the parameters of an LDDoS attack.</text></s>
RED on our approach
<s sid="188"><CoreSc1 advantage="None" conceptID="Obj38" novelty="None" type="Obj"/><text>We first explore the influence of the RED mechanism on normal TCP flows, LDDoS flows and their CPRs.</text></s>
<s sid="189"><CoreSc1 advantage="None" conceptID="Obj39" novelty="None" type="Obj"/><text>We consider an AFI LDDoS attack with parameters (n=20,g=20,m=1,σ=1s,Ta=20s,Tb=200ms,Rb=5Mbps).</text></s>
<s sid="190"><CoreSc1 advantage="None" conceptID="Goa7" novelty="None" type="Goa"/><text>Here Rb is chosen to be close to the bandwidth of the bottleneck to represent the extreme situation to our CPR-based approach as described in Section 3.2.</text></s>
<s sid="191"><CoreSc1 advantage="None" conceptID="Goa8" novelty="None" type="Goa"/><text>Then using the same parameters we repeat the experiment two times.</text></s>
<s sid="192"><CoreSc1 advantage="None" conceptID="Goa9" novelty="None" type="Goa"/><text>The first time we employ DropTail on the bottleneck queue at router R0 and the second time we employ RED.</text></s>
<s sid="193"><CoreSc1 advantage="None" conceptID="Res73" novelty="None" type="Res"/><text>The sampling frequency is f=1000Hz in both experiments and the results are shown in Table 3.</text></s>
<s sid="194"><CoreSc1 advantage="None" conceptID="Obs20" novelty="None" type="Obs"/><text>In Table 3, ρa and ρna represent the average rates of normal TCP flows when there is an attack and when there is no attack, respectively.</text></s>
<s sid="195"><CoreSc1 advantage="None" conceptID="Obs21" novelty="None" type="Obs"/><text>rna represents the ratio of dropped packets to all packets at router R0 when there is no attack and ra is the one when there is an attack.</text></s>
<s sid="196"><CoreSc1 advantage="None" conceptID="Obs22" novelty="None" type="Obs"/><text>θTCP represents the average CPR of the normal TCP flows and θLDDoS is for the LDDoS flows.</text></s>
<s sid="197"><CoreSc1 advantage="None" conceptID="Obs23" novelty="None" type="Obs"/><text>The results in Table 3 indicate that when there is no attack RED has no obvious influence on the normal TCP flows (ρna and rna are almost the same for DropTail and RED).</text></s>
<s sid="198"><CoreSc1 advantage="None" conceptID="Obs24" novelty="None" type="Obs"/><text>However, when LDDoS attacks are present, RED significantly improves the throughput of normal TCP.</text></s>
<s sid="199"><CoreSc1 advantage="None" conceptID="Obs25" novelty="None" type="Obs"/><text>Note that in this case, RED drops 25% packets, much more than the 7.6% from DropTail.</text></s>
<s sid="200"><CoreSc1 advantage="None" conceptID="Res74" novelty="None" type="Res"/><text>In other words, when the aggregate rate of the LDDoS flows is very close to the bottleneck bandwidth of network, deploying RED is able to drop more attack packets while increasing the throughput of the normal TCP flows.</text></s>
<s sid="201"><CoreSc1 advantage="None" conceptID="Res75" novelty="None" type="Res"/><text>Admittedly RED might also drop more legitimate packets than DropTail here, however it achieves a higher normal-TCP-flow throughput ρa than DropTail.</text></s>
<s sid="202"><CoreSc1 advantage="None" conceptID="Con13" novelty="None" type="Con"/><text>The throughput ρa of normal TCP flows is considered to be more important than its drop ratio ra when a network is under an LDDoS attack.</text></s>
<s sid="203"><CoreSc1 advantage="None" conceptID="Con14" novelty="None" type="Con"/><text>Table 3 shows that under DropTail, the CPR-based approach may not be able to distinguish an LDDoS attack flow from a normal TCP flow since the two CPRs are close to one another.</text></s>
<s sid="204"><CoreSc1 advantage="None" conceptID="Con15" novelty="None" type="Con"/><text>However, it is also clear that the CPR-based approach under RED is able to detect an attack flow since the two CPRs are significantly different under RED.</text></s>
LDDoS attacks
<s sid="205"><CoreSc1 advantage="None" conceptID="Goa10" novelty="None" type="Goa"/><text>In this subsection, we conduct experiments to compare the effectiveness of our proposed CPR-based approach and the CAS approach [18] on detecting LDDoS attack flows under different categories of LDDoS attacks.</text></s>
<s sid="206"><CoreSc1 advantage="None" conceptID="Obs26" novelty="None" type="Obs"/><text>Parameters of the experiments are listed in Table 4, where for each of the three categories (AFI, AWI and ARI), we select a range of values for one variable and fix all the others.</text></s>
<s sid="207"><CoreSc1 advantage="None" conceptID="Obs27" novelty="None" type="Obs"/><text>For example, for the AFI LDDoS attack, we vary the attack period Ta for each single attack flow from 20s to 40s.</text></s>
<s sid="208"><CoreSc1 advantage="None" conceptID="Obs28" novelty="None" type="Obs"/><text>The italic values in the table list the parameters corresponding to the aggregate attack flow.</text></s>
<s sid="209"><CoreSc1 advantage="None" conceptID="Obs29" novelty="None" type="Obs"/><text>They are calculated according to Table 1, which demonstrates the relationship between the parameters of each LDDoS flow (Ta,Tb, and Rb) and their aggregate flow (Ta+,Tb+, and Rb+).</text></s>
<s sid="210"><CoreSc1 advantage="None" conceptID="Obs30" novelty="None" type="Obs"/><text>The results for the MI LDDoS attack are not presented here and can be provided upon request, but this category is just the combination of other three and the results are quantitatively comparable.</text></s>
<s sid="211"><CoreSc1 advantage="None" conceptID="Obs31" novelty="None" type="Obs"/><text>Fig. 11 shows the results for the AFI LDDoS attack.</text></s>
<s sid="212"><CoreSc1 advantage="None" conceptID="Obs32" novelty="None" type="Obs"/><text>Both the CPR-based approach and the CAS-based approach are quite effective for this category of the LDDoS attack.</text></s>
<s sid="213"><CoreSc1 advantage="None" conceptID="Obs33" novelty="None" type="Obs"/><text>It is worth noting that the difference between normal TCP flows and LDDoS flows in CPR (around 0.6) is larger than that in CAS (around 0.4).</text></s>
<s sid="214"><CoreSc1 advantage="None" conceptID="Res76" novelty="None" type="Res"/><text>We also observe that the average CPRs do not change too much as Ta increases.</text></s>
<s sid="215"><CoreSc1 advantage="None" conceptID="Res77" novelty="None" type="Res"/><text>This is because the CPR is calculated based on a ratio (Eq.</text></s>
(1)).
<s sid="216"><CoreSc1 advantage="None" conceptID="Obs34" novelty="None" type="Obs"/><text>When the attack period Ta increases, the attackers tend to send fewer packets.</text></s>
<s sid="217"><CoreSc1 advantage="None" conceptID="Res78" novelty="None" type="Res"/><text>However, the ratio of the incoming packets in congestion to the total incoming packets measured by a router may remain unchanged.</text></s>
<s sid="218"><CoreSc1 advantage="None" conceptID="Res79" novelty="None" type="Res"/><text>This explains the similar observations in Figs.</text></s>
12 and 13.
<s sid="219"><CoreSc1 advantage="None" conceptID="Obs35" novelty="None" type="Obs"/><text>Fig. 12 shows the results for the AWI LDDoS attack.</text></s>
<s sid="220"><CoreSc1 advantage="None" conceptID="Res80" novelty="None" type="Res"/><text>Our CPR-based approach is still effective - the difference in the average CPR for normal TCP flows and LDDoS flows is evident.</text></s>
<s sid="221"><CoreSc1 advantage="None" conceptID="Res81" novelty="None" type="Res"/><text>However, as Tb decreases (from 10ms to 0.1ms), the average CAS of the attack flows under the CAS-based approach also decreases.</text></s>
<s sid="222"><CoreSc1 advantage="None" conceptID="Res82" novelty="None" type="Res"/><text>When Tb is around 0.5ms, the average CAS of the normal TCP flows and the LDDoS flows is about the same.</text></s>
<s sid="223"><CoreSc1 advantage="None" conceptID="Obs36" novelty="None" type="Obs"/><text>Fig. 13 shows the results for the ARI LDDoS attack.</text></s>
<s sid="224"><CoreSc1 advantage="None" conceptID="Res83" novelty="None" type="Res"/><text>Similar to previous results, our CPR-based approach is still effective whereas the effectiveness of the CAS-based approach decreases as Rb decreases (from 0.25Mbps to 0.01Mbps).</text></s>
<s sid="225"><CoreSc1 advantage="None" conceptID="Con16" novelty="None" type="Con"/><text>These experimental results clearly demonstrate that our CPR-based approach works well for all three categories (AFI, AWI, and ARI) of LDDoS attacks whereas the CAS-based approach only works for AFI LDDoS.</text></s>
<s sid="226"><CoreSc1 advantage="None" conceptID="Res84" novelty="None" type="Res"/><text>CAS distinguishes LDoS flows from normal TCP flows using their spectrum difference in low frequency band.</text></s>
<s sid="227"><CoreSc1 advantage="None" conceptID="Res85" novelty="None" type="Res"/><text>It works well for small-scale LDoS attacks.</text></s>
<s sid="228"><CoreSc1 advantage="None" conceptID="Res86" novelty="None" type="Res"/><text>However, an attacker can dramatically reduce the burst width Tb and burst rate Rb of each LDDoS flow by launching large-scale LDDoS attacks, including LDoS attacks with spoofing IP addresses.</text></s>
<s sid="229"><CoreSc1 advantage="None" conceptID="Res87" novelty="None" type="Res"/><text>The spectrum difference in low frequency band between an LDoS flow and a normal TCP flow decreases when Tb and Rb of each LDDoS flow are reduced.</text></s>
<s sid="230"><CoreSc1 advantage="None" conceptID="Res88" novelty="None" type="Res"/><text>For this reason DFT-based approaches, such as CAS, are not effective in detecting large-scale LDDoS attacks.</text></s>
HTTP traffic
<s sid="231"><CoreSc1 advantage="None" conceptID="Res89" novelty="None" type="Res"/><text>LDDoS flows can be short lived so that their traffic pattern is similar to that of normal short-lived flows like HTTP flows.</text></s>
<s sid="232"><CoreSc1 advantage="None" conceptID="Con17" novelty="None" type="Con"/><text>Therefore, it is challenging to distinguish LDDoS flows from HTTP flows.</text></s>
<s sid="233"><CoreSc1 advantage="None" conceptID="Con18" novelty="None" type="Con"/><text>In this subsection, we evaluate the performance of the CPR-based approach for distinguishing LDDoS flows from HTTP flows.</text></s>
<s sid="234"><CoreSc1 advantage="None" conceptID="Con19" novelty="None" type="Con"/><text>HTTP traffic in our experiment is generated by PackMime generator [19], that uses real Internet traces.</text></s>
<s sid="235"><CoreSc1 advantage="None" conceptID="Res90" novelty="None" type="Res"/><text>The network topology is similar to that in Fig. 10, but with only 10 users (this is due to the limit of PackMime), 10 servers, and 10 attackers.</text></s>
<s sid="236"><CoreSc1 advantage="None" conceptID="Res91" novelty="None" type="Res"/><text>Let Rc represent the average number of new connections started per second in PackMime.</text></s>
<s sid="237"><CoreSc1 advantage="None" conceptID="Obj40" novelty="None" type="Obj"/><text>We investigate the relationship between Rc and the average CPRs of normal HTTP flows and LDDoS flows.</text></s>
<s sid="238"><CoreSc1 advantage="None" conceptID="Res92" novelty="None" type="Res"/><text>The experimental results are shown in Fig. 14.</text></s>
<s sid="239"><CoreSc1 advantage="None" conceptID="Con20" novelty="None" type="Con"/><text>One can see from the figure that the difference between the average CPR of normal HTTP flows and that of LDDoS flows increases as Rcincreases.</text></s>
<s sid="240"><CoreSc1 advantage="None" conceptID="Con21" novelty="None" type="Con"/><text>Thus it is not harder but easier for our CPR-based approach to distinguish LDDoS flows from normal HTTP flows when there are more normal HTTP flows.</text></s>
<s sid="241"><CoreSc1 advantage="None" conceptID="Res93" novelty="None" type="Res"/><text>Trade-off of detection rate and false positive rate</text></s>
<s sid="242"><CoreSc1 advantage="None" conceptID="Res94" novelty="None" type="Res"/><text>In this subsection, we conduct experiments based on MI LDDoS attacks to systematically understand the principle of our CPR-based approach.</text></s>
<s sid="243"><CoreSc1 advantage="None" conceptID="Res95" novelty="None" type="Res"/><text>The parameters of the LDDoS attack are (n=20,g=5,m=4,Tg,Ta,Tb,Rb), where Ta∈[0.5,5]s, Tb∈ [25]ms, and Rb∈[0.75,1.5]Mbps.</text></s>
<s sid="244"><CoreSc1 advantage="None" conceptID="Res96" novelty="None" type="Res"/><text>It took over 36h to conduct hundreds of experiments that still use the dumbbell network shown in Fig. 10.</text></s>
<s sid="245"><CoreSc1 advantage="None" conceptID="Res97" novelty="None" type="Res"/><text>In these experiments, each user starts to send normal TCP traffic at a random time between 20s and 240s, and stops sending at 240s.</text></s>
<s sid="246"><CoreSc1 advantage="None" conceptID="Con22" novelty="None" type="Con"/><text>This simulates users' random behavior on the Internet.</text></s>
<s sid="247"><CoreSc1 advantage="None" conceptID="Con23" novelty="None" type="Con"/><text>Fig. 15a depicts the probability distribution of CPR of normal TCP flows and LDDoS flows.</text></s>
<s sid="248"><CoreSc1 advantage="None" conceptID="Con24" novelty="None" type="Con"/><text>Clearly, the CPRs of these two different flows are distributed on the two ends between 0 and 1, with a small overlap in the middle.</text></s>
<s sid="249"><CoreSc1 advantage="None" conceptID="Res98" novelty="None" type="Res"/><text>Fig. 15a also provides experimental guidance for choosing the CPR τ threshold in practice.</text></s>
<s sid="250"><CoreSc1 advantage="None" conceptID="Res99" novelty="None" type="Res"/><text>From the figure, for any given CPR x∈(0,1), one can obtain the experimental likelihood (Hx) that the average CPR of LDDoS flows is higher than x, which is the ratio of the red area on the right side of x to the whole red area.</text></s>
<s sid="251"><CoreSc1 advantage="None" conceptID="Res100" novelty="None" type="Res"/><text>Similarly, one can obtain the likelihood (Lx) that the average CPR of normal TCP flows is smaller than x.</text></s>
<s sid="252"><CoreSc1 advantage="None" conceptID="Res101" novelty="None" type="Res"/><text>Based on this, one can choose the CPR threshold τ to be x to achieve detection rate Hx with a false positive rate (1-Lx).</text></s>
<s sid="253"><CoreSc1 advantage="None" conceptID="Res102" novelty="None" type="Res"/><text>Obviously, a higher x corresponds to a lower Hx and a higher Lx.</text></s>
<s sid="254"><CoreSc1 advantage="None" conceptID="Res103" novelty="None" type="Res"/><text>This trade-off is indicated in the Receiver Operating Characteristic (ROC) curve in Fig. 15b, where each point on the ROC curve corresponds to a CPR x∈(0,1) in Fig. 15a.</text></s>
<s sid="255"><CoreSc1 advantage="None" conceptID="Res104" novelty="None" type="Res"/><text>For example, when x=0.63, we can achieve a 100% detection rate with a 1.625% false positive rate.</text></s>
<s sid="256"><CoreSc1 advantage="None" conceptID="Res105" novelty="None" type="Res"/><text>Real network and internet trace experiments</text></s>
<s sid="257"><CoreSc1 advantage="None" conceptID="Obj41" novelty="None" type="Obj"/><text>In addition to the simulation conducted using ns-2, we set up a test-bed shown in Fig. 16 to further evaluate the performance of the CPR-based approach.</text></s>
<s sid="258"><CoreSc1 advantage="None" conceptID="Obs37" novelty="None" type="Obs"/><text>Entities in the test-bed are all PCs, whose function, OS and installed software are listed in Table 5.</text></s>
<s sid="259"><CoreSc1 advantage="None" conceptID="Res106" novelty="None" type="Res"/><text>In the test-bed experiments, normal TCP flows include short-lived TCP (e.g., SSH) and long-lived TCP (e.g., FTP).</text></s>
<s sid="260"><CoreSc1 advantage="None" conceptID="Con25" novelty="None" type="Con"/><text>We use these two kinds of TCP flows to represent the mixed TCP traffic on the real network.</text></s>
<s sid="261"><CoreSc1 advantage="None" conceptID="Con26" novelty="None" type="Con"/><text>We modify the TFN2K [20], a well-known DDoS attack tool, to label its attack flows by the ID field in the IP header.</text></s>
<s sid="262"><CoreSc1 advantage="None" conceptID="Met15" novelty="None" type="Met"/><text>We also add LDDoS attack function to the TFN2K and correct its header-checksum algorithm.</text></s>
<s sid="263"><CoreSc1 advantage="None" conceptID="Met16" novelty="None" type="Met"/><text>We name the refined program as TFN2K4R (Tribe Flood Network 2000 For Research).</text></s>
<s sid="264"><CoreSc1 advantage="None" conceptID="Met17" novelty="None" type="Met"/><text>TF2K4R is used to generate labeled LDDoS traffic.</text></s>
<s sid="265"><CoreSc1 advantage="None" conceptID="Res107" novelty="None" type="Res"/><text>The labels are used to verify the detection rate of our CPR-based approach.</text></s>
<s sid="266"><CoreSc1 advantage="None" conceptID="Res108" novelty="None" type="Res"/><text>In the experiments User1 and User2 use FTP (long-live TCP flows) to upload a 32MB file to Server while User3 and User4 use SCP (short-lived TCP flows) to transfer 50 copies of a 0.5MB file to Server.</text></s>
<s sid="267"><CoreSc1 advantage="None" conceptID="Res109" novelty="None" type="Res"/><text>For the attack, we fix the first six parameters in the 7-tuple (n,g,m,σ,Ta,Tb,Rb) and vary the last parameter Rb.</text></s>
<s sid="268"><CoreSc1 advantage="None" conceptID="Res110" novelty="None" type="Res"/><text>The first six parameters are fixed as n=4, g=1, m=4, σ=0,Ta=1s, and Tb=200ms.</text></s>
<s sid="269"><CoreSc1 advantage="None" conceptID="Res111" novelty="None" type="Res"/><text>The setting of these fixed parameters means that four attackers each simultaneously start an LDoS attack (Ta=1s,Tb=200ms,Rb,s=5s).</text></s>
<s sid="270"><CoreSc1 advantage="None" conceptID="Res112" novelty="None" type="Res"/><text>A total of three experiments are conducted, each with a different Rb.</text></s>
<s sid="271"><CoreSc1 advantage="None" conceptID="Mod22" novelty="None" type="Mod"/><text>Table 6 presents the average CPR for different flows, where θFTP is the average CPR for long-lived FTP flows (User1 and User2), θSCP is the average CPR for short-lived SCP flows (User3 and User4), and θLDDoS is the average CPR for LDDoS flows.θTCPe is the estimated average CPR of normal TCP flows calculated using (6) and θLDDoSe is the estimated average CPR of LDDoS flows calculated using (9).</text></s>
<s sid="272"><CoreSc1 advantage="None" conceptID="Res113" novelty="None" type="Res"/><text>θDIFe is the estimated average CPR difference between normal TCP flows and LDDoS flows, which equals to θLDDoSe-θTCPe.</text></s>
<s sid="273"><CoreSc1 advantage="None" conceptID="Res114" novelty="None" type="Res"/><text>Table 6 shows a clear difference between the average CPR of LDDoS flows (θLDDoS) and normal TCP flows (θFTP and θSCP).</text></s>
<s sid="274"><CoreSc1 advantage="None" conceptID="Res115" novelty="None" type="Res"/><text>It is also noticeable that the calculated θTCPe and θLDDoSe are quite close to the measured CPR (θFTP,θSCP and θLDDoS), which indicates that our analysis in Section 3.3 is reasonable.</text></s>
<s sid="275"><CoreSc1 advantage="None" conceptID="Con27" novelty="None" type="Con"/><text>We further use real Internet traffic to validate our CPR-based approach.</text></s>
<s sid="276"><CoreSc1 advantage="None" conceptID="Con28" novelty="None" type="Con"/><text>The LBNL/ICSI Enterprise Trace [21] is collected at a medium-sized enterprise site - one of the most possible places to install our approach.</text></s>
<s sid="277"><CoreSc1 advantage="None" conceptID="Obj42" novelty="None" type="Obj"/><text>We use (6) to estimate the average CPR of the TCP flows contained in the traces.</text></s>
<s sid="278"><CoreSc1 advantage="None" conceptID="Obj43" novelty="None" type="Obj"/><text>The collected trace did not record dropped packets, thus we cannot calculate the drop-packet-ratio rTCP needed in (6).</text></s>
<s sid="279"><CoreSc1 advantage="None" conceptID="Mod23" novelty="None" type="Mod"/><text>Instead, we use the out-of-sequence packets [22] to approximate rTCP.</text></s>
<s sid="280"><CoreSc1 advantage="None" conceptID="Res116" novelty="None" type="Res"/><text>The average CPR of the normal TCP flows for the three traces selected from [21] are 0.93%, 0.77%, and 0.70%, respectively.</text></s>
<s sid="281"><CoreSc1 advantage="None" conceptID="Res117" novelty="None" type="Res"/><text>This is because the traces were collected when the network was not congested (the ratio of out-of-sequence packet is very small) and their CPR values tend to be zero.</text></s>
<s sid="282"><CoreSc1 advantage="None" conceptID="Res118" novelty="None" type="Res"/><text>Since currently there is no LDDoS attack trace publically available, using real attack traffic to validate our CPR-based approach remains one of our future work.</text></s>
Discussion
<s sid="283"><CoreSc1 advantage="None" conceptID="Con29" novelty="None" type="Con"/><text>Our CPR-based approach is an online algorithm that can be easily implemented in a router because its basic mechanism is simply counting packets, and then calculating the CPR based on Eq.</text></s>
<s sid="284"><CoreSc1 advantage="None" conceptID="Con30" novelty="None" type="Con"/><text>(1), whose accuracy has been verified in the previous section.</text></s>
<s sid="285"><CoreSc1 advantage="None" conceptID="Con31" novelty="None" type="Con"/><text>In this section we discuss practical issues related to the implementation of the CPR-based approach.</text></s>
Flow table sizes
<s sid="286"><CoreSc1 advantage="None" conceptID="Con32" novelty="None" type="Con"/><text>Compared to existing approaches on detecting LDDoS attacks [9,18,23-27], our CPR-based approach is capable of detecting whether a flow is an attack flow or a normal TCP flow.</text></s>
<s sid="287"><CoreSc1 advantage="None" conceptID="Con33" novelty="None" type="Con"/><text>A flow table is required to maintain the CPR of all the flows passing through the router where the CPR-based approach is installed.</text></s>
<s sid="288"><CoreSc1 advantage="None" conceptID="Con34" novelty="None" type="Con"/><text>Our CPR-based approach requires 19.44MB memory to maintain 11,341,289 flows in an ISP trace with OC48 speed (conducted in.[28-30]) using a bloom filter calculator [31] with the probability of false positive of 0.001.</text></s>
<s sid="289"><CoreSc1 advantage="None" conceptID="Con35" novelty="None" type="Con"/><text>However, the CPR-based module should be installed on routers to which the bottleneck link, to the potential victim, is connected.</text></s>
<s sid="290"><CoreSc1 advantage="None" conceptID="Con36" novelty="None" type="Con"/><text>Such routers are unlikely to be ISP routers since they are unlikely to be bottleneck [32].</text></s>
<s sid="291"><CoreSc1 advantage="None" conceptID="Con37" novelty="None" type="Con"/><text>Consequently the number of flows our CPR-based approach needs to maintain will be considerably less than the one in the ISP trace leading to smaller size memory requirements.</text></s>
<s sid="292"><CoreSc1 advantage="None" conceptID="Con38" novelty="None" type="Con"/><text>Additionally, as will be discussed in the next subsection, Multilevel Bloom Filter techniques have been proposed, which can be used to further reduce the flow table size.</text></s>
<s sid="293"><CoreSc1 advantage="None" conceptID="Con39" novelty="None" type="Con"/><text>Besides the flow table, our CPR-based approach also needs a flow size estimation, which can be achieved through existing solutions implemented at current routers such as Cisco NetFlow [10].</text></s>
IP address spoofing
<s sid="294"><CoreSc1 advantage="None" conceptID="Con40" novelty="None" type="Con"/><text>According to the way it generates spoofed source addresses, IP address spoofing can be classified into two types: fixed spoofing and random spoofing.</text></s>
<s sid="295"><CoreSc1 advantage="None" conceptID="Con41" novelty="None" type="Con"/><text>Fixed spoofing generally does not cause a large-space overhead for our approach, as its source addresses are chosen from a predefined list [33].</text></s>
<s sid="296"><CoreSc1 advantage="None" conceptID="Con42" novelty="None" type="Con"/><text>While random spoofing would drastically increase the flow table size needed in our approach because a flow is defined based on IP addresses.</text></s>
<s sid="297"><CoreSc1 advantage="None" conceptID="Con43" novelty="None" type="Con"/><text>There are already a number of solutions to tackle IP spoofing [34], such as Network Ingress Filtering [35].</text></s>
<s sid="298"><CoreSc1 advantage="None" conceptID="Con44" novelty="None" type="Con"/><text>However, since none of the solutions are widely deployed, we describe an alternative technique &quot;Multilevel Bloom Filters&quot; that can be integrated into our approach to mitigate the large-space-overhead problem caused by random spoofing.</text></s>
<s sid="299"><CoreSc1 advantage="None" conceptID="Con45" novelty="None" type="Con"/><text>Multilevel Bloom Filters (MBF) have been shown to be an effective approach for mitigating the large-space-overhead problem by providing a trade-off between the space requirement and the false positive rate [36].</text></s>
<s sid="300"><CoreSc1 advantage="None" conceptID="Con46" novelty="None" type="Con"/><text>The MBF technique is inspired by the success of the Stochastic Fair Blue (SFB) [36] algorithm, which is a scalable approach to record and update the state information of flows through Multilevel Bloom Filters.</text></s>
<s sid="301"><CoreSc1 advantage="None" conceptID="Con47" novelty="None" type="Con"/><text>According to [36], the MBF effectively gives the algorithm NL unique &quot;buckets&quot; using L×N number of bins (L levels with N bins in each level).</text></s>
<s sid="302"><CoreSc1 advantage="None" conceptID="Con48" novelty="None" type="Con"/><text>That is, we can save (1-L×N/NL)×100% of required buffer or memory space by using Multilevel Bloom Filters.</text></s>
<s sid="303"><CoreSc1 advantage="None" conceptID="Con49" novelty="None" type="Con"/><text>For example, we can save up to (1-2×23/232)=91.3% of the required memory by using a MBF with L=2 and N=23.</text></s>
<s sid="304"><CoreSc1 advantage="None" conceptID="Con50" novelty="None" type="Con"/><text>In our recent work.[37], we have employed MBF techniques and observe an efficient memory save using the approach with an affordable false positive rate.</text></s>
UDP traffic
<s sid="305"><CoreSc1 advantage="None" conceptID="Con51" novelty="None" type="Con"/><text>Our CPR-based approach has been demonstrated to work effectively in distinguishing normal TCP flows from LDDoS flows.</text></s>
<s sid="306"><CoreSc1 advantage="None" conceptID="Con52" novelty="None" type="Con"/><text>Since UDP flows normally do not reduce their transmission rate when the network is congested, we believe that the current CPR-based approach will treat a UDP flow as an attack flow if the UDP flow behaves non-responsively.</text></s>
<s sid="307"><CoreSc1 advantage="None" conceptID="Con53" novelty="None" type="Con"/><text>Further investigation on differentiating UDP flows and attack flows, and the fairness issue will be investigated in future work.</text></s>
Integration of RED
<s sid="308"><CoreSc1 advantage="None" conceptID="Con54" novelty="None" type="Con"/><text>The motivation of employing the RED [11] queue management mechanism together with our approach is to improve the performance of our approach in the extreme scenario described in Section 3.2.</text></s>
<s sid="309"><CoreSc1 advantage="None" conceptID="Con55" novelty="None" type="Con"/><text>The the RED [11] mechanism enable our CPR-based approach to still be effective in detecting LDDoS attack flows in that very extreme scenario.</text></s>
<s sid="310"><CoreSc1 advantage="None" conceptID="Con56" novelty="None" type="Con"/><text>Although the RED mechanism is found to be notably vulnerable to LDoS attacks [37,38], it does not introduce vulnerabilities, because our approach detects and filters attack flows while simultaneously protecting RED from being exploited.</text></s>
Adversarial analysis
<s sid="311"><CoreSc1 advantage="None" conceptID="Con57" novelty="None" type="Con"/><text>Finally we briefly discuss how difficult it would be for an attacker to evade our CPR-based approach.</text></s>
<s sid="312"><CoreSc1 advantage="None" conceptID="Con58" novelty="None" type="Con"/><text>The various types of LDDoS attacks shown in Fig. 3 may adopt different detection evasion strategies while causing the same damage to normal flows.</text></s>
<s sid="313"><CoreSc1 advantage="None" conceptID="Con59" novelty="None" type="Con"/><text>For example, AFI LDDoS attacks could enlarge the attack period Ta for each attack flow; AWI LDDoS attacks could narrow the attack burst width Tb of each attack flow; ARI LDDoS attacks could reduce the attack burst rate Rb for every attack flow and MI LDDoS attacks could employ one or several of the aforementioned strategies.</text></s>
<s sid="314"><CoreSc1 advantage="None" conceptID="Res119" novelty="None" type="Res"/><text>We have evaluated the performance of the proposed approach under AFI, AWI, and ARI LDDoS attacks in Section 4.2 and against MI LDDoS attacks in Section 4.4.</text></s>
<s sid="315"><CoreSc1 advantage="None" conceptID="Con60" novelty="None" type="Con"/><text>Experimental results show that the Congestion Participation Rate (CPR) is a reliable and robust metric for identifying LDDoS attack flows for all LDDoS attack categories listed in Fig. 3.</text></s>
<s sid="316"><CoreSc1 advantage="None" conceptID="Con61" novelty="None" type="Con"/><text>Generally, an attacker might want to lower the CPR value by sending fake pulses that do not cause network congestion.</text></s>
<s sid="317"><CoreSc1 advantage="None" conceptID="Con62" novelty="None" type="Con"/><text>Although fake pulses may lower the CPR value of an LDDoS flow, as long as the flow still sends packets during congestion periods, it will be detected since it still has a higher CPR than a normal TCP flow.</text></s>
<s sid="318"><CoreSc1 advantage="None" conceptID="Con63" novelty="None" type="Con"/><text>The only way to completely evade our CPR-based detection is to send all the attack packets using the TCP congestion control mechanism, in other words, to make an LDDoS flow behave like a normal TCP flow.</text></s>
<s sid="319"><CoreSc1 advantage="None" conceptID="Con64" novelty="None" type="Con"/><text>In this case, the LDDoS flow hardly achieves any obvious attack effects.</text></s>
<s sid="320"><CoreSc1 advantage="None" conceptID="Res120" novelty="None" type="Res"/><text>To summarize, to the attacker, there is a trade-off between mounting an effective attack but being detected or evading our approach but loosing attack effectiveness.</text></s>
Related work
<s sid="321"><CoreSc1 advantage="None" conceptID="Res121" novelty="None" type="Res"/><text>LDoS attacks were proposed by Kuzmanovic [2] in 2003, which were also called shrew [2] attacks and Pulsing DoS (PDoS) attacks [9].</text></s>
<s sid="322"><CoreSc1 advantage="None" conceptID="Res122" novelty="None" type="Res"/><text>LDDoS attacks are LDoS attacks that are launched from hosts distributed on the Internet.</text></s>
<s sid="323"><CoreSc1 advantage="None" conceptID="Obj44" novelty="None" type="Obj"/><text>Since LDoS was initially proposed in [2], a series of variants of LDoS attacks have been discussed, including:•</text></s>
<s sid="324"><CoreSc1 advantage="None" conceptID="Res123" novelty="None" type="Res"/><text>Reduction of Quality (RoQ) attacks [39] that exploit the performance vulnerability during a system's adaptation process.</text></s>
<s sid="325"><CoreSc1 advantage="None" conceptID="Res124" novelty="None" type="Res"/><text>RoQ attacks could dramatically reduce the service quality of a network element, or deprive it of a large amount of its capacity, by only occupying a small fraction of its capacity [39].</text></s>
•
<s sid="326"><CoreSc1 advantage="None" conceptID="Res125" novelty="None" type="Res"/><text>LDoS attacks targeting application servers (LoRDAS attacks) [40].</text></s>
<s sid="327"><CoreSc1 advantage="None" conceptID="Con65" novelty="None" type="Con"/><text>LoRDAS attacks can reduce the availability of an application server in a controlled manner by generating pulsing service request, using only low-rate traffic.</text></s>
<s sid="328"><CoreSc1 advantage="None" conceptID="Con66" novelty="None" type="Con"/><text>These LDoS variants are not directly addressable by the CPR-based approach proposed in this paper.</text></s>
<s sid="329"><CoreSc1 advantage="None" conceptID="Con67" novelty="None" type="Con"/><text>Adopting the CPR-based approach to address these new variants is part of our future work.</text></s>
<s sid="330"><CoreSc1 advantage="None" conceptID="Con68" novelty="None" type="Con"/><text>Presently approaches to detect and filter LDoS attacks mainly consider two characteristics of LDoS attacks.</text></s>
<s sid="331"><CoreSc1 advantage="None" conceptID="Con69" novelty="None" type="Con"/><text>One is the pulsing high rate characteristic and the other is the periodical characteristic.</text></s>
<s sid="332"><CoreSc1 advantage="None" conceptID="Res126" novelty="None" type="Res"/><text>Kuzmanovic [2] and Sarat [23] proposed approaches that explore the pulsing high rate characteristic of LDoS attacks.</text></s>
<s sid="333"><CoreSc1 advantage="None" conceptID="Res127" novelty="None" type="Res"/><text>Active Queue Management (AQM) mechanisms (such as SRED [41]) were used to mitigate LDoS attacks.</text></s>
<s sid="334"><CoreSc1 advantage="None" conceptID="Res128" novelty="None" type="Res"/><text>Their approaches were easy to deploy and effective at improving the performance of normal TCP flows in the presence of LDoS attacks.</text></s>
<s sid="335"><CoreSc1 advantage="None" conceptID="Res129" novelty="None" type="Res"/><text>However, the adaptive mechanisms in AQM algorithms are also targets of LDoS attacks.</text></s>
<s sid="336"><CoreSc1 advantage="None" conceptID="Res130" novelty="None" type="Res"/><text>RED-like algorithms [11,36,42], as typical representatives of AQM algorithms, have already been found to be considerably vulnerable to LDoS attacks [37,38].</text></s>
<s sid="337"><CoreSc1 advantage="None" conceptID="Res131" novelty="None" type="Res"/><text>Shevtekar [24] proposed an approach based on the traffic anomaly of all the expired flows to detect LDoS attacks, considering the pulsing (short-lived) characteristic of the LDoS attacks.</text></s>
<s sid="338"><CoreSc1 advantage="None" conceptID="Con70" novelty="None" type="Con"/><text>This approach has the capability to detect LDoS attacks even when the source and destination IP addresses are spoofed.</text></s>
<s sid="339"><CoreSc1 advantage="None" conceptID="Con71" novelty="None" type="Con"/><text>Unfortunately it only identifies the presence of attacks, and not the identity of the attack flows.</text></s>
<s sid="340"><CoreSc1 advantage="None" conceptID="Con72" novelty="None" type="Con"/><text>Sun's approach [25] based on Dynamic Time Warping (DTW) examined the periodical characteristic of LDoS attacks.</text></s>
<s sid="341"><CoreSc1 advantage="None" conceptID="Con73" novelty="None" type="Con"/><text>This approach can detect LDoS attacks that employ variable attack pulsing periods.</text></s>
<s sid="342"><CoreSc1 advantage="None" conceptID="Con74" novelty="None" type="Con"/><text>However, since this DTW-based approach used the similarity between real-time LDoS flows and the sampled LDoS flows, it is only effective for the aggregate flow of LDDoS attacks.</text></s>
<s sid="343"><CoreSc1 advantage="None" conceptID="Con75" novelty="None" type="Con"/><text>In other words, it can only detect the presence of an LDDoS attack, but fails to identify whether a given flow is an LDDoS flow or not.</text></s>
<s sid="344"><CoreSc1 advantage="None" conceptID="Con76" novelty="None" type="Con"/><text>Discrete Fourier Transform (DFT)-based approaches proposed by Chen [18] and Wei [26] consider both the periodical characteristic and the pulsing high rate characteristic of LDoS attacks.</text></s>
<s sid="345"><CoreSc1 advantage="None" conceptID="Con77" novelty="None" type="Con"/><text>They explore the difference between the traffic spectrum of attack flows and that of normal flows.</text></s>
<s sid="346"><CoreSc1 advantage="None" conceptID="Con78" novelty="None" type="Con"/><text>DFT-based approaches are considered to be one of the most efficient approaches in detecting LDoS attacks.</text></s>
<s sid="347"><CoreSc1 advantage="None" conceptID="Con79" novelty="None" type="Con"/><text>However, they have difficulties in identifying single flows in large-scale LDDoS attacks.</text></s>
<s sid="348"><CoreSc1 advantage="None" conceptID="Con80" novelty="None" type="Con"/><text>Luo [9] proposed an approach based on wavelet transform after considering the influence of LDoS attacks on the input TCP data traffic and output TCP ACK traffic.</text></s>
<s sid="349"><CoreSc1 advantage="None" conceptID="Con81" novelty="None" type="Con"/><text>This approach considers both the attack flows' characteristics and their influence on network traffic.</text></s>
<s sid="350"><CoreSc1 advantage="None" conceptID="Con82" novelty="None" type="Con"/><text>An extension to this approach is their Vanguard detection system that employs more metrics to detect various LDoS attacks [43].</text></s>
<s sid="351"><CoreSc1 advantage="None" conceptID="Con83" novelty="None" type="Con"/><text>These approaches are both limited by their ability to only detect the aggregate flow of an LDDoS attack.</text></s>
<s sid="352"><CoreSc1 advantage="None" conceptID="Con84" novelty="None" type="Con"/><text>The Shrew Attack Protection (SAP) mechanism.[44] mitigates the LDoS attack by giving priority to flows with high packet loss rate.</text></s>
<s sid="353"><CoreSc1 advantage="None" conceptID="Con85" novelty="None" type="Con"/><text>While SAP can maintain high throughput for TCP flows under certain LDoS attacks and always prevent TCP sessions from closing, it has obvious performance degradation when the attack uses the ports protected by SAP.</text></s>
<s sid="354"><CoreSc1 advantage="None" conceptID="Con86" novelty="None" type="Con"/><text>The generalized entropy metric and the information distance metric were proposed in [45] to detect LDDoS attacks.</text></s>
<s sid="355"><CoreSc1 advantage="None" conceptID="Con87" novelty="None" type="Con"/><text>This approach has advantages in terms of detection speed and false positive rate.</text></s>
<s sid="356"><CoreSc1 advantage="None" conceptID="Con88" novelty="None" type="Con"/><text>The impracticality of this approach is rather unfortunate with successful implementation relying on gaining full control of all the routers in the network.</text></s>
<s sid="357"><CoreSc1 advantage="None" conceptID="Con89" novelty="None" type="Con"/><text>A mathematical model [46] and a defense technique [47] were proposed for LDoS attacks targeting application servers [40].</text></s>
<s sid="358"><CoreSc1 advantage="None" conceptID="Goa11" novelty="None" type="Goa"/><text>The model and defense technique are stimulating, but more experiments and analyses are needed to test their effectiveness for LDDoS attacks targeting TCP traffic [2] that are studied in this paper.</text></s>
<s sid="359"><CoreSc1 advantage="None" conceptID="Con90" novelty="None" type="Con"/><text>In a large-scale LDDoS attack, the attack period of each single attack flow could be very long.</text></s>
<s sid="360"><CoreSc1 advantage="None" conceptID="Con91" novelty="None" type="Con"/><text>Its peak rate could be very small, and the pulsing period could be very short.</text></s>
<s sid="361"><CoreSc1 advantage="None" conceptID="Con92" novelty="None" type="Con"/><text>Thus the average rate of every single attack flow could be very low, even lower than a normal flow in a large-scale LDDoS attack.</text></s>
<s sid="362"><CoreSc1 advantage="None" conceptID="Con93" novelty="None" type="Con"/><text>This is the main reason that existing approaches can only detect the aggregate flow of an LDDoS attack, rather than a single attack flow.</text></s>
<s sid="363"><CoreSc1 advantage="None" conceptID="Con94" novelty="None" type="Con"/><text>The Congestion Participation Rate (CPR)-based approach proposed in this paper can detect single LDDoS attack flows.</text></s>
<s sid="364"><CoreSc1 advantage="None" conceptID="Con95" novelty="None" type="Con"/><text>In addition to existing LDoS detection approaches, flow-level Active Queue Management (AQM) mechanisms are also relevant to our approach as they detect and limit unresponsive [48] flows, including FRED [49], RED-PD [50], SFB [51], CHOKe[52], etc.</text></s>
<s sid="365"><CoreSc1 advantage="None" conceptID="Con96" novelty="None" type="Con"/><text>However, most existing flow-level AQMs aim to maintain fairness among traffic flows instead of detecting LDDoS flows.</text></s>
<s sid="366"><CoreSc1 advantage="None" conceptID="Res132" novelty="None" type="Res"/><text>Moreover, some of them (RED-PD[50] and SFB[51]) have already been identified as being vulnerable to LDoS attacks [37,38].</text></s>
Conclusions
<s sid="367"><CoreSc1 advantage="None" conceptID="Con97" novelty="None" type="Con"/><text>In this paper, we have proposed an effective and efficient approach to detect and filter TCP-targeted LDDoS attacks [2,9] based on a novel metric - Congestion Participation Rate (CPR).</text></s>
<s sid="368"><CoreSc1 advantage="None" conceptID="Con98" novelty="None" type="Con"/><text>The CPR-based approach can achieve per-flow-level detection of LDDoS attacks.</text></s>
<s sid="369"><CoreSc1 advantage="None" conceptID="Res133" novelty="None" type="Res"/><text>We have analytically expressed the upper bound of the average CPR for normal TCP flows and the lower bound of the average CPR for LDDoS flows, using several network parameters that are directly measureable.</text></s>
<s sid="370"><CoreSc1 advantage="None" conceptID="Res134" novelty="None" type="Res"/><text>We have implemented the CPR-based approach and conducted comprehensive experiments in both ns-2 and test-bed.</text></s>
<s sid="371"><CoreSc1 advantage="None" conceptID="Con99" novelty="None" type="Con"/><text>The experiment results have demonstrated that, compared to the existing Discrete Fourier Transform (DFT)-based approach, the CPR-based approach is effective for all LDDoS attacks considered, while the DFT-based approach is effective for a limited set of LDDoS attack types.</text></s>
<s sid="372"><CoreSc1 advantage="None" conceptID="Con100" novelty="None" type="Con"/><text>We should note here that the CPR-based approach requires the router where it is deployed to turn on the Random Early Detection (RED) [11] queue management mechanism, to work properly on an extreme scenario described in Section 3.2.</text></s>
<s sid="373"><CoreSc1 advantage="None" conceptID="Con101" novelty="None" type="Con"/><text>The RED mechanism is already supported by most existing routers (such as the WRED in Cisco routers).</text></s>
<s sid="374"><CoreSc1 advantage="None" conceptID="Con102" novelty="None" type="Con"/><text>In the future work, we will reduce the required memory size by implementing MBF techniques in the CPR-based approach.</text></s>
<s sid="375"><CoreSc1 advantage="None" conceptID="Con103" novelty="None" type="Con"/><text>Another promising direction we hope to achieve is the deep integration of our CPR-based approach with the RED mechanism.</text></s>
<s sid="376"><CoreSc1 advantage="None" conceptID="Con104" novelty="None" type="Con"/><text>Lastly, the CPR metric proposed in this paper could be applied to detect a number of variants of LDDoS attacks, such as LDDoS attacks against application servers [40] and LDDoS attacks against 3G/WiMax wireless networks [53].</text></s>
</BODY>
<OTHER>
Acknowledgment
This work is supported in part by the National Natural Science Foundation of China (Nos.
61070198, 60970034, 61170287, and 60903040) and the Engineering and Physical Sciences Research Council of UK (No. EP/G037264/1).

</OTHER>
</PAPER>