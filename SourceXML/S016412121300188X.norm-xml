<?xml version="1.0" encoding="UTF-8"?><!-- Normalized for easier text mining. --><xocs:doc xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.elsevier.com/xml/ja/dtd" xmlns:ja="http://www.elsevier.com/xml/ja/dtd" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:tb="http://www.elsevier.com/xml/common/table/dtd" xmlns:sb="http://www.elsevier.com/xml/common/struct-bib/dtd" xmlns:ce="http://www.elsevier.com/xml/common/dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:cals="http://www.elsevier.com/xml/common/cals/dtd" xsi:schemaLocation="http://www.elsevier.com/xml/xocs/dtd http://schema.elsevier.com/dtds/document/fulltext/xcr/xocs-article.xsd"><xocs:meta><xocs:content-family>serial</xocs:content-family><xocs:content-type>JL</xocs:content-type><xocs:cid>271629</xocs:cid><xocs:srctitle>Journal of Systems and Software</xocs:srctitle><xocs:normalized-srctitle>JOURNALSYSTEMSSOFTWARE</xocs:normalized-srctitle><xocs:orig-load-date>2013-08-21</xocs:orig-load-date><xocs:ew-transaction-id>2013-12-23T16:50:04</xocs:ew-transaction-id><xocs:eid>1-s2.0-S016412121300188X</xocs:eid><xocs:pii-formatted>S0164-1212(13)00188-X</xocs:pii-formatted><xocs:pii-unformatted>S016412121300188X</xocs:pii-unformatted><xocs:doi>10.1016/j.jss.2013.07.040</xocs:doi><xocs:item-stage>S300</xocs:item-stage><xocs:item-version-number>S300.1</xocs:item-version-number><xocs:item-weight>FULL-TEXT</xocs:item-weight><xocs:hub-eid>1-s2.0-S0164121213X00135</xocs:hub-eid><xocs:timestamp>2014-02-03T15:49:17.385808-05:00</xocs:timestamp><xocs:issns><xocs:issn-primary-formatted>0164-1212</xocs:issn-primary-formatted><xocs:issn-primary-unformatted>01641212</xocs:issn-primary-unformatted></xocs:issns><xocs:sponsored-access-type>UNLIMITED</xocs:sponsored-access-type><xocs:funding-body-id>EPSRCPP</xocs:funding-body-id><xocs:crossmark>true</xocs:crossmark><xocs:vol-first>88</xocs:vol-first><xocs:suppl>C</xocs:suppl><xocs:vol-iss-suppl-text>Volume 88</xocs:vol-iss-suppl-text><xocs:sort-order>2</xocs:sort-order><xocs:first-fp>1</xocs:first-fp><xocs:last-lp>24</xocs:last-lp><xocs:pages><xocs:first-page>1</xocs:first-page><xocs:last-page>24</xocs:last-page></xocs:pages><xocs:cover-date-orig><xocs:start-date>201402</xocs:start-date></xocs:cover-date-orig><xocs:cover-date-text>February 2014</xocs:cover-date-text><xocs:cover-date-start>2014-02-01</xocs:cover-date-start><xocs:cover-date-end>2014-02-28</xocs:cover-date-end><xocs:cover-date-year>2014</xocs:cover-date-year><xocs:document-type>article</xocs:document-type><xocs:document-subtype>fla</xocs:document-subtype><xocs:copyright-line>Copyright Â© 2013 The Authors. Published by Elsevier Inc. All rights reserved.</xocs:copyright-line><xocs:normalized-article-title>COHERENTCLUSTERSINSOURCECODE</xocs:normalized-article-title><xocs:normalized-first-auth-surname>ISLAM</xocs:normalized-first-auth-surname><xocs:normalized-first-auth-initial>S</xocs:normalized-first-auth-initial><xocs:item-toc><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>1</xocs:item-toc-label><xocs:item-toc-section-title>Introduction</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2</xocs:item-toc-label><xocs:item-toc-section-title>Background</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1</xocs:item-toc-label><xocs:item-toc-section-title>Dependence clusters</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.2</xocs:item-toc-label><xocs:item-toc-section-title>Slice-based clusters</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.3</xocs:item-toc-label><xocs:item-toc-section-title>Same-slice clusters</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.4</xocs:item-toc-label><xocs:item-toc-section-title>Coherent dependence clusters</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.5</xocs:item-toc-label><xocs:item-toc-section-title>Hash based coherent slice clusters</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.6</xocs:item-toc-label><xocs:item-toc-section-title>Graph based cluster visualization</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3</xocs:item-toc-label><xocs:item-toc-section-title>Empirical evaluation</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.1</xocs:item-toc-label><xocs:item-toc-section-title>Experimental subjects and setup</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.2</xocs:item-toc-label><xocs:item-toc-section-title>Impact of pointer analysis precision</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.3</xocs:item-toc-label><xocs:item-toc-section-title>Validity of the hash function</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.4</xocs:item-toc-label><xocs:item-toc-section-title>Do large coherent clusters occur in practice?</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.5</xocs:item-toc-label><xocs:item-toc-section-title>Patterns of clustering</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.6</xocs:item-toc-label><xocs:item-toc-section-title>Coherent cluster and program decomposition</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.6.1</xocs:item-toc-label><xocs:item-toc-section-title>Case study: acct</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.6.2</xocs:item-toc-label><xocs:item-toc-section-title>Case study: <ce:sans-serif>indent</ce:sans-serif></xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.6.3</xocs:item-toc-label><xocs:item-toc-section-title>Case study: bc</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.6.4</xocs:item-toc-label><xocs:item-toc-section-title>Case study: copia</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.7</xocs:item-toc-label><xocs:item-toc-section-title>Inter-cluster dependence</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.8</xocs:item-toc-label><xocs:item-toc-section-title>Dependence clusters and bug fixes</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.9</xocs:item-toc-label><xocs:item-toc-section-title>Clusters and system evolution</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.10</xocs:item-toc-label><xocs:item-toc-section-title>Threats to validity</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4</xocs:item-toc-label><xocs:item-toc-section-title>Related work</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5</xocs:item-toc-label><xocs:item-toc-section-title>Summary and future work</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:acknowledgment"><xocs:item-toc-section-title>Acknowledgements</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:bibliography"><xocs:item-toc-section-title>References</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc><xocs:references><xocs:ref-info refid="sbref0005"><xocs:ref-normalized-surname>ACHARYA</xocs:ref-normalized-surname><xocs:ref-pub-year>2011</xocs:ref-pub-year><xocs:ref-first-fp>746</xocs:ref-first-fp><xocs:ref-last-lp>755</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PROCEEDINGS33RDINTERNATIONALCONFERENCESOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>PRACTICALCHANGEIMPACTANALYSISBASEDSTATICPROGRAMSLICINGFORINDUSTRIALSOFTWARESYSTEMS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0010"><xocs:ref-normalized-surname>ALI</xocs:ref-normalized-surname><xocs:ref-pub-year>2010</xocs:ref-pub-year><xocs:ref-first-fp>742</xocs:ref-first-fp><xocs:ref-last-lp>762</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="oref0015"/><xocs:ref-info refid="sbref0020"><xocs:ref-normalized-surname>ANDERSON</xocs:ref-normalized-surname><xocs:ref-pub-year>2001</xocs:ref-pub-year><xocs:ref-first-fp>1</xocs:ref-first-fp><xocs:ref-last-lp>9</xocs:ref-last-lp><xocs:ref-normalized-initial>P</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>FIRSTWORKSHOPINSPECTIONINSOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>SOFTWAREINSPECTIONUSINGCODESURFER</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0025"><xocs:ref-normalized-surname>BAKER</xocs:ref-normalized-surname><xocs:ref-pub-year>1995</xocs:ref-pub-year><xocs:ref-first-fp>119</xocs:ref-first-fp><xocs:ref-last-lp>133</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0030"><xocs:ref-normalized-surname>BASTIAN</xocs:ref-normalized-surname><xocs:ref-pub-year>2009</xocs:ref-pub-year><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>INTERNATIONALAAAICONFERENCEWEBLOGSSOCIALMEDIA</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>GEPHIOPENSOURCESOFTWAREFOREXPLORINGMANIPULATINGNETWORKS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0035"><xocs:ref-normalized-surname>BELLON</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>577</xocs:ref-first-fp><xocs:ref-last-lp>591</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0040"><xocs:ref-normalized-surname>BESZEDES</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>295</xocs:ref-first-fp><xocs:ref-last-lp>304</xocs:ref-last-lp><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>23RDIEEEINTERNATIONALCONFERENCESOFTWAREMAINTENANCEOCTOBER</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>COMPUTATIONSTATICEXECUTEAFTERRELATIONAPPLICATIONSSOFTWAREMAINTENANCE</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0045"><xocs:ref-normalized-surname>BEYER</xocs:ref-normalized-surname><xocs:ref-pub-year>2008</xocs:ref-pub-year><xocs:ref-first-fp>967</xocs:ref-first-fp><xocs:ref-last-lp>968</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>COMPANION30THINTERNATIONALCONFERENCESOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>CCVISUAUTOMATICVISUALSOFTWAREDECOMPOSITION</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0050"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>104</xocs:ref-first-fp><xocs:ref-last-lp>119</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>FOSE072007FUTURESOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>SOURCECODEANALYSISAROADMAP</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0055"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2008</xocs:ref-pub-year><xocs:ref-first-fp>25</xocs:ref-first-fp><xocs:ref-last-lp>34</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>4THINTERNATIONALERCIMWORKSHOPSOFTWAREEVOLUTIONEVOLVABILITYEVOL08</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>DEPENDENCEANTIPATTERNS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0060"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2003</xocs:ref-pub-year><xocs:ref-first-fp>44</xocs:ref-first-fp><xocs:ref-last-lp>53</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>IEEEINTERNATIONALCONFERENCESOFTWAREMAINTENANCE</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>ALARGESCALEEMPIRICALSTUDYFORWARDBACKWARDSTATICSLICESIZECONTEXTSENSITIVITY</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0065"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2005</xocs:ref-pub-year><xocs:ref-first-fp>177</xocs:ref-first-fp><xocs:ref-last-lp>186</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>21STIEEEINTERNATIONALCONFERENCESOFTWAREMAINTENANCE</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>LOCATINGDEPENDENCECLUSTERSDEPENDENCEPOLLUTION</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0070"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2009</xocs:ref-pub-year><xocs:ref-first-fp>89</xocs:ref-first-fp><xocs:ref-last-lp>98</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>NINTHIEEEINTERNATIONALWORKINGCONFERENCESOURCECODEANALYSISMANIPULATION</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>IDENTIFYINGLINCHPINVERTICESCAUSELARGEDEPENDENCECLUSTERS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0075"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2009</xocs:ref-pub-year><xocs:ref-first-fp>96</xocs:ref-first-fp><xocs:ref-last-lp>107</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0080"><xocs:ref-normalized-surname>BINKLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0085"><xocs:ref-normalized-surname>BLACK</xocs:ref-normalized-surname><xocs:ref-pub-year>2009</xocs:ref-pub-year><xocs:ref-first-fp>3</xocs:ref-first-fp><xocs:ref-last-lp>10</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>EUROMICROCONFERENCESOFTWAREENGINEERINGADVANCEDAPPLICATIONS</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>FAULTANALYSISINOSSBASEDPROGRAMSLICINGMETRICS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0090"><xocs:ref-normalized-surname>BLACK</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>BEYONDPROGRAMSLICINGNO05451INDAGSTUHLSEMINARPROCEEDINGSINTERNATIONALESBEGEGNUNGSUNDFORSCHUNGSZENTRUMFURINFORMATIKIBFI</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>USINGPROGRAMSLICINGIDENTIFYFAULTSINSOFTWARE</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0095"><xocs:ref-normalized-surname>BLACK</xocs:ref-normalized-surname><xocs:ref-pub-year>2001</xocs:ref-pub-year><xocs:ref-first-fp>263</xocs:ref-first-fp><xocs:ref-last-lp>279</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0100"><xocs:ref-normalized-surname>BOMZE</xocs:ref-normalized-surname><xocs:ref-pub-year>1999</xocs:ref-pub-year><xocs:ref-first-fp>1</xocs:ref-first-fp><xocs:ref-last-lp>74</xocs:ref-last-lp><xocs:ref-normalized-initial>I</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>HANDBOOKCOMBINATORIALOPTIMIZATION</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>MAXIMUMCLIQUEPROBLEM</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0105"><xocs:ref-normalized-surname>BOUKTIF</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>1885</xocs:ref-first-fp><xocs:ref-last-lp>1892</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>GECCO2006PROCEEDINGS8THANNUALCONFERENCEGENETICEVOLUTIONARYCOMPUTATION</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>ANOVELAPPROACHOPTIMIZECLONEREFACTORINGACTIVITY</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0110"><xocs:ref-normalized-surname>EICK</xocs:ref-normalized-surname><xocs:ref-pub-year>1992</xocs:ref-pub-year><xocs:ref-first-fp>957</xocs:ref-first-fp><xocs:ref-last-lp>968</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0115"><xocs:ref-normalized-surname>EISENBARTH</xocs:ref-normalized-surname><xocs:ref-pub-year>2003</xocs:ref-pub-year><xocs:ref-first-fp>210</xocs:ref-first-fp><xocs:ref-last-lp>224</xocs:ref-last-lp><xocs:ref-normalized-initial>T</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0120"><xocs:ref-normalized-surname>ELSSAMADISY</xocs:ref-normalized-surname><xocs:ref-pub-year>2002</xocs:ref-pub-year><xocs:ref-first-fp>617</xocs:ref-first-fp><xocs:ref-last-lp>622</xocs:ref-last-lp><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>INTERNATIONALCONFERENCESOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>RECOGNIZINGRESPONDINGBADSMELLSINEXTREMEPROGRAMMING</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0125"><xocs:ref-normalized-surname>FAHNDRICH</xocs:ref-normalized-surname><xocs:ref-pub-year>1998</xocs:ref-pub-year><xocs:ref-first-fp>85</xocs:ref-first-fp><xocs:ref-last-lp>96</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PROCEEDINGSACMSIGPLAN98CONFERENCEPROGRAMMINGLANGUAGEDESIGNIMPLEMENTATION</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>PARTIALONLINECYCLEELIMINATIONININCLUSIONCONSTRAINTGRAPHS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0130"><xocs:ref-normalized-surname>FERRANTE</xocs:ref-normalized-surname><xocs:ref-pub-year>1987</xocs:ref-pub-year><xocs:ref-first-fp>319</xocs:ref-first-fp><xocs:ref-last-lp>349</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0135"><xocs:ref-normalized-surname>GALLAGHER</xocs:ref-normalized-surname><xocs:ref-pub-year>1991</xocs:ref-pub-year><xocs:ref-first-fp>751</xocs:ref-first-fp><xocs:ref-last-lp>761</xocs:ref-last-lp><xocs:ref-normalized-initial>K</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0140"><xocs:ref-normalized-surname>HAJNAL</xocs:ref-normalized-surname><xocs:ref-pub-year>2011</xocs:ref-pub-year><xocs:ref-first-fp>67</xocs:ref-first-fp><xocs:ref-last-lp>82</xocs:ref-last-lp><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0145"><xocs:ref-normalized-surname>HAMILTON</xocs:ref-normalized-surname><xocs:ref-pub-year>2012</xocs:ref-pub-year><xocs:ref-first-fp>579</xocs:ref-first-fp><xocs:ref-last-lp>582</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>28THIEEEINTERNATIONALCONFERENCESOFTWAREMAINTENANCE</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>DEPENDENCECOMMUNITIESINSOURCECODE</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0150"><xocs:ref-normalized-surname>HARMAN</xocs:ref-normalized-surname><xocs:ref-pub-year>2009</xocs:ref-pub-year><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0155"><xocs:ref-normalized-surname>HORWITZ</xocs:ref-normalized-surname><xocs:ref-pub-year>1990</xocs:ref-pub-year><xocs:ref-first-fp>26</xocs:ref-first-fp><xocs:ref-last-lp>60</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0160"><xocs:ref-normalized-surname>ISLAM</xocs:ref-normalized-surname><xocs:ref-pub-year>2010</xocs:ref-pub-year><xocs:ref-first-fp>93</xocs:ref-first-fp><xocs:ref-last-lp>102</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>SOFTVIS105THACMIEEESYMPOSIUMSOFTWAREVISUALIZATION</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>DEPENDENCECLUSTERVISUALIZATION</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0165"><xocs:ref-normalized-surname>ISLAM</xocs:ref-normalized-surname><xocs:ref-pub-year>2010</xocs:ref-pub-year><xocs:ref-first-fp>53</xocs:ref-first-fp><xocs:ref-last-lp>60</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PASTE10PROCEEDINGS9THACMSIGPLANSIGSOFTWORKSHOPPROGRAMANALYSISFORSOFTWARETOOLSENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>COHERENTDEPENDENCECLUSTERS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0170"><xocs:ref-normalized-surname>KAPSER</xocs:ref-normalized-surname><xocs:ref-pub-year>2008</xocs:ref-pub-year><xocs:ref-first-fp>645</xocs:ref-first-fp><xocs:ref-last-lp>692</xocs:ref-last-lp><xocs:ref-normalized-initial>C</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0175"><xocs:ref-normalized-surname>KRINKE</xocs:ref-normalized-surname><xocs:ref-pub-year>1998</xocs:ref-pub-year><xocs:ref-first-fp>35</xocs:ref-first-fp><xocs:ref-last-lp>42</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>ACMSIGPLANSIGSOFTWORKSHOPPROGRAMANALYSISFORSOFTWARETOOLSENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>STATICSLICINGTHREADEDPROGRAMS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0180"><xocs:ref-normalized-surname>KRINKE</xocs:ref-normalized-surname><xocs:ref-pub-year>2002</xocs:ref-pub-year><xocs:ref-first-fp>22</xocs:ref-first-fp><xocs:ref-last-lp>31</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>IEEEINTERNATIONALCONFERENCESOFTWAREMAINTENANCE</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>EVALUATINGCONTEXTSENSITIVESLICINGCHOPPING</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0185"><xocs:ref-normalized-surname>KRINKE</xocs:ref-normalized-surname><xocs:ref-pub-year>2003</xocs:ref-pub-year><xocs:ref-first-fp>178</xocs:ref-first-fp><xocs:ref-last-lp>187</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PROCEEDINGS9THEUROPEANSOFTWAREENGINEERINGCONFERENCE</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>CONTEXTSENSITIVESLICINGCONCURRENTPROGRAMS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0190"><xocs:ref-normalized-surname>MITCHELL</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>193</xocs:ref-first-fp><xocs:ref-last-lp>208</xocs:ref-last-lp><xocs:ref-normalized-initial>B</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0195"><xocs:ref-normalized-surname>OTTENSTEIN</xocs:ref-normalized-surname><xocs:ref-pub-year>1984</xocs:ref-pub-year><xocs:ref-first-fp>177</xocs:ref-first-fp><xocs:ref-last-lp>184</xocs:ref-last-lp><xocs:ref-normalized-initial>K</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0200"><xocs:ref-normalized-surname>REN</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>718</xocs:ref-first-fp><xocs:ref-last-lp>732</xocs:ref-last-lp><xocs:ref-normalized-initial>X</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0205"><xocs:ref-normalized-surname>REN</xocs:ref-normalized-surname><xocs:ref-pub-year>2005</xocs:ref-pub-year><xocs:ref-first-fp>664</xocs:ref-first-fp><xocs:ref-last-lp>665</xocs:ref-last-lp><xocs:ref-normalized-initial>X</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>27THINTERNATIONALCONFERENCESOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>CHIANTIACHANGEIMPACTANALYSISTOOLFORJAVAPROGRAMS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0210"><xocs:ref-normalized-surname>ROBLES</xocs:ref-normalized-surname><xocs:ref-pub-year>2004</xocs:ref-pub-year><xocs:ref-first-fp>51</xocs:ref-first-fp><xocs:ref-last-lp>55</xocs:ref-last-lp><xocs:ref-normalized-initial>G</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PROCEEDINGSSECONDINTERNATIONALWORKSHOPREMOTEANALYSISMEASUREMENTSOFTWARESYSTEMS</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>REMOTEANALYSISMEASUREMENTLIBRESOFTWARESYSTEMSBYMEANSCVSANALYTOOL</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0215"><xocs:ref-normalized-surname>SAVERNIK</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>357</xocs:ref-first-fp><xocs:ref-last-lp>360</xocs:ref-last-lp><xocs:ref-normalized-initial>L</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>SOFTWAREENGINEERING2007BEITRAGEZUDENWORKSHOPSVOL106LNIGI</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>ENTWICKLUNGEINESAUTOMATISCHENVERFAHRENSZURAUFLOSUNGSTATISCHERZYKLISCHERABHANGIGKEITENINSOFTWARESYSTEMENINGERMAN</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0220"><xocs:ref-normalized-surname>SHAPIRO</xocs:ref-normalized-surname><xocs:ref-pub-year>1997</xocs:ref-pub-year><xocs:ref-first-fp>16</xocs:ref-first-fp><xocs:ref-last-lp>34</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>STATICANALYSISSYMPOSIUMVOL1302LECTURENOTESINCOMPUTERSCIENCE</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>EFFECTSPRECISIONPOINTERANALYSIS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0225"><xocs:ref-normalized-surname>STOREY</xocs:ref-normalized-surname><xocs:ref-pub-year>1997</xocs:ref-pub-year><xocs:ref-first-fp>606</xocs:ref-first-fp><xocs:ref-last-lp>607</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PROCEEDINGS19THINTERNATIONALCONFERENCESOFTWAREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>RIGIAVISUALIZATIONENVIRONMENTFORREVERSEENGINEERING</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0230"><xocs:ref-normalized-surname>SZEGEDI</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>233</xocs:ref-first-fp><xocs:ref-last-lp>242</xocs:ref-last-lp><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>11THEUROPEANCONFERENCESOFTWAREMAINTENANCEREENGINEERING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>VERIFYINGCONCEPTUNIONSLICESJAVAPROGRAMS</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref0235"><xocs:ref-normalized-surname>TONELLA</xocs:ref-normalized-surname><xocs:ref-pub-year>2003</xocs:ref-pub-year><xocs:ref-first-fp>495</xocs:ref-first-fp><xocs:ref-last-lp>509</xocs:ref-last-lp><xocs:ref-normalized-initial>P</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0240"><xocs:ref-normalized-surname>WEISER</xocs:ref-normalized-surname><xocs:ref-pub-year>1984</xocs:ref-pub-year><xocs:ref-first-fp>352</xocs:ref-first-fp><xocs:ref-last-lp>357</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref0245"><xocs:ref-normalized-surname>WHEELER</xocs:ref-normalized-surname><xocs:ref-pub-year>2004</xocs:ref-pub-year><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>SLOCCOUNTUSERSGUIDE</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="sbref0250"><xocs:ref-normalized-surname>YAU</xocs:ref-normalized-surname><xocs:ref-pub-year>1985</xocs:ref-pub-year><xocs:ref-first-fp>849</xocs:ref-first-fp><xocs:ref-last-lp>856</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info></xocs:references><xocs:attachment-metadata-doc><xocs:attachment-set-type>item</xocs:attachment-set-type><xocs:pii-formatted>S0164-1212(13)00188-X</xocs:pii-formatted><xocs:pii-unformatted>S016412121300188X</xocs:pii-unformatted><xocs:eid>1-s2.0-S016412121300188X</xocs:eid><xocs:doi>10.1016/j.jss.2013.07.040</xocs:doi><xocs:cid>271629</xocs:cid><xocs:timestamp>2013-12-23T23:37:53.372252-05:00</xocs:timestamp><xocs:path>/271629/1-s2.0-S0164121213X00135/1-s2.0-S016412121300188X/</xocs:path><xocs:cover-date-start>2014-02-01</xocs:cover-date-start><xocs:cover-date-end>2014-02-28</xocs:cover-date-end><xocs:sponsored-access-type>UNLIMITED</xocs:sponsored-access-type><xocs:funding-body-id>EPSRCPP</xocs:funding-body-id><xocs:attachments><xocs:web-pdf><xocs:attachment-eid>1-s2.0-S016412121300188X-main.pdf</xocs:attachment-eid><xocs:filename>main.pdf</xocs:filename><xocs:extension>pdf</xocs:extension><xocs:pdf-optimized>true</xocs:pdf-optimized><xocs:filesize>4734710</xocs:filesize><xocs:web-pdf-purpose>MAIN</xocs:web-pdf-purpose><xocs:web-pdf-page-count>24</xocs:web-pdf-page-count><xocs:web-pdf-images><xocs:web-pdf-image><xocs:attachment-eid>1-s2.0-S016412121300188X-main_1.png</xocs:attachment-eid><xocs:filename>main_1.png</xocs:filename><xocs:extension>png</xocs:extension><xocs:filesize>137084</xocs:filesize><xocs:pixel-height>849</xocs:pixel-height><xocs:pixel-width>656</xocs:pixel-width><xocs:attachment-type>IMAGE-WEB-PDF</xocs:attachment-type><xocs:pdf-page-num>1</xocs:pdf-page-num></xocs:web-pdf-image></xocs:web-pdf-images></xocs:web-pdf><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si9.gif</xocs:attachment-eid><xocs:file-basename>si9</xocs:file-basename><xocs:filename>si9.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>3841</xocs:filesize><xocs:pixel-height>116</xocs:pixel-height><xocs:pixel-width>300</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si8.gif</xocs:attachment-eid><xocs:file-basename>si8</xocs:file-basename><xocs:filename>si8.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si7.gif</xocs:attachment-eid><xocs:file-basename>si7</xocs:file-basename><xocs:filename>si7.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si6.gif</xocs:attachment-eid><xocs:file-basename>si6</xocs:file-basename><xocs:filename>si6.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si5.gif</xocs:attachment-eid><xocs:file-basename>si5</xocs:file-basename><xocs:filename>si5.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si4.gif</xocs:attachment-eid><xocs:file-basename>si4</xocs:file-basename><xocs:filename>si4.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si3.gif</xocs:attachment-eid><xocs:file-basename>si3</xocs:file-basename><xocs:filename>si3.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si2.gif</xocs:attachment-eid><xocs:file-basename>si2</xocs:file-basename><xocs:filename>si2.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si17.gif</xocs:attachment-eid><xocs:file-basename>si17</xocs:file-basename><xocs:filename>si17.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>408</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>100</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si16.gif</xocs:attachment-eid><xocs:file-basename>si16</xocs:file-basename><xocs:filename>si16.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>133</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si15.gif</xocs:attachment-eid><xocs:file-basename>si15</xocs:file-basename><xocs:filename>si15.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>229</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si14.gif</xocs:attachment-eid><xocs:file-basename>si14</xocs:file-basename><xocs:filename>si14.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si132.gif</xocs:attachment-eid><xocs:file-basename>si132</xocs:file-basename><xocs:filename>si132.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>86</xocs:filesize><xocs:pixel-height>1</xocs:pixel-height><xocs:pixel-width>3</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si13.gif</xocs:attachment-eid><xocs:file-basename>si13</xocs:file-basename><xocs:filename>si13.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1531</xocs:filesize><xocs:pixel-height>41</xocs:pixel-height><xocs:pixel-width>307</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si12.gif</xocs:attachment-eid><xocs:file-basename>si12</xocs:file-basename><xocs:filename>si12.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>939</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>249</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si11.gif</xocs:attachment-eid><xocs:file-basename>si11</xocs:file-basename><xocs:filename>si11.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1413</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>360</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si10.gif</xocs:attachment-eid><xocs:file-basename>si10</xocs:file-basename><xocs:filename>si10.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>2443</xocs:filesize><xocs:pixel-height>55</xocs:pixel-height><xocs:pixel-width>314</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-si1.gif</xocs:attachment-eid><xocs:file-basename>si1</xocs:file-basename><xocs:filename>si1.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>120</xocs:filesize><xocs:pixel-height>8</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr9.jpg</xocs:attachment-eid><xocs:file-basename>gr9</xocs:file-basename><xocs:filename>gr9.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>31046</xocs:filesize><xocs:pixel-height>234</xocs:pixel-height><xocs:pixel-width>513</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr7.jpg</xocs:attachment-eid><xocs:file-basename>gr7</xocs:file-basename><xocs:filename>gr7.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>64572</xocs:filesize><xocs:pixel-height>525</xocs:pixel-height><xocs:pixel-width>602</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr6.jpg</xocs:attachment-eid><xocs:file-basename>gr6</xocs:file-basename><xocs:filename>gr6.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>17562</xocs:filesize><xocs:pixel-height>217</xocs:pixel-height><xocs:pixel-width>390</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr5.jpg</xocs:attachment-eid><xocs:file-basename>gr5</xocs:file-basename><xocs:filename>gr5.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>22393</xocs:filesize><xocs:pixel-height>222</xocs:pixel-height><xocs:pixel-width>384</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr4.jpg</xocs:attachment-eid><xocs:file-basename>gr4</xocs:file-basename><xocs:filename>gr4.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>19129</xocs:filesize><xocs:pixel-height>146</xocs:pixel-height><xocs:pixel-width>576</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr3.jpg</xocs:attachment-eid><xocs:file-basename>gr3</xocs:file-basename><xocs:filename>gr3.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>20596</xocs:filesize><xocs:pixel-height>143</xocs:pixel-height><xocs:pixel-width>560</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr25.jpg</xocs:attachment-eid><xocs:file-basename>gr25</xocs:file-basename><xocs:filename>gr25.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>80104</xocs:filesize><xocs:pixel-height>537</xocs:pixel-height><xocs:pixel-width>753</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr24.jpg</xocs:attachment-eid><xocs:file-basename>gr24</xocs:file-basename><xocs:filename>gr24.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>20722</xocs:filesize><xocs:pixel-height>133</xocs:pixel-height><xocs:pixel-width>753</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr23.jpg</xocs:attachment-eid><xocs:file-basename>gr23</xocs:file-basename><xocs:filename>gr23.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>20202</xocs:filesize><xocs:pixel-height>130</xocs:pixel-height><xocs:pixel-width>740</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr22.jpg</xocs:attachment-eid><xocs:file-basename>gr22</xocs:file-basename><xocs:filename>gr22.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>29721</xocs:filesize><xocs:pixel-height>156</xocs:pixel-height><xocs:pixel-width>648</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr21.jpg</xocs:attachment-eid><xocs:file-basename>gr21</xocs:file-basename><xocs:filename>gr21.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>19393</xocs:filesize><xocs:pixel-height>88</xocs:pixel-height><xocs:pixel-width>204</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr20.jpg</xocs:attachment-eid><xocs:file-basename>gr20</xocs:file-basename><xocs:filename>gr20.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>54063</xocs:filesize><xocs:pixel-height>402</xocs:pixel-height><xocs:pixel-width>753</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr2.jpg</xocs:attachment-eid><xocs:file-basename>gr2</xocs:file-basename><xocs:filename>gr2.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>23353</xocs:filesize><xocs:pixel-height>122</xocs:pixel-height><xocs:pixel-width>525</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr19.jpg</xocs:attachment-eid><xocs:file-basename>gr19</xocs:file-basename><xocs:filename>gr19.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>18008</xocs:filesize><xocs:pixel-height>208</xocs:pixel-height><xocs:pixel-width>329</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr18.jpg</xocs:attachment-eid><xocs:file-basename>gr18</xocs:file-basename><xocs:filename>gr18.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>34711</xocs:filesize><xocs:pixel-height>168</xocs:pixel-height><xocs:pixel-width>651</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr17.jpg</xocs:attachment-eid><xocs:file-basename>gr17</xocs:file-basename><xocs:filename>gr17.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>33562</xocs:filesize><xocs:pixel-height>369</xocs:pixel-height><xocs:pixel-width>351</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr16.jpg</xocs:attachment-eid><xocs:file-basename>gr16</xocs:file-basename><xocs:filename>gr16.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>14791</xocs:filesize><xocs:pixel-height>174</xocs:pixel-height><xocs:pixel-width>516</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr15.jpg</xocs:attachment-eid><xocs:file-basename>gr15</xocs:file-basename><xocs:filename>gr15.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>15561</xocs:filesize><xocs:pixel-height>206</xocs:pixel-height><xocs:pixel-width>377</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr14.jpg</xocs:attachment-eid><xocs:file-basename>gr14</xocs:file-basename><xocs:filename>gr14.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>23768</xocs:filesize><xocs:pixel-height>447</xocs:pixel-height><xocs:pixel-width>298</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr13.jpg</xocs:attachment-eid><xocs:file-basename>gr13</xocs:file-basename><xocs:filename>gr13.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>27730</xocs:filesize><xocs:pixel-height>460</xocs:pixel-height><xocs:pixel-width>361</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr12.jpg</xocs:attachment-eid><xocs:file-basename>gr12</xocs:file-basename><xocs:filename>gr12.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>29022</xocs:filesize><xocs:pixel-height>130</xocs:pixel-height><xocs:pixel-width>743</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr11.jpg</xocs:attachment-eid><xocs:file-basename>gr11</xocs:file-basename><xocs:filename>gr11.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>111000</xocs:filesize><xocs:pixel-height>678</xocs:pixel-height><xocs:pixel-width>744</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr10.jpg</xocs:attachment-eid><xocs:file-basename>gr10</xocs:file-basename><xocs:filename>gr10.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>37364</xocs:filesize><xocs:pixel-height>235</xocs:pixel-height><xocs:pixel-width>651</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr1.jpg</xocs:attachment-eid><xocs:file-basename>gr1</xocs:file-basename><xocs:filename>gr1.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>54206</xocs:filesize><xocs:pixel-height>697</xocs:pixel-height><xocs:pixel-width>390</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx4.jpg</xocs:attachment-eid><xocs:file-basename>fx4</xocs:file-basename><xocs:filename>fx4.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>17259</xocs:filesize><xocs:pixel-height>151</xocs:pixel-height><xocs:pixel-width>113</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx3.jpg</xocs:attachment-eid><xocs:file-basename>fx3</xocs:file-basename><xocs:filename>fx3.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>12617</xocs:filesize><xocs:pixel-height>151</xocs:pixel-height><xocs:pixel-width>113</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx2.jpg</xocs:attachment-eid><xocs:file-basename>fx2</xocs:file-basename><xocs:filename>fx2.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>11824</xocs:filesize><xocs:pixel-height>151</xocs:pixel-height><xocs:pixel-width>113</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx1.jpg</xocs:attachment-eid><xocs:file-basename>fx1</xocs:file-basename><xocs:filename>fx1.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>13236</xocs:filesize><xocs:pixel-height>151</xocs:pixel-height><xocs:pixel-width>113</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr8.gif</xocs:attachment-eid><xocs:file-basename>gr8</xocs:file-basename><xocs:filename>gr8.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1072</xocs:filesize><xocs:pixel-height>72</xocs:pixel-height><xocs:pixel-width>108</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr8.sml</xocs:attachment-eid><xocs:file-basename>gr8</xocs:file-basename><xocs:filename>gr8.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2416</xocs:filesize><xocs:pixel-height>145</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr9.sml</xocs:attachment-eid><xocs:file-basename>gr9</xocs:file-basename><xocs:filename>gr9.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4270</xocs:filesize><xocs:pixel-height>100</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr7.sml</xocs:attachment-eid><xocs:file-basename>gr7</xocs:file-basename><xocs:filename>gr7.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>5217</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>188</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr6.sml</xocs:attachment-eid><xocs:file-basename>gr6</xocs:file-basename><xocs:filename>gr6.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3605</xocs:filesize><xocs:pixel-height>122</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr5.sml</xocs:attachment-eid><xocs:file-basename>gr5</xocs:file-basename><xocs:filename>gr5.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>6825</xocs:filesize><xocs:pixel-height>127</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr4.sml</xocs:attachment-eid><xocs:file-basename>gr4</xocs:file-basename><xocs:filename>gr4.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2957</xocs:filesize><xocs:pixel-height>56</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr3.sml</xocs:attachment-eid><xocs:file-basename>gr3</xocs:file-basename><xocs:filename>gr3.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2709</xocs:filesize><xocs:pixel-height>56</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr25.sml</xocs:attachment-eid><xocs:file-basename>gr25</xocs:file-basename><xocs:filename>gr25.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>6437</xocs:filesize><xocs:pixel-height>156</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr24.sml</xocs:attachment-eid><xocs:file-basename>gr24</xocs:file-basename><xocs:filename>gr24.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2326</xocs:filesize><xocs:pixel-height>39</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr23.sml</xocs:attachment-eid><xocs:file-basename>gr23</xocs:file-basename><xocs:filename>gr23.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2449</xocs:filesize><xocs:pixel-height>38</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr22.sml</xocs:attachment-eid><xocs:file-basename>gr22</xocs:file-basename><xocs:filename>gr22.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3209</xocs:filesize><xocs:pixel-height>53</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr21.sml</xocs:attachment-eid><xocs:file-basename>gr21</xocs:file-basename><xocs:filename>gr21.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4521</xocs:filesize><xocs:pixel-height>95</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr20.sml</xocs:attachment-eid><xocs:file-basename>gr20</xocs:file-basename><xocs:filename>gr20.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4784</xocs:filesize><xocs:pixel-height>117</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr2.sml</xocs:attachment-eid><xocs:file-basename>gr2</xocs:file-basename><xocs:filename>gr2.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2152</xocs:filesize><xocs:pixel-height>51</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr19.sml</xocs:attachment-eid><xocs:file-basename>gr19</xocs:file-basename><xocs:filename>gr19.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>5551</xocs:filesize><xocs:pixel-height>139</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr18.sml</xocs:attachment-eid><xocs:file-basename>gr18</xocs:file-basename><xocs:filename>gr18.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2476</xocs:filesize><xocs:pixel-height>56</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr17.sml</xocs:attachment-eid><xocs:file-basename>gr17</xocs:file-basename><xocs:filename>gr17.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4536</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>156</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr16.sml</xocs:attachment-eid><xocs:file-basename>gr16</xocs:file-basename><xocs:filename>gr16.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2679</xocs:filesize><xocs:pixel-height>74</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr15.sml</xocs:attachment-eid><xocs:file-basename>gr15</xocs:file-basename><xocs:filename>gr15.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3313</xocs:filesize><xocs:pixel-height>120</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr14.sml</xocs:attachment-eid><xocs:file-basename>gr14</xocs:file-basename><xocs:filename>gr14.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2170</xocs:filesize><xocs:pixel-height>163</xocs:pixel-height><xocs:pixel-width>109</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr13.sml</xocs:attachment-eid><xocs:file-basename>gr13</xocs:file-basename><xocs:filename>gr13.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3199</xocs:filesize><xocs:pixel-height>163</xocs:pixel-height><xocs:pixel-width>128</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr12.sml</xocs:attachment-eid><xocs:file-basename>gr12</xocs:file-basename><xocs:filename>gr12.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2486</xocs:filesize><xocs:pixel-height>38</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr11.sml</xocs:attachment-eid><xocs:file-basename>gr11</xocs:file-basename><xocs:filename>gr11.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>5955</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>180</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr10.sml</xocs:attachment-eid><xocs:file-basename>gr10</xocs:file-basename><xocs:filename>gr10.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3374</xocs:filesize><xocs:pixel-height>79</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-gr1.sml</xocs:attachment-eid><xocs:file-basename>gr1</xocs:file-basename><xocs:filename>gr1.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2424</xocs:filesize><xocs:pixel-height>163</xocs:pixel-height><xocs:pixel-width>91</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx4.sml</xocs:attachment-eid><xocs:file-basename>fx4</xocs:file-basename><xocs:filename>fx4.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>11473</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx3.sml</xocs:attachment-eid><xocs:file-basename>fx3</xocs:file-basename><xocs:filename>fx3.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>11052</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx2.sml</xocs:attachment-eid><xocs:file-basename>fx2</xocs:file-basename><xocs:filename>fx2.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>10181</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S016412121300188X-fx1.sml</xocs:attachment-eid><xocs:file-basename>fx1</xocs:file-basename><xocs:filename>fx1.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>9676</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment></xocs:attachments></xocs:attachment-metadata-doc><xocs:refkeys><xocs:refkey3>ISLAMX2014X1</xocs:refkey3><xocs:refkey4lp>ISLAMX2014X1X24</xocs:refkey4lp><xocs:refkey4ai>ISLAMX2014X1XS</xocs:refkey4ai><xocs:refkey5>ISLAMX2014X1X24XS</xocs:refkey5></xocs:refkeys><xocs:open-access><xocs:oa-article-status is-open-access="1" is-open-archive="0">Full</xocs:oa-article-status><xocs:oa-access-effective-date>2013-10-14T08:56:31Z</xocs:oa-access-effective-date><xocs:oa-sponsor><xocs:oa-sponsor-type>FundingBody</xocs:oa-sponsor-type><xocs:oa-sponsor-name>Engineering and Physical Sciences Research Council</xocs:oa-sponsor-name></xocs:oa-sponsor><xocs:oa-user-license>http://creativecommons.org/licenses/by/3.0/</xocs:oa-user-license></xocs:open-access></xocs:meta><xocs:serial-item><article xmlns:sa="http://www.elsevier.com/xml/common/struct-aff/dtd" version="5.2" xml:lang="en" docsubtype="fla"><item-info><jid>JSS</jid><aid>9207</aid><ce:pii>S0164-1212(13)00188-X</ce:pii><ce:doi>10.1016/j.jss.2013.07.040</ce:doi><ce:copyright type="other" year="2013">The Authors</ce:copyright></item-info><ce:floats><ce:figure id="fig0005"><ce:label>Fig. 1</ce:label><ce:caption id="cap0005"><ce:simple-para id="spar0015" view="all">Dependence intransitivity and clusters.</ce:simple-para></ce:caption><ce:link locator="gr1"/></ce:figure><ce:figure id="fig0010"><ce:label>Fig. 2</ce:label><ce:caption id="cap0010"><ce:simple-para id="spar0020" view="all">Backward slice inclusion relationship for <ce:cross-ref id="crf0005" refid="fig0005">Fig. 1</ce:cross-ref>.</ce:simple-para></ce:caption><ce:link locator="gr2"/></ce:figure><ce:figure id="fig0015"><ce:label>Fig. 3</ce:label><ce:caption id="cap0015"><ce:simple-para id="spar0025" view="all">Slice size distribution for <ce:sans-serif>bc</ce:sans-serif>.</ce:simple-para></ce:caption><ce:link locator="gr3"/></ce:figure><ce:figure id="fig0020"><ce:label>Fig. 4</ce:label><ce:caption id="cap0020"><ce:simple-para id="spar0030" view="all">Slice/cluster size distribution for <ce:sans-serif>bc</ce:sans-serif>.</ce:simple-para></ce:caption><ce:link locator="gr4"/></ce:figure><ce:figure id="fig0025"><ce:label>Fig. 5</ce:label><ce:caption id="cap0025"><ce:simple-para id="spar0035" view="all">Percentage deviation of average slice size for Low and Medium CodeSurfer pointer analysis settings.</ce:simple-para></ce:caption><ce:link locator="gr5"/></ce:figure><ce:figure id="fig0030"><ce:label>Fig. 6</ce:label><ce:caption id="cap0030"><ce:simple-para id="spar0040" view="all">Percentage deviation of largest cluster size for Low and Medium CodeSurfer pointer analysis settings.</ce:simple-para></ce:caption><ce:link locator="gr6"/></ce:figure><ce:figure id="fig0035"><ce:label>Fig. 7</ce:label><ce:caption id="cap0035"><ce:simple-para id="spar0045" view="all">SCGs for Low, Medium and High pointer settings of CodeSurfer.</ce:simple-para></ce:caption><ce:link locator="gr7"/></ce:figure><ce:figure id="fig0040"><ce:label>Fig. 8</ce:label><ce:caption id="cap0040"><ce:simple-para id="spar0050" view="all">Replacement coherent cluster example.</ce:simple-para></ce:caption><ce:link locator="gr8"/></ce:figure><ce:figure id="fig0045"><ce:label>Fig. 9</ce:label><ce:caption id="cap0045"><ce:simple-para id="spar0055" view="all">Size of largest coherent cluster.</ce:simple-para></ce:caption><ce:link locator="gr9"/></ce:figure><ce:figure id="fig0050"><ce:label>Fig. 10</ce:label><ce:caption id="cap0050"><ce:simple-para id="spar0060" view="all">Programs with <ce:italic>small</ce:italic> coherent clusters.</ce:simple-para></ce:caption><ce:link locator="gr10"/></ce:figure><ce:figure id="fig0055"><ce:label>Fig. 11</ce:label><ce:caption id="cap0055"><ce:simple-para id="spar0065" view="all">Programs with <ce:italic>large</ce:italic> coherent clusters.</ce:simple-para></ce:caption><ce:link locator="gr11"/></ce:figure><ce:figure id="fig0060"><ce:label>Fig. 12</ce:label><ce:caption id="cap0060"><ce:simple-para id="spar0070" view="all">Programs with <ce:italic>huge</ce:italic> coherent clusters.</ce:simple-para></ce:caption><ce:link locator="gr12"/></ce:figure><ce:figure id="fig0065"><ce:label>Fig. 13</ce:label><ce:caption id="cap0065"><ce:simple-para id="spar0075" view="all"><ce:italic>Decluvi</ce:italic>'s system view for the program <ce:sans-serif>bc</ce:sans-serif> showing each file using one column and each line of pixels summarizing <ce:italic>eight</ce:italic> source lines. Blue color (medium gray in black and white) represent lines whose vertices are part of smaller size clusters than those in red color (dark gray), while lines not containing any executable lines are always shown in light gray. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of the article.)</ce:simple-para></ce:caption><ce:link locator="gr13"/></ce:figure><ce:figure id="fig0070"><ce:label>Fig. 14</ce:label><ce:caption id="cap0070"><ce:simple-para id="spar0080" view="all"><ce:italic>Decluvi</ce:italic>'s file view for the file <ce:sans-serif>util.c</ce:sans-serif> of program <ce:sans-serif>bc</ce:sans-serif>. Each line of pixels correspond to one source code line. Blue (medium gray in black and white) represents lines with vertices belonging to the 2nd largest cluster and red (dark gray) represents lines with vertices belonging to the largest cluster. The rectangle marks function <ce:sans-serif>init_gen</ce:sans-serif>, part of both clusters. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of the article.)</ce:simple-para></ce:caption><ce:link locator="gr14"/></ce:figure><ce:figure id="fig0075"><ce:label>Fig. 15</ce:label><ce:caption id="cap0075"><ce:simple-para id="spar0085" view="all"><ce:italic>Decluvi</ce:italic>'s source view showing function <ce:sans-serif>init_gen</ce:sans-serif> in file <ce:sans-serif>util.c</ce:sans-serif> of Program <ce:sans-serif>bc</ce:sans-serif>. The <ce:italic>decluvi</ce:italic><ce:hsp sp="0.25"/> options are set to filter out all but the two largest clusters thus blue (medium gray in black and white) represents lines from the 2nd largest cluster and red (dark gray) lines from the largest cluster. All other lines including those with no executable code are shown in light gray. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of the article.)</ce:simple-para></ce:caption><ce:link locator="gr15"/></ce:figure><ce:figure id="fig0080"><ce:label>Fig. 16</ce:label><ce:caption id="cap0080"><ce:simple-para id="spar5090" view="all">SCGs for the program <ce:sans-serif>copia</ce:sans-serif>.</ce:simple-para></ce:caption><ce:link locator="gr16"/></ce:figure><ce:figure id="fig0085"><ce:label>Fig. 17</ce:label><ce:caption id="cap0085"><ce:simple-para id="spar0095" view="all"><ce:italic>Decluvi</ce:italic>'s file view for the file <ce:sans-serif>copia.c</ce:sans-serif> of program <ce:sans-serif>copia</ce:sans-serif>. Each line of pixels represent the cluster data for one source code line. The lines in red (dark gray in black and white) are part of the largest cluster. The lines in blue (medium gray) are part of smaller clusters. A rectangle highlights the <ce:sans-serif>switch</ce:sans-serif> statement that holds the largest cluster together. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of the article.)</ce:simple-para></ce:caption><ce:link locator="gr17"/></ce:figure><ce:figure id="fig0090"><ce:label>Fig. 18</ce:label><ce:caption id="cap0090"><ce:simple-para id="spar0100" view="all">Cluster dependence graphs.</ce:simple-para></ce:caption><ce:link locator="gr18"/></ce:figure><ce:figure id="fig0095"><ce:label>Fig. 19</ce:label><ce:caption id="cap0095"><ce:simple-para id="spar0105" view="all">Backward slice sizes for <ce:sans-serif>barcode</ce:sans-serif> releases.</ce:simple-para></ce:caption><ce:link locator="gr19"/></ce:figure><ce:figure id="fig0100"><ce:label>Fig. 20</ce:label><ce:caption id="cap0100"><ce:simple-para id="spar0110" view="all">BSCGs for various <ce:sans-serif>barcode</ce:sans-serif> versions.</ce:simple-para></ce:caption><ce:link locator="gr20"/></ce:figure><ce:figure id="fig0105"><ce:label>Fig. 21</ce:label><ce:caption id="cap0105"><ce:simple-para id="spar0115" view="all">Bug fix example.</ce:simple-para></ce:caption><ce:link locator="gr21"/></ce:figure><ce:figure id="fig0110"><ce:label>Fig. 22</ce:label><ce:caption id="cap0110"><ce:simple-para id="spar0120" view="all">Backward slice size plots for multiple releases.</ce:simple-para></ce:caption><ce:link locator="gr22"/></ce:figure><ce:figure id="fig0115"><ce:label>Fig. 23</ce:label><ce:caption id="cap0115"><ce:simple-para id="spar0125" view="all">BSCGs for various <ce:sans-serif>bc</ce:sans-serif> versions.</ce:simple-para></ce:caption><ce:link locator="gr23"/></ce:figure><ce:figure id="fig0120"><ce:label>Fig. 24</ce:label><ce:caption id="cap0120"><ce:simple-para id="spar0130" view="all">BSCGs for various <ce:sans-serif>acct</ce:sans-serif> versions.</ce:simple-para></ce:caption><ce:link locator="gr24"/></ce:figure><ce:figure id="fig0125"><ce:label>Fig. 25</ce:label><ce:caption id="cap9120"><ce:simple-para id="spar9130" view="all">BSCGs for various <ce:sans-serif>indent</ce:sans-serif> versions.</ce:simple-para></ce:caption><ce:link locator="gr25"/></ce:figure><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0005" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 1</ce:label><ce:caption id="cap0125"><ce:simple-para id="spar0135" view="all">Subject programs.</ce:simple-para></ce:caption><tgroup cols="12" align="center"><colspec colnum="1" colname="col1" colsep="0" align="left"/><colspec colnum="2" colname="col2" colsep="0" align="left"/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="left"/><colspec colnum="5" colname="col5" colsep="0" align="left"/><colspec colnum="6" colname="col6" colsep="0" align="left"/><colspec colnum="7" colname="col7" colsep="0" align="left"/><colspec colnum="8" colname="col8" colsep="0" align="left"/><colspec colnum="9" colname="col9" colsep="0" align="left"/><colspec colnum="10" colname="col10" colsep="0" align="left"/><colspec colnum="11" colname="col11" colsep="0" align="left"/><colspec colnum="12" colname="col12" colsep="0" align="left"/><thead valign="top"><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Program</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">C files</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">LoC</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">SLoC</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">ELoC</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">SDG vertex count</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">SDG edge count</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">Total slices</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">Largest coherent cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">SDG build time</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">Clustering time</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Description</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>a2ps</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">79</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">46,620</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">22,117</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">18,799</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">224,413</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">2,025,613</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">97,170</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">8%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1m52.048s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">583m40.758s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">ASCII to Postscript</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>acct</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">7</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2600</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1558</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">642</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">7618</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">22,061</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2834</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">11%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m15.658s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m12.545s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Process monitoring</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>acm</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">114</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">32,231</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">21,715</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">15,022</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">159,830</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">718,683</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">63,014</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">43%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1m57.652s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">230m18.418s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Flight simulator</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>anubis</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">35</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">18,049</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">11,994</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">6947</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">112,282</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">561,160</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">34,618</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">13%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m41.253s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">70m54.322s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">SMTP messenger</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>archimedes</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">787</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">575</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">454</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">20,136</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">91,728</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2176</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">4%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m3.658s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m12.701s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Semiconductor device simulator</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>barcode</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">13</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3968</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">2685</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2177</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">16,721</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">65,367</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">9602</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">58%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m10.234s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2m56.026s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Barcode generator</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>bc</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">9</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">9438</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">5450</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4535</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">36,981</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">355,942</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">15,076</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">32%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m15.359s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">13m14.221s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Calculator</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>byacc</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">12</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">6373</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">5312</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4688</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">45,338</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">203,675</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">16,590</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">7%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m9.820s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">10m15.746s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Parser generator</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>cflow</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">25</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">12,542</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">7121</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">5762</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">68,782</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">304,615</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">24,638</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">8%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m23.312s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">31m25.104s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Control flow analyzer</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>combine</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">14</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">8202</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">6624</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">5279</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">49,288</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">247,464</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">29,118</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">15%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m14.577s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">26m11.625s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">File combinator</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>copia</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1168</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1111</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1070</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">42,435</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">145,562</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">6654</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">48%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m2.046s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2m35.680s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">ESA signal processing code</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>cppi</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">13</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">6261</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1950</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2554</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">17,771</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">67,217</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">10,280</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">13%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m10.514s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2m33.213s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">C preprocessor formatter</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>ctags</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">33</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">14,663</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">11,345</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">7383</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">152,825</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">630,189</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">31,860</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">48%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m27.094s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">96m0.948s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left"><sans-serif>C</sans-serif> tagging</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>diction</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">5</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2218</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1613</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">427</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">5919</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">17,158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2444</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">16%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m5.339s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m8.189s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Grammar checker</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>diffutils</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">23</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">8801</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">6035</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">3638</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">30,023</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">113,824</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">16,122</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">44%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m23.384s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">9m11.509s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">File differencing</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>ed</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">8</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2860</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">2261</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1788</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">35,475</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">142,192</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">11,376</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">55%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m6.602s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">6m38.521s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Line text editor</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>enscript</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">22</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">14,182</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">10,681</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">9135</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">67,405</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">423,349</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">33,780</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">19%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m44.690s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">54m0.652s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">File converter</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>findutils</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">59</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">24,102</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">13,940</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">9431</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">102,910</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">177,822</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">41,462</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">22%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m36.250s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">21m20.795s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Line text editor</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>flex</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">21</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">23,173</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">12,792</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">13,537</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">89,806</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">860,859</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">37,748</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">16%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m31.249s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">77m28.885s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Lexical Analyzer</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>garpd</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">669</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">509</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">300</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">5452</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">14,908</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1496</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">14%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m1.681s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m3.670s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Address resolved</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>gcal</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">30</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">62,345</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">46,827</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">37,497</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">860,476</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">4,565,570</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">286,000</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">62%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">3m3.946s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">5d4h18m35s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Calendar program</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>gnuedma</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">643</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">463</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">306</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">5223</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">14,075</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1488</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">44%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1m12.888s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m4.365s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Development environment</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>gnushogi</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">16</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">16,301</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">11,664</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">7175</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">64,482</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">277,648</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">31,298</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">40%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m25.907s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">47m40.268s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Japanese chess</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>indent</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">8</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">6978</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">5090</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4285</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">24,109</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">143,821</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">7543</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">52%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m10.000s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">10m3.012s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Text formatter</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>less</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">33</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">22,661</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">15,207</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">9759</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">451,870</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">2,156,420</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">33,558</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">35%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1m56.968s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">339m48.985s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Text reader</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>spell</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">741</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">539</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">391</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">6232</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">17,574</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1740</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">20%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m1.663s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m4.905s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Spell checker</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>time</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">6</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2030</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1229</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">433</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">4946</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">12,971</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">3352</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">4%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m3.120s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m3.683s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">CPU resource measure</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>userv</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1378</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1112</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1022</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">15,418</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">54,258</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">5362</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">9%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m13.787s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m53.332s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Access control</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>wdiff</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1652</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1108</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">694</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">10,077</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">30,085</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2722</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">6%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m9.154s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m39.241s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Diff front end</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>which</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">6</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3003</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1996</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">753</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">8830</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">29,377</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">3804</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">35%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m4.528s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">0m24.215s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">Unix utility</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col1" nameend="col12" align="left"><vsp sp="0.5"/></entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Sum</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">602</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">356,639</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">232,623</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">175,883</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2,743,073</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">14,491,187</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">864,925</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">-</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">16m3.891s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">-</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left"/></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Average</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">20</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">11,888</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">7754</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">5863</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">91,436</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">483,040</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">28,831</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">27%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">0m32.130s</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">-</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left"/></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0010" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 2</ce:label><ce:caption id="cap0130"><ce:simple-para id="spar0140" view="all">CodeSurfer pointer analysis settings.</ce:simple-para></ce:caption><tgroup cols="13" align="center" altimg="si132.gif"><colspec colnum="1" colname="col1" colsep="0" align="left"/><colspec colnum="2" colname="col2" colsep="0" align="left"/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="left"/><colspec colnum="5" colname="col5" colsep="0" align="left"/><colspec colnum="6" colname="col6" colsep="0" align="left"/><colspec colnum="7" colname="col7" colsep="0" align="left"/><colspec colnum="8" colname="col8" colsep="0" align="left"/><colspec colnum="9" colname="col9" colsep="0" align="left"/><colspec colnum="10" colname="col10" colsep="0" align="left"/><colspec colnum="11" colname="col11" colsep="0" align="left"/><colspec colnum="12" colname="col12" colsep="0" align="left"/><colspec colnum="13" colname="col13" colsep="0" align="left"/><thead valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Program</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col2" nameend="col4" rowsep="1" align="left">Average slice size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col5" nameend="col7" rowsep="1" align="left">Maximum slice size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col8" nameend="col10" rowsep="1" align="center"><tb:right-border type="vb" style="s"/>Average Cluster Size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col11" nameend="col13" rowsep="1" align="center">Maximum Cluster Size</entry></row><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"/><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">L</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">M</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">H</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">L</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">M</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">H</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">L</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">M</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">H</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">L</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">M</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">H</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>a2ps</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">25,223</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">23,085</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">20,897</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">45,231</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">44,139</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">43,987</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2249</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1705</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">711</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">10,728</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">9295</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">4002</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>acct</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">763</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">700</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">621</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1357</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1357</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">1357</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">79</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">66</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">40</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">272</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">236</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">162</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>acm</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">19,083</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">17,997</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">16,509</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">29,403</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">28,620</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">28,359</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">3566</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">3408</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">4197</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">9356</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">9179</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">10,809</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>anubis</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">11,120</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">10,806</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">9085</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">16,548</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">16,347</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">16,034</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">939</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">917</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">650</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2708</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">2612</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">2278</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>archimedes</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">113</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">113</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">113</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">962</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">962</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">962</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">39</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">39</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">39</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>barcode</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3523</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3052</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">2820</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4621</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">4621</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">4621</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1316</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1870</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1605</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2463</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">2970</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">2793</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>bc</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">5278</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">5245</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">5238</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">7059</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">7059</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">7059</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1185</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1188</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1223</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2381</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">2384</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">2432</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>byacc</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3087</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2936</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">2886</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">9036</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">9036</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">9036</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">110</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">110</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">103</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">583</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">583</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">567</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>cflow</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">7314</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">5998</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">5674</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">11,856</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">11,650</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">11,626</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">865</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">565</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">246</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">3060</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">2191</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">1097</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>combine</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3512</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3347</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">3316</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">13,448</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">13,448</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">13,448</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">578</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">572</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">533</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">2252</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">2252</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">2161</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>copia</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1844</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1591</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1591</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">3273</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">3273</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">3273</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1566</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1331</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1331</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">1861</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">1607</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">1607</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>cppi</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1509</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1352</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1337</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">4158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">4158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">196</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">139</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">139</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">825</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">663</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">663</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>ctags</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">12,681</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">11,663</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">11,158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">15,483</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">15,475</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">15,475</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">7917</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">41,99</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">3955</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">11,080</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">7905</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">7642</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>diction</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">421</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">392</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">387</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1194</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1194</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">1194</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">46</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">37</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">37</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">217</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">196</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">196</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>diffutils</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">5049</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">4546</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">4472</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">7777</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">7777</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">7777</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">3048</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1795</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1755</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">4963</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">3596</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">3518</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>ed</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">4203</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3909</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">3908</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">5591</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">5591</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">5591</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2099</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1952</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1952</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">3281</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">3146</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">3146</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>enscript</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">7023</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">6729</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">6654</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">16,130</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">16,130</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">16,130</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">543</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">554</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">539</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">3140</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">3242</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">3243</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>findutils</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">7020</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">6767</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">5239</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">11,075</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">11,050</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">11,050</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1969</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">1927</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1306</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">4489</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">4429</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">2936</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>flex</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">9038</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">8737</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">8630</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">17,257</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">17,257</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">17,257</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">622</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">657</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">647</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">3064</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">3064</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">3064</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>garpd</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">284</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">242</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">224</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">628</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">628</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">628</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">32</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">31</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">29</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">103</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">103</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">103</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>gcal</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">132,860</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">123,438</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">123,427</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">142,739</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">142,289</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">142,289</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">40,885</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">40,614</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">40,614</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">93,541</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">88,532</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">88,532</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>gnuedma</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">385</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">369</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">368</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">730</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">730</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">368</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">178</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">176</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">174</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">333</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">331</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">330</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>gnushogi</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">9569</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">9248</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">9141</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">14,726</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">14,726</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">14,726</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">1577</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">2857</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">2820</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">3787</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">6225</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">6179</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>indent</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">4104</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">4058</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">4045</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">5704</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">5704</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">5704</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">2036</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">2032</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">1985</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">3402</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">3399</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">3365</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>less</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">13,592</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">13,416</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">13,392</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">16,063</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">16,063</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">16,063</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">4573</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">3074</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">3035</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">7945</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">5809</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">5796</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>spell</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">359</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">293</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">291</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">845</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">845</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">845</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">58</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">31</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">48</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">199</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">128</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">174</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>time</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">201</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">161</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">730</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">730</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">730</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">35</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">33</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">33</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>userv</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1324</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">972</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">964</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2721</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2662</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">2662</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">69</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">32</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">53</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">268</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">154</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">240</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>wdiff</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">687</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">582</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">561</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2687</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2687</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">2687</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">33</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">21</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">19</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">184</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">158</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">158</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>which</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1080</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1076</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">1070</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1744</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1744</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">1744</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">413</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">413</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">410</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col11" align="left">798</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col12" align="left">798</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col13" align="left">793</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0015" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 3</ce:label><ce:caption id="cap0135"><ce:simple-para id="spar0145" view="all">Hash function validation.</ce:simple-para></ce:caption><tgroup cols="7" align="center"><colspec colnum="1" colname="col1" colsep="0" align="left"/><colspec colnum="2" colname="col2" colsep="0" align="left"/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="left"/><colspec colnum="6" colname="col6" colsep="0" align="left"/><colspec colnum="7" colname="col7" colsep="0" align="char" char="."/><thead valign="top"><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Program</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">Unique slices (US)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">Unique hash values (UH)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Hashed slice precision (HSP)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Cluster count (CC)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">Hash cluster count (HCC)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">Hash Precision Clusters (HCP)</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>acct</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1558</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1521</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">97.63%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">811</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">811</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">100.00%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>barcode</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">2966</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2792</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">94.13%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1504</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1504</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">100.00%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>bc</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3787</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3671</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">96.94%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1955</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1942</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.34%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>byacc</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">10,659</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">10,111</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">94.86%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">5377</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">5377</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">100.00%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>cflow</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">16,584</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">15,749</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">94.97%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">8457</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">8452</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.94%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>copia</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3496</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3398</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">97.20%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1785</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1784</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.94%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>ctags</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">8739</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">8573</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">98.10%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4471</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">4470</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.98%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>diffutils</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">5811</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">5415</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">93.19%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2980</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2978</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.93%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>ed</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">2719</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2581</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">94.92%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1392</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1390</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.86%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>findutils</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">9455</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">8734</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">92.37%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">4816</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">4802</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.71%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>garpd</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">808</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">769</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">95.17%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">413</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">411</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.52%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>indent</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3639</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3491</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">95.93%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1871</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1868</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.84%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>time</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1453</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1363</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">93.81%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">760</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">758</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.74%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>userv</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">3510</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3275</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">93.30%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1827</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1786</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">97.76%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>wdiff</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">2190</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2148</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">98.08%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1131</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1131</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">100.00%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>which</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">1213</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1184</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">97.61%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">619</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">619</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">100.00%</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col1" nameend="col7" align="left"><vsp sp="0.5"/></entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Sum</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">78,587</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">74,575</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">-</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">40,169</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">40,083</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">-</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Average</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">4912</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">4661</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">94.97%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2511</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2505</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">99.72%</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0020" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 4</ce:label><ce:caption id="cap0140"><ce:simple-para id="spar0150" view="all"><ce:sans-serif>acct</ce:sans-serif>'s top five clusters.</ce:simple-para></ce:caption><tgroup cols="5" align="center"><colspec colnum="1" colname="col1" colsep="0" align="char" char="."/><colspec colnum="2" colname="col2" colsep="0" align="char" char="."/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="char" char="."/><thead valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Cluster</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col2" nameend="col3" rowsep="1" align="left">Cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Files</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Functions</entry></row><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char="."/><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">Vertices/lines</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Spanned</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Spanned</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">11.4%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">162/88</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">6</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">7.2%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">102/56</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">2</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">4.9%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">69/30</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">4</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">2.8%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">40/23</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">3</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">5</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">2.4%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">34/25</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0025" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 5</ce:label><ce:caption id="cap0145"><ce:simple-para id="spar0155" view="all"><ce:sans-serif>indent</ce:sans-serif>'s top five clusters</ce:simple-para></ce:caption><tgroup cols="5" align="center"><colspec colnum="1" colname="col1" colsep="0" align="char" char="."/><colspec colnum="2" colname="col2" colsep="0" align="char" char="."/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="char" char="."/><thead valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Cluster</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col2" nameend="col3" rowsep="1" align="left">Cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Files</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Functions</entry></row><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char="."/><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">Vertices/lines</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Spanned</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Spanned</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">52.1%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">3930/2546</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">7</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">54</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">3.0%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">223/136</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">7</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">1.9%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">144/72</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">6</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">1.3%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">101/54</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">5</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">5</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">1.1%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">83/58</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0030" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 6</ce:label><ce:caption id="cap0150"><ce:simple-para id="spar0160" view="all"><ce:sans-serif>bc</ce:sans-serif>'s top five clusters.</ce:simple-para></ce:caption><tgroup cols="5" align="center"><colspec colnum="1" colname="col1" colsep="0" align="char" char="."/><colspec colnum="2" colname="col2" colsep="0" align="char" char="."/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="char" char="."/><thead valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Cluster</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col2" nameend="col3" rowsep="1" align="left">Cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Files</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Functions</entry></row><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char="."/><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">Vertices/lines</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Spanned</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Spanned</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">32.3%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2432/1411</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">7</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">54</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">22.0%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1655/999</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">5</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">23</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">13.3%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1003/447</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">15</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">1.6%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">117/49</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">2</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">5</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">1.4%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">102/44</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0035" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 7</ce:label><ce:caption id="cap0155"><ce:simple-para id="spar0165" view="all"><ce:sans-serif>copia</ce:sans-serif>'s top five clusters.</ce:simple-para></ce:caption><tgroup cols="5" align="center"><colspec colnum="1" colname="col1" colsep="0" align="char" char="."/><colspec colnum="2" colname="col2" colsep="0" align="char" char="."/><colspec colnum="3" colname="col3" colsep="0" align="left"/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="char" char="."/><thead valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Cluster</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col2" nameend="col3" rowsep="1" align="left">Cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Files</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Functions</entry></row><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Number</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">Vertices/lines</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Spanned</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">Spanned</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">48%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">1609/882</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">239</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">0.1%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">4/2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">3</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">0.1%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">4/2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">4</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">0.1%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">4/2</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">5</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">0.1%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">2/1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0040" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 8</ce:label><ce:caption id="cap0160"><ce:simple-para id="spar0170" view="all">Various cluster statistics of <ce:sans-serif>bc</ce:sans-serif>.</ce:simple-para></ce:caption><tgroup cols="7" align="center"><colspec colnum="1" colname="col1" colsep="0" align="left"/><colspec colnum="2" colname="col2" colsep="0" align="char" char="."/><colspec colnum="3" colname="col3" colsep="0" align="char" char="."/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="char" char="."/><colspec colnum="6" colname="col6" colsep="0" align="char" char="."/><colspec colnum="7" colname="col7" colsep="0" align="char" char="."/><thead valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Cluster number</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col2" nameend="col3" rowsep="1" align="left">Same backward-slice cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col4" nameend="col5" rowsep="1" align="left">Same forward-slice cluster size</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col6" nameend="col7" rowsep="1" align="left">Coherent cluster size</entry></row><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"/><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">Vertices</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">Vertices</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">%</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">Vertices</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">%</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>1</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">4135</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">54.86</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">2452</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">32.52</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="char" char=".">2432</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">32.26</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>2</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">1111</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">14.74</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1716</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">22.76</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="char" char=".">1655</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">21.96</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>3</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">131</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">1.74</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1007</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">13.36</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="char" char=".">1003</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">13.31</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>4</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">32</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">0.42</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">157</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">2.08</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="char" char=".">117</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">1.55</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left"><sans-serif>5</sans-serif></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="char" char=".">25</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">0.33</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">109</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="char" char=".">1.45</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="char" char=".">102</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">1.35</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col1" nameend="col7" align="left"><vsp sp="0.5"/></entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col1" nameend="col6" align="left">Group size:</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">70.43</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0045" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 9</ce:label><ce:caption id="cap0165"><ce:simple-para id="spar0175" view="all">Fault fixes for <ce:sans-serif>barcode</ce:sans-serif>.</ce:simple-para></ce:caption><tgroup cols="10" align="center"><colspec colnum="1" colname="col1" colsep="0" align="char" char="."/><colspec colnum="2" colname="col2" colsep="0" align="left"/><colspec colnum="3" colname="col3" colsep="0" align="char" char="."/><colspec colnum="4" colname="col4" colsep="0" align="char" char="."/><colspec colnum="5" colname="col5" colsep="0" align="left"/><colspec colnum="6" colname="col6" colsep="0" align="left"/><colspec colnum="7" colname="col7" colsep="0" align="char" char="."/><colspec colnum="8" colname="col8" colsep="0" align="char" char="."/><colspec colnum="9" colname="col9" colsep="0" align="char" char="."/><colspec colnum="10" colname="col10" colsep="0" align="char" char="."/><thead valign="top"><row rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">Version</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">Release date</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="left">C files</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="left">LoC</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">SLoC</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">ELoC</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="left">SDG vertices</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="left">SDG edges</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="left">Total slices</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="left">Faults fixed</entry></row></thead><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.90</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">29-06-1999</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">6</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1352</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">891</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">716</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">7184</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">23,072</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">3148</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">-</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.91</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">08-07-1999</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">6</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">1766</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1186</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">949</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">8703</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">30,377</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">5328</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">5</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.92</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">03-09-1999</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">8</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">2225</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1513</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1221</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">10,481</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">37,373</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">5368</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">9</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.93</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">26-10-1999</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">8</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">2318</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1593</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1284</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">11,415</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">42,199</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">5722</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">5</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.94</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">26-10-1999</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">8</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">2318</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1593</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1284</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">11,414</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">41,995</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">5722</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">1</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.95</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">03-02-2000</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">8</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">2585</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">1785</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1450</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">12,202</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">45,830</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">6514</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">3</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.96</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">09-11-2000</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">11</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">3249</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2226</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">1799</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">14,733</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">56,802</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">8106</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">9</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.97</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">17-10-2001</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">13</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">3911</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2670</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2162</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">16,602</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">64,867</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">9530</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">2</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="char" char=".">0.98</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">03-03-2002</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col3" align="char" char=".">13</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col4" align="char" char=".">3968</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col5" align="left">2685</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col6" align="left">2177</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col7" align="char" char=".">16,721</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col8" align="char" char=".">65,395</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col9" align="char" char=".">9602</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col10" align="char" char=".">5</entry></row></tbody></tgroup></ce:table></ce:floats><head><ce:article-footnote><ce:label>â</ce:label><ce:note-para id="npar1015" view="all">This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</ce:note-para></ce:article-footnote><ce:title id="tit0005">Coherent clusters in source code</ce:title><ce:author-group id="aug0005"><ce:author biographyid="vt0005" id="aut0005"><ce:given-name>Syed</ce:given-name><ce:surname>Islam</ce:surname><ce:cross-ref id="crf0010" refid="aff0005"><ce:sup loc="post">a</ce:sup></ce:cross-ref><ce:cross-ref id="crf0015" refid="cor0005"><ce:sup loc="post">â</ce:sup></ce:cross-ref><ce:e-address id="eadd0005" type="email">s.islam@cs.ucl.ac.uk</ce:e-address></ce:author><ce:author biographyid="vt0010" id="aut0010"><ce:given-name>Jens</ce:given-name><ce:surname>Krinke</ce:surname><ce:cross-ref id="crf0020" refid="aff0005"><ce:sup loc="post">a</ce:sup></ce:cross-ref></ce:author><ce:author biographyid="vt0015" id="aut0015"><ce:given-name>David</ce:given-name><ce:surname>Binkley</ce:surname><ce:cross-ref id="crf0025" refid="aff0010"><ce:sup loc="post">b</ce:sup></ce:cross-ref></ce:author><ce:author biographyid="vt0020" id="aut0020"><ce:given-name>Mark</ce:given-name><ce:surname>Harman</ce:surname><ce:cross-ref id="crf0030" refid="aff0005"><ce:sup loc="post">a</ce:sup></ce:cross-ref></ce:author><ce:affiliation id="aff0005"><ce:label>a</ce:label><ce:textfn>University College London, United Kingdom</ce:textfn><sa:affiliation><sa:organization>University College London</sa:organization><sa:country>United Kingdom</sa:country></sa:affiliation></ce:affiliation><ce:affiliation id="aff0010"><ce:label>b</ce:label><ce:textfn>Loyola University Maryland, United States</ce:textfn><sa:affiliation><sa:organization>Loyola University Maryland</sa:organization><sa:country>United States</sa:country></sa:affiliation></ce:affiliation><ce:correspondence id="cor0005"><ce:label>â</ce:label><ce:text>Corresponding author.</ce:text></ce:correspondence></ce:author-group><ce:date-received day="19" month="11" year="2012"/><ce:date-revised day="16" month="7" year="2013"/><ce:date-accepted day="18" month="7" year="2013"/><ce:abstract id="abs0005" class="author-highlights" view="all"><ce:abstract-sec id="abst0005" view="all"><ce:section-title id="sect0005">Highlights</ce:section-title><ce:simple-para id="spar0005" view="all"><ce:list id="list0025"><ce:list-item id="listitem0105"><ce:label>â¢</ce:label><ce:para id="p0005" view="all">Introduction of efficient clustering algorithm.</ce:para></ce:list-item><ce:list-item id="listitem0110"><ce:label>â¢</ce:label><ce:para id="p0010" view="all">Empirical analysis to assess the frequency and size of coherent clusters.</ce:para></ce:list-item><ce:list-item id="listitem0115"><ce:label>â¢</ce:label><ce:para id="p0015" view="all">A series of case studies showing how clusters identify logical program structures.</ce:para></ce:list-item><ce:list-item id="listitem0120"><ce:label>â¢</ce:label><ce:para id="p0020" view="all">A study on the relationship between coherent clusters and program faults.</ce:para></ce:list-item><ce:list-item id="listitem0125"><ce:label>â¢</ce:label><ce:para id="p0025" view="all">A study on the relationship between coherent clusters and system evolution.</ce:para></ce:list-item></ce:list></ce:simple-para></ce:abstract-sec></ce:abstract><ce:abstract id="abs0010" class="author" view="all"><ce:section-title id="sect0010">Abstract</ce:section-title><ce:abstract-sec id="abst0010" view="all"><ce:simple-para id="spar0010" view="all">This paper presents the results of a large scale empirical study of <ce:italic>coherent dependence clusters</ce:italic>. All statements in a coherent dependence cluster depend upon the same set of statements and affect the same set of statements; a coherent cluster's statements have 'coherent' shared backward and forward dependence. We introduce an approximation to efficiently locate coherent clusters and show that it has a <ce:italic>minimum</ce:italic> precision of 97.76%. Our empirical study also finds that, despite their tight coherence constraints, coherent dependence clusters are in abundance: 23 of the 30 programs studied have coherent clusters that contain at least 10% of the whole program. Studying patterns of clustering in these programs reveals that most programs contain multiple substantial coherent clusters. A series of subsequent case studies uncover that all clusters of significant size map to a logical functionality and correspond to a program structure. For example, we show that for the program <ce:sans-serif>acct</ce:sans-serif>, the top five coherent clusters all map to specific, yet otherwise non-obvious, functionality. Cluster visualization also brings out subtle deficiencies in program structure and identifies potential refactoring candidates. A study of inter-cluster dependence is used to highlight how coherent clusters are connected to each other, revealing higher-level structures, which can be used in reverse engineering. Finally, studies are presented to illustrate how clusters are not correlated with program faults as they remain stable during most system evolution.</ce:simple-para></ce:abstract-sec></ce:abstract><ce:keywords id="kwd0005" class="keyword" xml:lang="en" view="all"><ce:section-title id="sect0015">Keywords</ce:section-title><ce:keyword id="kw0005"><ce:text>Dependence analysis</ce:text></ce:keyword><ce:keyword id="kw0010"><ce:text>Program comprehension</ce:text></ce:keyword><ce:keyword id="kw0020"><ce:text>Software clustering</ce:text></ce:keyword></ce:keywords></head><body view="all"><ce:sections><ce:section id="sec0005" view="all"><ce:label>1</ce:label><ce:section-title id="sect0020">Introduction</ce:section-title><ce:para id="p0030" view="all">Program dependence analysis is a foundation for many activities in software engineering such as testing, comprehension, and impact analysis (<ce:cross-ref id="crf0035" refid="bib0050">Binkley, 2007</ce:cross-ref>). For example, it is essential to understand the relationships between different parts of a system when making changes and the impacts of these changes (<ce:cross-ref id="crf0040" refid="bib0135">Gallagher and Lyle, 1991</ce:cross-ref>). This has led to both static (<ce:cross-refs id="crfs0005" refid="bib0250 bib0095">Yau and Collofello, 1985; Black, 2001</ce:cross-refs>) and blended (static and dynamic) (<ce:cross-refs id="crfs0010" refid="bib0200 bib0205">Ren et al., 2006, 2005</ce:cross-refs>) dependence analyses of the relationships between dependence and impact.</ce:para><ce:para id="p0035" view="all">One important property of dependence is the way in which it may cluster. This occurs when a set of statements all depend upon one another, forming a dependence cluster. Within such a cluster, any change to an element potentially affects every other element of the cluster. If such a dependence cluster is very large, then this mutual dependence clearly has implications related to the cost of maintaining the code.</ce:para><ce:para id="p0040" view="all">In previous work (<ce:cross-ref id="crf0045" refid="bib0065">Binkley and Harman, 2005</ce:cross-ref>), we introduced the study of dependence clusters in terms of program slicing and demonstrated that large dependence clusters were (perhaps surprisingly) common, both in production (closed source) code and in open source code (<ce:cross-ref id="crf0050" refid="bib0150">Harman et al., 2009</ce:cross-ref>). Our findings over a large corpus of C code was that 89% of the programs studied contained at least one dependence cluster composed of 10% or more of the program's statements. The average size of the programs studied was 20KLoC, so these clusters of more than 10% denoted significant portions of code. We also found evidence of super-large clusters: 40% of the programs had a dependence cluster that consumed over half of the program.</ce:para><ce:para id="p0045" view="all">More recently, our finding that large clusters are widespread in C systems has been replicated for other languages and systems by other authors, both in open source and in proprietary code (<ce:cross-refs id="crfs0015" refid="bib0005 bib0040 bib0230">Acharya and Robinson, 2011; BeszÃ©des et al., 2007; Szegedi et al., 2007</ce:cross-refs>). Large dependence clusters were also found in Java systems (<ce:cross-refs id="crfs0020" refid="bib0040 bib0215 bib0230">BeszÃ©des et al., 2007; Savernik, 2007; Szegedi et al., 2007</ce:cross-refs>) and in legacy Cobol systems (<ce:cross-ref id="crf0055" refid="bib0140">Hajnal and ForgÃ¡cs, 2011</ce:cross-ref>).</ce:para><ce:para id="p0050" view="all">There has been interesting work on the relationship between faults, program size, and dependence clusters (<ce:cross-ref id="crf0060" refid="bib0090">Black et al., 2006</ce:cross-ref>), and between impact analysis and dependence clusters (<ce:cross-refs id="crfs0025" refid="bib0005 bib0150">Acharya and Robinson, 2011; Harman et al., 2009</ce:cross-refs>). Large dependence clusters can be thought of as dependence 'anti-patterns' because of the high impact that a change anywhere in the cluster has. For example, it may lead to problems for on-going software maintenance and evolution (<ce:cross-refs id="crfs0030" refid="bib0005 bib0055 bib0215">Acharya and Robinson, 2011; Binkley et al., 2008; Savernik, 2007</ce:cross-refs>). As a result, refactoring has been proposed as a technique for breaking larger clusters of dependence into smaller clusters (<ce:cross-refs id="crfs0035" refid="bib0065 bib0085">Binkley and Harman, 2005; Black et al., 2009</ce:cross-refs>).</ce:para><ce:para id="p0055" view="all">Dependence cluster analysis is complicated by the fact that inter-procedural program dependence is non-transitive, which means that the statements in a traditional dependence cluster, though they all depend on each other, may not each depend on the same set of statements, nor need they necessarily affect the same set of statements external to the cluster.</ce:para><ce:para id="p0060" view="all">This paper introduces and empirically studies<ce:cross-ref id="crf0065" refid="fn0005"><ce:sup loc="post">1</ce:sup></ce:cross-ref><ce:footnote id="fn0005"><ce:label>1</ce:label><ce:note-para id="npar0005" view="all">Preliminary results were presented at PASTE (<ce:cross-ref id="crf0070" refid="bib0165">Islam et al., 2010b</ce:cross-ref>).</ce:note-para></ce:footnote> <ce:italic>coherent dependence clusters</ce:italic>. In a coherent dependence cluster all statements share identical intra-cluster and extra-cluster dependence. A coherent dependence cluster is thus more constrained than a general dependence cluster. A coherent dependence cluster retains the essential property that all statements within the cluster are mutually dependent, but adds the constraint that all incoming dependence must be identical and all outgoing dependence must also be identical. That is, all statements within a coherent cluster depend upon the same set of statements outside the cluster and all statements within a coherent cluster affect the same set of statements outside the cluster.</ce:para><ce:para id="p0065" view="all">This means that, when studying a coherent cluster, we need to understand only a single external dependence context in order to understand the behavior of the entire cluster. For a dependence cluster that fails to meet the external constraint, statements of the cluster may have a different external dependence context. This is possible because inter-procedural dependence is non-transitive.</ce:para><ce:para id="p0070" view="all">It might be thought that very few sets of statements would meet these additional coherence constraints, or that, where such sets of statements do meet the constraints, there would be relatively few statements in the coherent cluster so-formed. Our empirical findings provide evidence that this is not the case: coherent dependence clusters are common and they can be very large.</ce:para><ce:para id="p0075" view="all">This paper is part of a series of work that we have conducted in the area of dependence clusters. The overarching motivation for this work is to gain a better understanding of the dependence clusters found in programs. Although this paper is a continuation of our previous work on dependence clusters, we present the work in a completely new light. In this paper we show that the specialized version of dependence clusters, <ce:italic>coherent</ce:italic> clusters are found in abundance in programs and need not be regarded as problems. We rather show that these clusters map to logical program structures which will aid developers in program comprehension and understanding. Furthermore, this paper extends the current knowledge in the area and motivates future work by presenting initial results of inter-cluster dependence which can be used as a foundation for reverse engineering. We answer several representative open questions such as whether clusters are related to program faults and how clusters change over time during system evolution.</ce:para><ce:para id="p0080" view="all">The primary contributions of the paper are as follows:<ce:list id="list0015"><ce:list-item id="listitem0055"><ce:label>1</ce:label><ce:para id="p0085" view="all">An Empirical analysis of thirty programs assesses the frequency and size of coherent dependence clusters. The results demonstrate that large coherent clusters are common, validating their further study.</ce:para></ce:list-item><ce:list-item id="listitem0060"><ce:label>2</ce:label><ce:para id="p0090" view="all">Two further empirical validation studies consider the impact of data-flow analysis precision and the precision of the approximation used to efficiently identify coherent clusters.</ce:para></ce:list-item><ce:list-item id="listitem0065"><ce:label>3</ce:label><ce:para id="p0095" view="all">A series of four case studies shows how coherent clusters map to logical program structures.</ce:para></ce:list-item><ce:list-item id="listitem0070"><ce:label>4</ce:label><ce:para id="p0100" view="all">A study of inter-cluster dependence highlights how coherent clusters form the building blocks of larger dependence structures where identification can support, as an example, reverse engineering.</ce:para></ce:list-item><ce:list-item id="listitem0075"><ce:label>5</ce:label><ce:para id="p0105" view="all">A study of bug fixes finds no relationship between program faults and coherent clusters implying that dependence clusters are not responsible for program faults.</ce:para></ce:list-item><ce:list-item id="listitem0080"><ce:label>6</ce:label><ce:para id="p0110" view="all">A longitudinal study of system evolution shows that coherent clusters remain stable during evolution thus depicting the core architecture of systems.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="p0115" view="all">The remainder of this paper is organized as follows: <ce:cross-ref id="crf0075" refid="sec0010">Section 2</ce:cross-ref> provides background on coherent clusters and their visualization. <ce:cross-ref id="crf0080" refid="sec0045">Section 3</ce:cross-ref> provides details on the subject programs, the validation of the slice approximation used, and the experimental setup. This is followed by quantitative and qualitative studies into the existence and impact of coherent dependence clusters and the inter-cluster dependence study. It also includes studies on program faults and system evolution and their relationship to coherent clusters. <ce:cross-ref id="crf0085" refid="sec0120">Section 4</ce:cross-ref> considers related work and finally, <ce:cross-ref id="crf0090" refid="sec0125">Section 5</ce:cross-ref> summarizes the work presented.</ce:para></ce:section><ce:section id="sec0010" view="all"><ce:label>2</ce:label><ce:section-title id="sect0025">Background</ce:section-title><ce:para id="p0120" view="all">This section provides background on dependence clusters. It first presents a sequence of definitions that culminate in the definition for a coherent dependence cluster. Previous work (<ce:cross-refs id="crfs0040" refid="bib0065 bib0150">Binkley and Harman, 2005; Harman et al., 2009</ce:cross-refs>) has used the term <ce:italic>dependence cluster</ce:italic> for a particular kind of cluster, termed a <ce:italic>mutually-dependent cluster</ce:italic> herein to emphasize that such clusters consider only mutual dependence internal to the cluster. This distinction allows the definition to be extended to incorporate external dependence. The section also reviews the current graph-based visualizations for dependence clusters.</ce:para><ce:section id="sec0015" view="all"><ce:label>2.1</ce:label><ce:section-title id="sect0030">Dependence clusters</ce:section-title><ce:para id="p0125" view="all">Informally, <ce:italic>mutually-dependent clusters</ce:italic> are maximal sets of program statements that mutually depend upon one another (<ce:cross-ref id="crf0095" refid="bib0150">Harman et al., 2009</ce:cross-ref>). They are formalized in terms of mutually dependent sets in the following definition.</ce:para><ce:para id="p0130" view="all"><ce:enunciation id="enun0005"><ce:label>Definition 2.1</ce:label><ce:section-title id="sect0035">Mutually-dependent set and cluster (<ce:cross-ref id="crf0100" refid="bib0150">Harman et al., 2009</ce:cross-ref>)</ce:section-title><ce:para id="p0135" view="all">A <ce:italic>mutually-dependent set (MDS)</ce:italic> is a set of statements, <ce:italic>S</ce:italic>, such that</ce:para><ce:para id="p0140" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>S</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic> depends on <ce:italic>y</ce:italic>.</ce:para><ce:para id="p0145" view="all">A <ce:italic>mutually-dependent cluster</ce:italic> is a maximal MDS; thus, it is an MDS not properly contained within another MDS.</ce:para></ce:enunciation></ce:para><ce:para id="p0150" view="all">The definition of an MDS is parameterized by an underlying <ce:italic>depends-on</ce:italic> relation. Ideally, such a relation would precisely capture the impact, influence, and dependence between statements. Unfortunately, such a relation is not computable (<ce:cross-ref id="crf0105" refid="bib0240">Weiser, 1984</ce:cross-ref>). A well known approximation is based on Weiser's <ce:italic>program slice</ce:italic> (<ce:cross-ref id="crf0110" refid="bib0240">Weiser, 1984</ce:cross-ref>): a slice is the set of program statements that affect the values computed at a particular statement of interest (referred to as a slicing criterion). While its computation is undecidable, a minimal (or precise) slice includes exactly those program elements that affect the criterion and thus can be used to define an MDS in which <ce:italic>t</ce:italic> depends on <ce:italic>s</ce:italic> iff <ce:italic>s</ce:italic> is in the minimal slice taken with respect to slicing criterion <ce:italic>t</ce:italic>.</ce:para><ce:para id="p0155" view="all">The slice-based definition is useful because algorithms to compute approximations to minimal slices can be used to define and compute approximations to mutually-dependent clusters. One such algorithm computes a slice as the solution to a reachability problem over a program's <ce:italic>System Dependence Graph</ce:italic> (SDG) (<ce:cross-ref id="crf0115" refid="bib0155">Horwitz et al., 1990</ce:cross-ref>). An SDG is comprised of vertices, which essentially represent the statements of the program and two kinds of edges: data dependence edges and control dependence edges. A data dependence connects a definition of a variable with each use of the variable reached by the definition (<ce:cross-ref id="crf0120" refid="bib0130">Ferrante et al., 1987</ce:cross-ref>). Control dependence connects a predicate <ce:italic>p</ce:italic> to a vertex <mml:math altimg="si1.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math> when <ce:italic>p</ce:italic> has at least two control-flow-graph successors, one of which can lead to the exit vertex without encountering <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math> and the other always leads eventually to <mml:math altimg="si3.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math> (<ce:cross-ref id="crf0125" refid="bib0130">Ferrante et al., 1987</ce:cross-ref>). Thus <ce:italic>p</ce:italic> controls the possible future execution of <mml:math altimg="si4.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math>. For structured code, control dependence reflects the nesting structure of the program. When slicing an SDG, a slicing criterion is a vertex from the SDG.</ce:para><ce:para id="p0160" view="all">A naÃ¯ve definition of a dependence cluster would be based on the transitive closure of the dependence relation and thus would define a cluster to be a strongly connected component. Unfortunately, for certain language features, dependence is non-transitive. Examples of such features include procedures (<ce:cross-ref id="crf0130" refid="bib0155">Horwitz et al., 1990</ce:cross-ref>) and threads (<ce:cross-ref id="crf0135" refid="bib0175">Krinke, 1998</ce:cross-ref>). Thus, in the presence of these features, strongly connected components overstate the size and number of dependence clusters. Fortunately, context-sensitive slicing captures the necessary context information (<ce:cross-refs id="crfs0045" refid="bib0065 bib0060 bib0155 bib0180 bib0185">Binkley and Harman, 2005, 2003; Horwitz et al., 1990; Krinke, 2002, 2003</ce:cross-refs>).</ce:para><ce:para id="p0165" view="all">Two kinds of SDG slices are used in this paper: backward slices and forward slices (<ce:cross-refs id="crfs0050" refid="bib0155 bib0195">Horwitz et al., 1990; Ottenstein and Ottenstein, 1984</ce:cross-refs>). The backward slice taken with respect to vertex <mml:math altimg="si5.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math>, denoted <ce:sans-serif>BSlice</ce:sans-serif>(v), is the set of vertices reaching <mml:math altimg="si6.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math> via a path of control and data dependence edges where this path respects context. The forward slice, taken with respect to vertex <mml:math altimg="si7.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math>, denoted <ce:sans-serif>FSlice</ce:sans-serif>(v), is the set of vertices reachable from <mml:math altimg="si8.gif" overflow="scroll"><mml:mi>v</mml:mi></mml:math> via a path of control and data dependence edges where this path respects context.</ce:para><ce:para id="p0170" view="all">The program <ce:sans-serif>P</ce:sans-serif> shown in <ce:cross-ref id="crf0140" refid="fig0005">Fig. 1</ce:cross-ref><ce:float-anchor refid="fig0005"/> illustrates the non-transitivity of slice inclusion. The program has six assignment statements (assigning the variables <ce:sans-serif>a, b, c, d, e</ce:sans-serif> and <ce:sans-serif>f</ce:sans-serif>) whose dependencies are shown in columns 1-6 as backward slice inclusion. Backward slice inclusion contains statements that affect the slicing criterion through data and control dependence. The dependence relationship between these statements is also extracted and shown in <ce:cross-ref id="crf0145" refid="fig0010">Fig. 2</ce:cross-ref><ce:float-anchor refid="fig0010"/> using a directed graph where the nodes of the graph represent the assignment statements and the edges represent the backward slice inclusion relationship from <ce:cross-ref id="crf0150" refid="fig0005">Fig. 1</ce:cross-ref>. The table on the right in <ce:cross-ref id="crf0155" refid="fig0010">Fig. 2</ce:cross-ref> also gives the forward slice inclusions for the statements. All other statements in <ce:sans-serif>P</ce:sans-serif>, which do not define a variable, are ignored. In the diagram, <ce:sans-serif>x</ce:sans-serif> depends on <ce:sans-serif>y</ce:sans-serif> (<ce:sans-serif>y</ce:sans-serif> â <ce:sans-serif>BSlice(x)</ce:sans-serif>) is represented by <ce:sans-serif>y</ce:sans-serif> â <ce:sans-serif>x</ce:sans-serif>. The diagram shows two instances of dependence intransitivity in <ce:sans-serif>P</ce:sans-serif>. Although <ce:sans-serif>b</ce:sans-serif> depends on nodes <ce:sans-serif>a, c</ce:sans-serif>, and <ce:sans-serif>d</ce:sans-serif>, node <ce:sans-serif>f</ce:sans-serif>, which depends on <ce:sans-serif>b</ce:sans-serif>, does not depend on <ce:sans-serif>a, c,</ce:sans-serif> or <ce:sans-serif>d</ce:sans-serif>. Similarly, <ce:sans-serif>d</ce:sans-serif> depends on <ce:sans-serif>e</ce:sans-serif> but <ce:sans-serif>a, b,</ce:sans-serif> and <ce:sans-serif>c</ce:sans-serif>, which depend on <ce:sans-serif>d</ce:sans-serif> do not depend on <ce:sans-serif>e</ce:sans-serif>.</ce:para></ce:section><ce:section id="sec0020" view="all"><ce:label>2.2</ce:label><ce:section-title id="sect0040">Slice-based clusters</ce:section-title><ce:para id="p0175" view="all">A <ce:italic>slice-based cluster</ce:italic> is a maximal set of vertices included in each other's slice. The following definition essentially instantiates <ce:cross-ref id="crf0160" refid="enun0005">Definition 2.1</ce:cross-ref> using <ce:italic>BSlice</ce:italic>. Because <ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>)<ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>) the dual of this definition using <ce:italic>FSlice</ce:italic> is equivalent. Where such a duality does not hold, both definitions are given. When it is important to differentiate between the two, the terms <ce:italic>backward</ce:italic> and <ce:italic>forward</ce:italic> will be added to the definition's name as is done in this section.</ce:para><ce:para id="p0180" view="all"><ce:enunciation id="enun0010"><ce:label>Definition 2.2</ce:label><ce:section-title id="sect0045">Backward-slice MDS and cluster (<ce:cross-ref id="crf0165" refid="bib0150">Harman et al., 2009</ce:cross-ref>)</ce:section-title><ce:para id="p0185" view="all">A <ce:italic>backward-slice MDS</ce:italic> is a set of SDG vertices, <ce:italic>V</ce:italic>, such that</ce:para><ce:para id="p0190" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>).</ce:para><ce:para id="p0195" view="all">A <ce:italic>backward-slice cluster</ce:italic> is a backward-slice MDS contained within no other backward-slice MDS.</ce:para></ce:enunciation></ce:para><ce:para id="p0200" view="all">Note that as <ce:italic>x</ce:italic> and <ce:italic>y</ce:italic> are interchangeable, this is equivalent to â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>)<ce:hsp sp="0.25"/>â§<ce:hsp sp="0.25"/><ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>). Thus, any unordered pair (<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic>) with <ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>)<ce:hsp sp="0.25"/>â§<ce:hsp sp="0.25"/><ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>) creates an edge (<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic>) in an undirected graph in which a complete subgraph is equivalent to a backward-slice MDS and a backward-slice cluster is equivalent to a maximal clique. Therefore, the clustering problem is the NP-Hard <ce:italic>maximal cliques</ce:italic> problem (<ce:cross-ref id="crf0170" refid="bib0100">Bomze et al., 1999</ce:cross-ref>) making <ce:cross-ref id="crf0175" refid="enun0010">Definition 2.2</ce:cross-ref> prohibitively expensive to implement.</ce:para><ce:para id="p0205" view="all">In the example shown in <ce:cross-ref id="crf0180" refid="fig0010">Fig. 2</ce:cross-ref>, the vertices representing the assignments to <ce:sans-serif>a, b, c</ce:sans-serif> and <ce:sans-serif>d</ce:sans-serif> are all in each others backward slices and hence satisfy the definition of a backward-slice cluster. These vertices also satisfy the definition of a forward-slice cluster as they are also in each others forward slices.</ce:para><ce:para id="p0210" view="all">As dependence is not transitive, a statement can be in multiple slice-based clusters. For example, in <ce:cross-ref id="crf0185" refid="fig0010">Fig. 2</ce:cross-ref> the statements <ce:sans-serif>d</ce:sans-serif> and <ce:sans-serif>e</ce:sans-serif> are mutually dependent upon each other and thus satisfy the definition of a slice-based cluster. Statement <ce:sans-serif>d</ce:sans-serif> is also mutually dependent on statements <ce:sans-serif>a, b, c</ce:sans-serif>, thus the set {<ce:sans-serif>a, b, c, d</ce:sans-serif>} also satisfies the definition of a slice-based cluster.</ce:para></ce:section><ce:section id="sec0025" view="all"><ce:label>2.3</ce:label><ce:section-title id="sect0050">Same-slice clusters</ce:section-title><ce:para id="p0215" view="all">An alternative definition uses the <ce:italic>same-slice</ce:italic> relation in place of slice inclusion (<ce:cross-ref id="crf0190" refid="bib0065">Binkley and Harman, 2005</ce:cross-ref>). This relation replaces the need to check if two vertices are in each others slice with checking if two vertices have the <ce:italic>same</ce:italic> slice. The result is captured in the following definitions for <ce:italic>same-slice cluster</ce:italic>. The first uses backward slices and the second forward slices.</ce:para><ce:para id="p0220" view="all"><ce:enunciation id="enun0015"><ce:label>Definition 2.3</ce:label><ce:section-title id="sect0055">Same-slice MDS and cluster (<ce:cross-ref id="crf0195" refid="bib0150">Harman et al., 2009</ce:cross-ref>)</ce:section-title><ce:para id="p0225" view="all">A <ce:italic>same-backward-slice MDS</ce:italic> is a set of SDG vertices, <ce:italic>V</ce:italic>, such that</ce:para><ce:para id="p0230" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>).</ce:para><ce:para id="p0235" view="all">A <ce:italic>same-backward-slice cluster</ce:italic> is a same-backward-slice MDS contained within no other same-backward-slice MDS.</ce:para><ce:para id="p0240" view="all">A <ce:italic>same-forward-slice MDS</ce:italic> is a set of SDG vertices, <ce:italic>V</ce:italic>, such that</ce:para><ce:para id="p0245" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>y</ce:italic>).</ce:para><ce:para id="p0250" view="all">A <ce:italic>same-forward-slice cluster</ce:italic> is a same-forward-slice MDS contained within no other same-forward-slice MDS.</ce:para></ce:enunciation></ce:para><ce:para id="p0255" view="all">Because <ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>) and <ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>), two vertices that have the same slice will always be in each other's slice. If slice inclusion were transitive, a backward-slice MDS (<ce:cross-ref id="crf0200" refid="enun0010">Definition 2.2</ce:cross-ref>) would be identical to a same-backward-slice MDS (<ce:cross-ref id="crf0205" refid="enun0015">Definition 2.3</ce:cross-ref>). However, as illustrated by the examples in <ce:cross-ref id="crf0210" refid="fig0005">Fig. 1</ce:cross-ref>, slice inclusion is not transitive; thus, the relation is one of containment where every same-backward-slice MDS is also a backward-slice MDS but not necessarily a maximal one.</ce:para><ce:para id="p0260" view="all">For example, in <ce:cross-ref id="crf0215" refid="fig0010">Fig. 2</ce:cross-ref> the set of vertices {<ce:sans-serif>a, b, c</ce:sans-serif>} form a same-backward-slice cluster because each vertex of the set yields the same backward slice. Whereas the set of vertices {<ce:sans-serif>a, c</ce:sans-serif>} form a same-forward-slice cluster as they have the same forward slice. Although vertex <ce:sans-serif>d</ce:sans-serif> is mutually dependent with all vertices of either set, it does not form the same-slice cluster with either set because it has an additional dependence relationship with vertex <ce:sans-serif>e</ce:sans-serif>.</ce:para><ce:para id="p0265" view="all">Although the introduction of same-slice clusters was motivated by the need for efficiency, the definition inadvertently introduced an <ce:italic>external</ce:italic> requirement on the cluster. Comparing the definitions for slice-based clusters (<ce:cross-ref id="crf0220" refid="enun0010">Definition 2.2</ce:cross-ref>) and same-slice clusters (<ce:cross-ref id="crf0225" refid="enun0015">Definition 2.3</ce:cross-ref>), a slice-based cluster includes only the <ce:italic>internal</ce:italic> requirement that the vertices of a cluster depend upon one another. However, a same-backward-slice cluster (inadvertently) adds to this internal requirement the <ce:italic>external</ce:italic> requirement that all vertices in the cluster are affected by the same vertices external to the cluster. Symmetrically, a same-forward-slice cluster adds the <ce:italic>external</ce:italic> requirement that all vertices in the cluster affect the same vertices external to the cluster.</ce:para></ce:section><ce:section id="sec0030" view="all"><ce:label>2.4</ce:label><ce:section-title id="sect0060">Coherent dependence clusters</ce:section-title><ce:para id="p0270" view="all">This subsection first formalizes the notion of <ce:italic>coherent dependence clusters</ce:italic> and then presents a slice-based instantiation of the definition. Coherent clusters are dependence clusters that include not only an internal dependence requirement (each statement of a cluster depends on all the other statements of the cluster) but also an external dependence requirement. The external dependence requirement includes both that each statement of a cluster depends on the same statements external to the cluster and also that it influences the same set of statements external to the cluster. In other words, a coherent cluster is a set of statements that are mutually dependent and share identical extra-cluster dependence. Coherent clusters are defined in terms of the coherent MDS:</ce:para><ce:para id="p0275" view="all"><ce:enunciation id="enun0020"><ce:label>Definition 2.4</ce:label><ce:section-title id="sect0065">Coherent MDS and cluster (<ce:cross-ref id="crf0230" refid="bib0165">Islam et al., 2010b</ce:cross-ref>)</ce:section-title><ce:para id="p0280" view="all">A <ce:italic>coherent MDS</ce:italic> is a MDS <ce:italic>V</ce:italic>, such that</ce:para><ce:para id="p0285" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>: <ce:italic>x</ce:italic> depends on <ce:italic>a</ce:italic> implies <ce:italic>y</ce:italic> depends on <ce:italic>a</ce:italic> and <ce:italic>a</ce:italic> depends on <ce:italic>x</ce:italic> implies <ce:italic>a</ce:italic> depends on <ce:italic>y</ce:italic>.</ce:para><ce:para id="p0290" view="all">A <ce:italic>coherent cluster</ce:italic> is a coherent MDS contained within no other coherent MDS.</ce:para></ce:enunciation></ce:para><ce:para id="p0295" view="all">The slice-based instantiation of coherent cluster employs both backward <ce:italic>and</ce:italic> forward slices. The combination has the advantage that the entire cluster is both affected by the same set of vertices (as in the case of same-backward-slice clusters) and also affects the same set of vertices (as in the case of same-forward-slice clusters). In the slice-based instantiation, a set of vertices <ce:italic>V</ce:italic> forms a coherent MDS if</ce:para><ce:para id="p0300" view="all"><ce:display><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="tbl0050" frame="none" colsep="0" rowsep="0"><tgroup cols="2" align="center"><colspec colnum="1" colname="col1" colsep="0" align="left"/><colspec colnum="2" colname="col2" colsep="0" align="left"/><tbody><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">â<italic>x</italic>, <italic>y</italic><hsp sp="0.25"/>â<hsp sp="0.25"/><italic>V</italic><hsp sp="0.25"/>:<hsp sp="0.25"/><italic>x</italic><hsp sp="0.25"/>â<hsp sp="0.25"/><italic>BSlice</italic>(<italic>y</italic>)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left">the internal requirement of an MDS</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">â§<italic>a</italic><hsp sp="0.25"/>â<hsp sp="0.25"/><italic>BSlice</italic>(<italic>x</italic>)<hsp sp="0.25"/>â<hsp sp="0.25"/><italic>a</italic><hsp sp="0.25"/>â<hsp sp="0.25"/><italic>BSlice</italic>(<italic>y</italic>)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left"><italic>x</italic> and <italic>y</italic> depend on same external <italic>a</italic></entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col1" align="left">â§<italic>a</italic><hsp sp="0.25"/>â<hsp sp="0.25"/><italic>FSlice</italic>(<italic>x</italic>)<hsp sp="0.25"/>â<hsp sp="0.25"/><italic>a</italic><hsp sp="0.25"/>â<hsp sp="0.25"/><italic>FSlice</italic>(<italic>y</italic>)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" colname="col2" align="left"><italic>x</italic> and <italic>y</italic> impact on same external <italic>a</italic></entry></row></tbody></tgroup></ce:table></ce:display></ce:para><ce:para id="p0305" view="all">Because <ce:italic>x</ce:italic> and <ce:italic>y</ce:italic> are interchangeable</ce:para><ce:para id="p0310" view="all"><ce:display><ce:formula id="eq0005"><mml:math altimg="si9.gif" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mo>â</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>â</mml:mo><mml:mi>V</mml:mi><mml:mo>:</mml:mo></mml:mtd><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mi>x</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mi>y</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></ce:formula></ce:display>This is equivalent to</ce:para><ce:para id="p0315" view="all"><ce:display><ce:formula id="eq0010"><mml:math altimg="si10.gif" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mo>â</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>â</mml:mo><mml:mi>V</mml:mi><mml:mo>:</mml:mo></mml:mtd><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mi>x</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â§</mml:mo><mml:mi>y</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mo>â§</mml:mo><mml:mtext> </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>a</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></ce:formula></ce:display>which simplifies to</ce:para><ce:para id="p0320" view="all"><ce:display><ce:formula id="eq0015"><mml:math altimg="si11.gif" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mo>â</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>y</mml:mi><mml:mo>â</mml:mo><mml:mi>V</mml:mi><mml:mo>:</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â§</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></ce:formula></ce:display>and can be used to define coherent-slice MDS and clusters:</ce:para><ce:para id="p0325" view="all"><ce:enunciation id="enun0025"><ce:label>Definition 2.5</ce:label><ce:section-title id="sect0070">Coherent-slice MDS and cluster (<ce:cross-ref id="crf0235" refid="bib0165">Islam et al., 2010b</ce:cross-ref>)</ce:section-title><ce:para id="p0330" view="all">A <ce:italic>coherent-slice MDS</ce:italic> is a set of SDG vertices, <ce:italic>V</ce:italic>, such that</ce:para><ce:para id="p0335" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>)<ce:hsp sp="0.25"/>â§<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>y</ce:italic>)</ce:para><ce:para id="p0340" view="all">A <ce:italic>coherent-slice cluster</ce:italic> is a coherent-slice MDS contained within no other coherent-slice MDS.</ce:para></ce:enunciation></ce:para><ce:para id="p0345" view="all">At first glance the use of both backward and forward slices might seem redundant because <ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>)<ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>). This is true up to a point: for the internal requirement of a coherent-slice cluster, the use of either <ce:sans-serif>BSlice</ce:sans-serif> or <ce:sans-serif>FSlice</ce:sans-serif> would suffice. However, the two are not redundant when it comes to the external requirements of a coherent-slice cluster. With a mutually-dependent cluster (<ce:cross-ref id="crf0240" refid="enun0005">Definition 2.1</ce:cross-ref>), it is possible for two vertices within the cluster to influence or be affected by different vertices <ce:italic>external</ce:italic> to the cluster. Neither is allowed with a coherent-slice cluster. To ensure that both external effects are captured, both backward and forward slices are required for coherent-slice clusters.</ce:para><ce:para id="p0350" view="all">In <ce:cross-ref id="crf0245" refid="fig0010">Fig. 2</ce:cross-ref> the set of vertices {<ce:sans-serif>a, c</ce:sans-serif>} form a coherent cluster as both these vertices have exactly the same backward and forward slices. That is, they share identical intra- and extra-cluster dependencies. Coherent clusters are therefore a stricter from of same-slice clusters, all coherent clusters are also same-slice MDS but not necessarily maximal. It is worth noting that same-slice clusters partially share extra-cluster dependency. For example, each of the vertices in the same-backward-slice cluster {<ce:sans-serif>a, b, c</ce:sans-serif>} is dependent on the same set of external statements, but do not influence the same set of external statements.</ce:para><ce:para id="p0355" view="all">Coherent slice-clusters have an important property: If a slice contains a vertex of a coherent slice-cluster <ce:italic>V</ce:italic>, it will contain all vertices of the cluster:</ce:para><ce:para id="p0360" view="all"><ce:display><ce:formula id="eq0020"><ce:label>(1)</ce:label><mml:math altimg="si12.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â©</mml:mo><mml:mi>V</mml:mi><mml:mo>â </mml:mo><mml:mo>â</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â©</mml:mo><mml:mi>V</mml:mi><mml:mo>=</mml:mo><mml:mi>V</mml:mi></mml:math></ce:formula></ce:display>This holds because:</ce:para><ce:para id="p0365" view="all"><ce:display><ce:formula id="eq0025"><mml:math altimg="si13.gif" overflow="scroll"><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mo>â</mml:mo><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mi>y</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>â</mml:mo><mml:mi>V</mml:mi></mml:mtd><mml:mtd columnalign="center"><mml:mo>:</mml:mo></mml:mtd><mml:mtd columnalign="left"><mml:mi>y</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:mi>x</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="right"/><mml:mtd columnalign="center"/><mml:mtd columnalign="left"><mml:mtext> â</mml:mtext><mml:mi>x</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">FSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mi>y</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mtext> </mml:mtext><mml:mtext> â</mml:mtext><mml:mtext> </mml:mtext><mml:msup><mml:mi>y</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">BSlice</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></ce:formula></ce:display>The same argument clearly holds for forward slices. However, the same is not true for non-coherent clusters. For example, in the case of a same-backward-slice cluster, a vertex contained within the forward slice of any vertex of the cluster is not guaranteed to be in the forward slice of other vertices of the same cluster.</ce:para></ce:section><ce:section id="sec0035" view="all"><ce:label>2.5</ce:label><ce:section-title id="sect0075">Hash based coherent slice clusters</ce:section-title><ce:para id="p0370" view="all">The computation of coherent-slice clusters (<ce:cross-ref id="crf0250" refid="enun0025">Definition 2.5</ce:cross-ref>) grows prohibitively expensive even for mid-sized programs where tens of gigabytes of memory are required to store the set of all possible backward and forward slices. The computation is cubic in time and quadratic in space. An approximation is employed to reduce the computation time and memory requirement. This approximation replaces comparison of slices with comparison of hash values, where hash values are used to summarize slice content. The result is the following approximation to coherent-slice clusters in which <ce:sans-serif>H</ce:sans-serif> denotes a hash function.</ce:para><ce:para id="p0375" view="all"><ce:enunciation id="enun0030"><ce:label>Definition 2.6</ce:label><ce:section-title id="sect0080">Hash-based coherent-slice MDS and cluster (<ce:cross-ref id="crf0255" refid="bib0165">Islam et al., 2010b</ce:cross-ref>)</ce:section-title><ce:para id="p0380" view="all">A <ce:italic>hash-based coherent-slice MDS</ce:italic> is a set of SDG vertices, <ce:italic>V</ce:italic>, such that</ce:para><ce:para id="p0385" view="all">â<ce:italic>x</ce:italic>, <ce:italic>y</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>H</ce:italic>(<ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>))<ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>H</ce:italic>(<ce:italic>BSlice</ce:italic>(<ce:italic>y</ce:italic>))<ce:hsp sp="0.25"/>â§<ce:hsp sp="0.25"/><ce:italic>H</ce:italic>(<ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>))<ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>H</ce:italic>(<ce:italic>FSlice</ce:italic>(<ce:italic>y</ce:italic>))</ce:para><ce:para id="p0390" view="all">A <ce:italic>hash-based coherent-slice cluster</ce:italic> is a hash-based coherent-slice MDS contained within no other hash-based coherent-slice MDS.</ce:para></ce:enunciation></ce:para><ce:para id="p0395" view="all">A description of the hash function <ce:italic>H</ce:italic> along with the evaluation of its precision is presented in <ce:cross-ref id="crf0260" refid="sec0060">Section 3.3</ce:cross-ref>. From here on, the paper considers only hash-based coherent-slice clusters unless explicitly stated otherwise. Thus, for ease of reading, a hash-based coherent-slice cluster is referred to simply as a <ce:italic>coherent cluster</ce:italic>.</ce:para></ce:section><ce:section id="sec0040" view="all"><ce:label>2.6</ce:label><ce:section-title id="sect0085">Graph based cluster visualization</ce:section-title><ce:para id="p0400" view="all">This section describes two graph-based visualizations for dependence clusters. The first visualization, the <ce:italic>Monotone Slice-size Graph</ce:italic> (MSG) (<ce:cross-ref id="crf0265" refid="bib0065">Binkley and Harman, 2005</ce:cross-ref>), plots a landscape of monotonically increasing slice sizes where the <ce:italic>y</ce:italic>-axis shows the size of each slice, as a percentage of the entire program, and the <ce:italic>x</ce:italic>-axis shows each slice, in monotonically increasing order of slice size. In an MSG, a dependence cluster appears as a sheer-drop cliff face followed by a plateau. The visualization assists with the inherently subjective task of deciding whether a cluster is large (how long is the plateau at the top of the cliff face relative to the surrounding landscape?) and whether it denotes a discontinuity in the dependence profile (how steep is the cliff face relative to the surrounding landscape?). An MSG drawn using backward slice sizes is referred to as a backward-slice MSG (B-MSG), and an MSG drawn using forward slice sizes is referred to as a forward-slice MSG (F-MSG).</ce:para><ce:para id="p0405" view="all">As an example, the open source calculator <ce:sans-serif>bc</ce:sans-serif> contains 9438 lines of code represented by 7538 SDG vertices. The B-MSG for <ce:sans-serif>bc</ce:sans-serif>, shown in <ce:cross-ref id="crf0270" refid="fig0015">Fig. 3</ce:cross-ref><ce:float-anchor refid="fig0015"/>a, contains a large plateau that spans almost 70% of the MSG. Under the assumption that same slice size implies the same slice, this indicates a large same-slice cluster. However, "zooming" in reveals that the cluster is actually composed of several smaller clusters made from slices of very similar size. The tolerance implicit in the visual resolution used to plot the MSG obscures this detail.</ce:para><ce:para id="p0410" view="all">The second visualization, the <ce:italic>Slice/Cluster Size Graph</ce:italic> (SCG) (<ce:cross-ref id="crf0275" refid="bib0165">Islam et al., 2010b</ce:cross-ref>), alleviates this issue by combining both slice and cluster sizes. It plots three landscapes, one of increasing slice sizes, one of the corresponding same-slice cluster sizes, and the third of the corresponding coherent cluster sizes. In the SCG, vertices are ordered along the <ce:italic>x</ce:italic>-axis using three values, primarily according to their slice size, secondarily according to their same-slice cluster size, and finally according to the coherent cluster size. Three values are plotted on the <ce:italic>y</ce:italic>-axis: slice sizes form the first landscape, and cluster sizes form the second and third. Thus, SCGs not only show the sizes of the slices and the clusters, they also show the relation between them and thus bring to light interesting links. Two variants of the SCG are considered: the backward-slice SCG (B-SCG) is built from the sizes of backward slices, same-backward-slice clusters, and coherent clusters, while the forward-slice SCG (F-SCG) is built from the sizes of forward slices, same-forward-slice clusters, and coherent clusters. Note that both backward and forward SCGs use the same coherent cluster sizes.</ce:para><ce:para id="p0415" view="all">The B-SCG and F-SCG for the program <ce:sans-serif>bc</ce:sans-serif> are shown in <ce:cross-ref id="crf0280" refid="fig0020">Fig. 4</ce:cross-ref><ce:float-anchor refid="fig0020"/>. In both graphs the slice size landscape is plotted using a solid blackline, the same-slice cluster size landscape using a gray line, and the coherent cluster size landscape using a (red) broken line. The B-SCG (<ce:cross-ref id="crf0285" refid="fig0020">Fig. 4</ce:cross-ref>a) shows that <ce:sans-serif>bc</ce:sans-serif> contains two large same-backward-slice clusters consisting of around 55% and 15% of the program. Surprisingly, the larger same-backward-slice cluster is composed of smaller slices than the smaller same-backward-slice cluster; thus, the smaller cluster has a bigger impact (slice size) than the larger cluster. In addition, the presence of three coherent clusters spanning approximately 15%, 20% and 30% of the program's statements can also be seen.</ce:para><ce:para id="p8720" view="all"><ce:cross-ref id="crf0290" refid="fig0015">Fig. 3</ce:cross-ref>c shows two box plots depicting the distribution of (backward and forward) slice sizes for <ce:sans-serif>bc</ce:sans-serif>. The average size of the slices is also displayed in the box plot using a solid square box. Comparing the box plot information to the information provided by the MSGs, we can see that all the information available from the box plots can be derived from the MSGs itself (except for the average). However, MSGs show a landscape (slice profile) which cannot be obtained from the box plots. Similarly, the box plots in <ce:cross-ref id="crf0295" refid="fig0020">Fig. 4</ce:cross-ref>c show the size distributions of the various clusters (i.e. a vertex is in a cluster of size <ce:italic>x</ce:italic>) in addition to the slice size distributions. Although the information from these box plots can not be derived from the SCGs shown in <ce:cross-ref id="crf0300" refid="fig0020">Fig. 4</ce:cross-ref>a and b directly, the profiles (landscapes) give a better intuition about the clusters, the number of major clusters and their sizes. For our empirical study we use the size of individual clusters and the cluster profile to find mappings between the clusters and program components. Therefore, we drop box plots in favor of SCGs to show the cluster profile and provide additional statistics in tabular format where required.</ce:para></ce:section></ce:section><ce:section id="sec0045" view="all"><ce:label>3</ce:label><ce:section-title id="sect0090">Empirical evaluation</ce:section-title><ce:para id="p9410" view="all">This section presents the empirical evaluation into the existence and impact of coherent dependence clusters. The section first discusses the experimental setup and the subject programs included in the study. It then presents two validation studies, the first considers the effect of pointer analysis precision and the second considers the validity of hashing in efficient cluster identification. The section then quantitatively considers the existence of coherent dependence clusters and identifies patterns of clustering within the programs. This is followed by a series of four case studies, where qualitative analysis, aided by the <ce:italic>decluvi</ce:italic><ce:hsp sp="0.25"/> cluster visualization tool (<ce:cross-ref id="crf9275" refid="bib0160">Islam et al., 2010a</ce:cross-ref>), highlight how knowledge of clusters can aid a software engineer. The section then presents studies on inter-cluster dependence, and the relationship of program faults and system evolution to coherent clusters. Finally, threats to validity are considered.</ce:para><ce:para id="p8815" view="all">To formalize the goals of this section, the empirical evaluation addresses the following research questions:<ce:list id="list0005"><ce:list-item id="listitem0005"><ce:label><ce:bold><ce:italic>RQ1</ce:italic></ce:bold></ce:label><ce:para id="p0420" view="all">What is the effect of pointer analysis precision on coherent clusters?</ce:para></ce:list-item><ce:list-item id="listitem0010"><ce:label><ce:bold><ce:italic>RQ2</ce:italic></ce:bold></ce:label><ce:para id="p0425" view="all">How precise is hashing as a proxy for comparing slices?</ce:para></ce:list-item><ce:list-item id="listitem0015"><ce:label><ce:bold><ce:italic>RQ3</ce:italic></ce:bold></ce:label><ce:para id="p0430" view="all">How large are the coherent clusters that exist in production source code and which patterns of clustering can be identified?</ce:para></ce:list-item><ce:list-item id="listitem0020"><ce:label><ce:bold><ce:italic>RQ4</ce:italic></ce:bold></ce:label><ce:para id="p0435" view="all">Which structures within a program can coherent cluster analysis reveal?</ce:para></ce:list-item><ce:list-item id="listitem0025"><ce:label><ce:bold><ce:italic>RQ5</ce:italic></ce:bold></ce:label><ce:para id="p0440" view="all">What are the implications of inter-cluster dependence between coherent clusters?</ce:para></ce:list-item><ce:list-item id="listitem0030"><ce:label><ce:bold><ce:italic>RQ6</ce:italic></ce:bold></ce:label><ce:para id="p0445" view="all">How do program faults relate to coherent clusters?</ce:para></ce:list-item><ce:list-item id="listitem0035"><ce:label><ce:bold><ce:italic>RQ7</ce:italic></ce:bold></ce:label><ce:para id="p0450" view="all">How stable are coherent clusters during system evolution?</ce:para></ce:list-item></ce:list></ce:para><ce:para id="p0455" view="all">The first two research questions provide empirical verification for the results subsequently presented. <ce:italic>RQ1</ce:italic> establishes the impact of pointer analysis on the clustering, whereas <ce:italic>RQ2</ce:italic> establishes that the hash function used to approximate a slice is sufficiently precise. If the static slices produced by the slicer are overly conservative or if the slice approximation is not sufficiently precise, then the results presented will not be reliable. Fortunately, the results provide confidence that the slice precision and hashing accuracy are sufficient.</ce:para><ce:para id="p0460" view="all">Whereas <ce:italic>RQ1</ce:italic> and <ce:italic>RQ2</ce:italic> focus on the veracity of our approach, <ce:italic>RQ3</ce:italic> investigates the validity of the study; if large coherent clusters are not prevalent, then they would not be worthy of further study. We place very specific and demanding constraints on a set of vertices for it to be deemed a coherent cluster. If such clusters are not common then their study would be merely an academic exercise. Conversely, if the clustering is similar for every program then it is unlikely that cluster identification will reveal interesting information about programs. Our findings reveal that, despite the tight constraints inherent in the definition of a coherent dependence cluster, they are, indeed, very common. Also, the cluster profiles for programs are sufficiently different and exhibit interesting patterns.</ce:para><ce:para id="p0465" view="all">These results motivate the remaining research questions. Having demonstrated that our technique is suitable for finding coherent clusters and that such clusters are sufficiently widespread to be worthy of study, we investigate specific coherent clusters in detail. <ce:italic>RQ4</ce:italic> studies the underlying logical structure of programs revealed by these clusters. <ce:italic>RQ5</ce:italic> looks explicitly at inter-cluster dependency and considers areas of software engineering where it may be of interest. <ce:italic>RQ6</ce:italic> presents a study of how program faults relate to coherent clusters, and, finally, <ce:italic>RQ7</ce:italic> studies the effect of system evolution on clustering.</ce:para><ce:section id="sec0050" view="all"><ce:label>3.1</ce:label><ce:section-title id="sect0095">Experimental subjects and setup</ce:section-title><ce:para id="p0470" view="all">The slices along with the mapping between the SDG vertices and the actual source code are extracted from the mature and widely used slicing tool CodeSurfer (<ce:cross-ref id="crf8880" refid="bib0020">Anderson and Teitelbaum, 2001</ce:cross-ref>) (version 2.1). The cluster visualizations were generated by <ce:italic>decluvi</ce:italic> (<ce:cross-ref id="crf8985" refid="bib0160">Islam et al., 2010a</ce:cross-ref>) using data extracted from CodeSurfer. The data is generated from slices taken with respect to <ce:italic>source-code representing</ce:italic> SDG vertices. This excludes pseudo vertices introduced into the SDG, e.g., to represent global variables which are modeled as additional pseudo parameters by CodeSurfer. Cluster sizes are also measured in terms of source-code representing SDG vertices, which is more consistent than using lines of code as it is not influenced by blank lines, comments, statements spanning multiple lines, multiple statements on one line, or compound statements. The <ce:italic>decluvi</ce:italic><ce:hsp sp="0.25"/> system along with scheme scripts for data acquisition and pre-compiled datasets for several open-source programs can be downloaded from <ce:inter-ref id="intr0005" xlink:href="http://www.cs.ucl.ac.uk/staff/s.islam/decluvi.html" xlink:type="simple">http://www.cs.ucl.ac.uk/staff/s.islam/decluvi.html</ce:inter-ref>.</ce:para><ce:para id="p0475" view="all">The study considers the 30 <ce:sans-serif>C</ce:sans-serif> programs shown in <ce:cross-ref id="crf3290" refid="tbl0005">Table 1</ce:cross-ref><ce:float-anchor refid="tbl0005"/>, which provides a brief description of each program alongside seven measures: number of files containing executable <ce:sans-serif>C</ce:sans-serif> code, LoC - lines of code (as counted by the Unix utility <ce:sans-serif>wc</ce:sans-serif>), SLoC - the non-comment non-blank lines of code (as counted by the utility <ce:sans-serif>sloccount</ce:sans-serif> (<ce:cross-ref id="crf3395" refid="bib0245">Wheeler, 2004</ce:cross-ref>)), ELoC - the number of source code lines that <ce:italic>CodeSurfer</ce:italic> considers to contain executable code, the number of SDG vertices, the number of SDG edges, the number of slices produced, and finally the size (as a percentage of the program's SDG vertex count) of the largest coherent cluster. All LoC metrics are calculated over source files that CodeSurfer considers to contain executable code and, for example, do not include header files.</ce:para><ce:para id="p0480" view="all">Columns 10 and 11 provide the runtimes recorded during the empirical study. The runtimes reported are wall clock times captured by the Unix <ce:sans-serif>time</ce:sans-serif> utility while running the experiments on a 64-bit Linux machine (CentOS 5) with eight Intel(R) Xeon(R) CPU E5450 @ 3.00<ce:hsp sp="0.25"/>GHz processors and 32<ce:hsp sp="0.25"/>GB of RAM. It should be noted that this machine acts as a group server and is accessed by multiple users. There were other CPU intensive processes intermittently running on the machine while these runtimes were collected, and thus the runtimes are only indicative. Column 10 shows the time needed to build the SDG and CodeSurfer project that is subsequently used for slicing. The build time for the projects were quite small and the longest build time (2m33.456s) was required for <ce:sans-serif>gcal</ce:sans-serif> with 46,827 SLoC. Column 11 shows the time needed for the clustering algorithm to perform the clustering and create all the data dumps for <ce:italic>decluvi</ce:italic><ce:hsp sp="0.25"/> to create cluster visualizations. The process completes in minutes for small programs and can take hours and longer for larger programs. It should be noted that the runtime includes both the slicing phase which runs in <ce:italic>O</ce:italic>(<ce:italic>ne</ce:italic>), where <ce:italic>n</ce:italic> is the number of SDG vertices and <ce:italic>e</ce:italic> is the number of edges, and the hashing and clustering algorithm which runs in <ce:italic>O</ce:italic>(<ce:italic>n</ce:italic><ce:sup loc="post">2</ce:sup>). Therefore the overall complexity is <ce:italic>O</ce:italic>(<ce:italic>ne</ce:italic>). The long runtime is mainly due to the current research prototype (which performs slicing, clustering and extraction of the data) using the Scheme interface of CodeSurfer in a pipeline architecture. In the future we plan to upgrade the tooling with optimizations for fast and massive slicing (<ce:cross-ref id="crf3400" refid="bib0080">Binkley et al., 2007</ce:cross-ref>) and to merge the clustering phase into the slicing to reduce the runtime significantly.</ce:para><ce:para id="p0485" view="all">Although the clustering and building the visualization data can take a long time for large projects, it is still useful because the clustering only needs to be done once (for example during a nightly build) and can then be visualised and reused as many times as needed. During further study of the visualization and the clustering we have also found that small changes to the system does not show a change in the clustering, therefore once the clustering is created it still remains viable through small code changes as the clustering is found to represent the core program architecture (<ce:cross-ref id="crf0305" refid="sec0110">Section 3.9</ce:cross-ref>). Furthermore, the number of SDG vertices and edges are quite large, in fact even for very small programs the number of SDG vertices is in the thousands with edge counts in the tens of thousands. Moreover, the analysis produces an is-in-the-slice-of relation and graph with even more edges. We have tried several clustering and visualization tools to cluster the is-in-the-slice-of graph for comparison, but most of the tools (such as Gephi <ce:cross-ref id="crf0310" refid="bib0030">Bastian et al., 2009</ce:cross-ref>) failed due to the large dataset. Other tools such as CCVisu (<ce:cross-ref id="crf0315" refid="bib0045">Beyer, 2008</ce:cross-ref>) which were able to handle the large data set simply produced a blob as a visualization which was not at all useful. The underlying problem is that the is-in-the-slice-of graph is dense and no traditional clustering can handle such dense graphs.</ce:para></ce:section><ce:section id="sec0055" view="all"><ce:label>3.2</ce:label><ce:section-title id="sect0100">Impact of pointer analysis precision</ce:section-title><ce:para id="p0490" view="all">Recall that the definition of a coherent dependence cluster is based on an underlying <ce:italic>depends-on</ce:italic> relation, which is approximated using program slicing. Pointer analysis plays a key role in the precision of slicing and the interplay between pointer analysis and downstream dependence analysis precision is complex (<ce:cross-ref id="crf0320" refid="bib0220">Shapiro and Horwitz, 1997</ce:cross-ref>). To understand how pointer analysis precision impacts the clustering of the programs we study the effect in this section.</ce:para><ce:para id="p0495" view="all">Usually, one would choose the pointer analysis with the highest precision but there may be situations where this is not possible and one has to revert to lower precision analysis. This section presents a study on the effect of various levels of pointer analysis precision on the size of slices and subsequently on coherent clusters. It addresses research question <ce:italic>RQ1: What is the effect of pointer analysis precision on coherent clusters?</ce:italic></ce:para><ce:para id="p0500" view="all">CodeSurfer provides three levels of pointer analysis precision (Low, Medium, and High) that provide increasingly precise points-to information at the expense of additional memory and analysis time. The Low setting uses a minimal pointer analysis that assumes every pointer may point to every object that has its address taken (variable or function). At the Medium and High settings, CodeSurfer performs extensive pointer analysis using the algorithm proposed by <ce:cross-ref id="crf0325" refid="bib0125">Fahndrich et al. (1998)</ce:cross-ref>, which implements a variant of Andersen's pointer analysis algorithm (<ce:cross-ref id="crf0330" refid="bib0015">Andersen, 1994</ce:cross-ref>) (this includes parameter aliasing). At the medium setting, fields of a structure are not distinguished while the High level distinguishes structure fields. The High setting should produce the most precise slices but requires more memory and time during SDG construction, which puts a functional limit on the size and complexity of the programs that can be handled by CodeSurfer. There is no automatic way to determine whether the slices are correct and precise. <ce:cross-ref id="crf0335" refid="bib0240">Weiser (1984)</ce:cross-ref> considers smaller slices to be better. Slice size is often used to measure the impact of the analysis' precision (<ce:cross-ref id="crf0340" refid="bib0220">Shapiro and Horwitz, 1997</ce:cross-ref>), similarly we also use slice size as a measure of precision.</ce:para><ce:para id="p0505" view="all">The study compares slice and cluster size for CodeSurfer's three precision options (Low, Medium, High) to study the impact of pointer analysis precision. The results are shown in <ce:cross-ref id="crf0345" refid="tbl0010">Table 2</ce:cross-ref><ce:float-anchor refid="tbl0010"/>. Column 1 lists the programs and the other columns present the average slice size, maximum slice size, average cluster size, and maximum cluster size, respectively, for each of the three precision settings. The results for average slice size deviation and largest cluster size deviation are visualized in <ce:cross-refs id="crfs0055" refid="fig0025 fig0030">Figs. 5 and 6</ce:cross-refs><ce:float-anchor refid="fig0025"/><ce:float-anchor refid="fig0030"/>. The graphs use the High setting as the base line and show the percentage deviation when using the Low and Medium settings.</ce:para><ce:para id="p0510" view="all"><ce:cross-ref id="crf0350" refid="fig0025">Fig. 5</ce:cross-ref> shows the average slice size deviation when using the lower two settings compared to the highest. On average, the Low setting produces slices that are 14% larger than the High setting. Program <ce:sans-serif>userv</ce:sans-serif> has the largest deviation of 37% when using the Low setting. For example, in <ce:sans-serif>userv</ce:sans-serif> the minimal pointer analysis fails to recognize that the function pointer <ce:sans-serif>oip</ce:sans-serif> can never point to functions <ce:sans-serif>sighandler_alrm</ce:sans-serif> and <ce:sans-serif>sighandler_child</ce:sans-serif> and includes them as called functions at call sites using <ce:sans-serif>*oip</ce:sans-serif>, increasing slice size significantly. In all 30 programs, the Low setting yields larger slices compared to the High setting.</ce:para><ce:para id="p0515" view="all">The Medium setting always yields smaller slices when compared to the Low setting. For eight programs, the medium setting produces the same average slice size as the High setting. For the remaining programs the Medium setting produces slices that are on average 4% larger than when using the High setting. The difference in slice size occurs because the Medium setting does not differentiate between structure fields, which the High setting does. The largest deviation is seen in <ce:sans-serif>findutils</ce:sans-serif> at 29%. With the medium setting, the structure fields (<ce:sans-serif>options, regex_map, stat_buf</ce:sans-serif> and <ce:sans-serif>state</ce:sans-serif>) of <ce:sans-serif>findutils</ce:sans-serif> are lumped together as if each structure were a scalar variable, resulting in larger, less precise, slices.</ce:para><ce:para id="p0520" view="all"><ce:cross-ref id="crf0355" refid="fig0030">Fig. 6</ce:cross-ref> visualizes the deviation of the largest coherent cluster size when using the lower two settings compared to the highest. The graph shows that the size of the largest coherent clusters found when using the lower settings is larger in most of the programs. On average there is a 22% increase in the size of the largest coherent cluster when using the Low setting and a 10% increase when using the Medium setting. In <ce:sans-serif>a2ps</ce:sans-serif> and <ce:sans-serif>cflow</ce:sans-serif> the size of the largest cluster increases over 100% when using the Medium setting and over 150% when using the Low setting. The increase in slice size is expected to result in larger clusters due to the loss of precision.</ce:para><ce:para id="p0525" view="all">The B-SCGs for <ce:sans-serif>a2ps</ce:sans-serif> for the three settings is shown in <ce:cross-ref id="crf0360" refid="fig0035">Fig. 7</ce:cross-ref><ce:float-anchor refid="fig0035"/>a. In the graphs it is seen that the slice sizes get smaller and have increased steps in the (black) landscape indicating that the slices become more precise. The red landscape shows that there is a large coherent cluster detected when using the Low setting running from approx. 60-80% on the <ce:italic>x</ce:italic>-axis. This cluster drops in size when using the Medium setting. At the High setting this coherent cluster breaks up into multiple smaller clusters. In this case, a drop in the cluster size also leads to breaking of the cluster in to multiple smaller clusters.</ce:para><ce:para id="p0530" view="all">In the SCGs for <ce:sans-serif>cflow</ce:sans-serif> (<ce:cross-ref id="crf0365" refid="fig0035">Fig. 7</ce:cross-ref>b) a similar drop in the slice size and cluster size is observed. However, unlike <ce:sans-serif>a2ps</ce:sans-serif> the large coherent cluster does not break into smaller clusters but only drops in size. The largest cluster when using the Low setting runs from 60% to 85% on the <ce:italic>x</ce:italic>-axis. This cluster reduces in size and shifts position running 30% to 45% <ce:italic>x</ce:italic>-axis when using the Medium setting. The cluster further drops in size down to 5% running 25-30% on the <ce:italic>x</ce:italic>-axis when using the High setting. In this case the largest cluster has a significant drop in size but does not break into multiple smaller clusters.</ce:para><ce:para id="p0535" view="all">Surprisingly, <ce:cross-ref id="crf0370" refid="fig0030">Fig. 6</ce:cross-ref> also shows seven programs where the largest coherent cluster size actually increases when using the highest pointer analysis setting on CodeSurfer. <ce:cross-ref id="crf0375" refid="fig0035">Fig. 7</ce:cross-ref>c shows the B-SCGs for <ce:sans-serif>acm</ce:sans-serif> which falls in this category. This counter-intuitive result is seen only when the more precise analysis determines that certain functions cannot be called and thus excludes them from the slice. Although in all such instances slices get smaller, the clusters may grow if the smaller slices match other slices already forming a cluster.</ce:para><ce:para id="p0540" view="all">For example, consider replacing function <ce:sans-serif>f6</ce:sans-serif> in <ce:cross-ref id="crf0380" refid="fig0005">Fig. 1</ce:cross-ref> with the code shown in <ce:cross-ref id="crf0385" refid="fig0040">Fig. 8</ce:cross-ref><ce:float-anchor refid="fig0040"/>, where <ce:sans-serif>f</ce:sans-serif> depends on a function call to a function referenced through the function pointer <ce:sans-serif>p</ce:sans-serif>. Assume that the highest precision pointer analysis determines that <ce:sans-serif>p</ce:sans-serif> does not point to <ce:sans-serif>f2</ce:sans-serif> and therefore there is no call to <ce:sans-serif>f2</ce:sans-serif> or any other function from <ce:sans-serif>f6</ce:sans-serif>. The higher precision analysis would therefore determine that the forward slices and backward slices of <ce:sans-serif>a, b</ce:sans-serif> and <ce:sans-serif>c</ce:sans-serif> are equal, hence grouping these three vertices in a coherent cluster. Whereas the lower precision is unable to determine that <ce:sans-serif>p</ce:sans-serif> cannot point to <ce:sans-serif>f2</ce:sans-serif>, the backward slice on <ce:sans-serif>f</ce:sans-serif> will conservatively include <ce:sans-serif>b</ce:sans-serif>. This will lead the higher precision analysis to determine that the set of vertices {<ce:sans-serif>a, b, c</ce:sans-serif>} is one coherent cluster whereas the lower precision analysis include only the set of vertices {<ce:sans-serif>a, c</ce:sans-serif>} in the same coherent cluster.</ce:para><ce:para id="p0545" view="all">Although we do not explicitly report the project build times on CodeSurfer and the clustering runtimes for the lower settings, it has been our experience that in the majority of the cases the build times for the lower settings were smaller. However, as lower pointer analysis settings yield large points-to sets and subsequently larger slices, the clustering runtimes were higher than when using the highest setting. Moreover, in some cases with the lower settings there was an explosive growth in summary edge generation which resulted in exceptionally high project build times and clustering runtimes.</ce:para><ce:para id="p0550" view="all">As an answer to <ce:italic>RQ1</ce:italic>, we find that in the majority of the cases the Medium and Low settings result in larger coherent clusters when compared to the High setting. For the remaining cases we have identified valid scenarios where more precise pointer analysis can result in larger coherent clusters. The results also confirm that a more precise pointer analysis leads to more precise (smaller) slices. Because it gives the most precise slices and most accurate clusters, the remainder of the paper uses the highest CodeSurfer pointer analysis setting.</ce:para></ce:section><ce:section id="sec0060" view="all"><ce:label>3.3</ce:label><ce:section-title id="sect0105">Validity of the hash function</ce:section-title><ce:para id="p0555" view="all">This section addresses research question <ce:italic>RQ2: How precise is hashing as a proxy for comparing slices?</ce:italic> The section first gives a brief description of the hash function and then validates the use of comparing slice hash values in lieu of comparing actual slice content.</ce:para><ce:para id="p0560" view="all">The use of hash values to represent slices reduces both the memory requirement and runtime, as it is no longer necessary to store or compare entire slices. The hash function, denoted <ce:sans-serif>H</ce:sans-serif> in <ce:cross-ref id="crf0390" refid="enun0030">Definition 2.6</ce:cross-ref>, uses XOR operations iteratively on the unique vertex IDs (of the SDG) which are included in a slice to generate a hash for the entire slice. We chose XOR as the hash operator because we do not have duplicate vertices in a slice and the order of the vertices in the slice does not matter.</ce:para><ce:para id="p0565" view="all">A slice <ce:italic>S</ce:italic> is a set of SDG vertices <mml:math altimg="si14.gif" overflow="scroll"><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>n</mml:mi></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:math> (<ce:italic>n</ce:italic><ce:hsp sp="0.25"/>â¥<ce:hsp sp="0.25"/>1) and <mml:math altimg="si15.gif" overflow="scroll"><mml:mi mathvariant="sans-serif">id</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> represents the unique vertex ID assigned by CodeSurfer to vertex <mml:math altimg="si16.gif" overflow="scroll"><mml:msub><mml:mi>v</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math>, where 1<ce:hsp sp="0.25"/>â¤<ce:hsp sp="0.25"/><ce:italic>i</ce:italic><ce:hsp sp="0.25"/>â¤<ce:hsp sp="0.25"/><ce:italic>n</ce:italic>. The hash function <ce:sans-serif>H</ce:sans-serif> for <ce:italic>S</ce:italic> is defined as <ce:italic>H</ce:italic><ce:inf loc="post"><ce:italic>S</ce:italic></ce:inf>, where</ce:para><ce:para id="p0570" view="all"><ce:display><ce:formula id="eq0030"><ce:label>(2)</ce:label><mml:math altimg="si17.gif" overflow="scroll"><mml:mrow><mml:msub><mml:mi>H</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:mrow><mml:mo>=</mml:mo><mml:msubsup><mml:mo>â</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>n</mml:mi></mml:msubsup><mml:mi mathvariant="sans-serif">id</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math></ce:formula></ce:display></ce:para><ce:para id="p0575" view="all">The remainder of this section presents a validation study of the hash function. The validation is needed to confirm that the hash values provide a sufficiently accurate summary of slices to support the correct partitioning of SDG vertices into coherent clusters. Ideally, the hash function would produce a unique hash value for each distinct slice. The validation study aims to find the number of unique slices for which the hash function successfully produces an unique hash value.</ce:para><ce:para id="p0580" view="all">For the validation study we chose 16 programs from the set of 30 subject programs. The largest programs were not included in the validation study to make the study time-manageable. Results are based on both the backward and forward slices for every vertex of these 16 programs. To present the notion of precision we introduce the following formalization. Let <ce:italic>V</ce:italic> be the set of all source-code representing SDG vertices for a given program <ce:italic>P</ce:italic> and <ce:italic>US</ce:italic> denote the number of <ce:italic>unique slices</ce:italic>: <ce:italic>US</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/>|{<ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic>}|<ce:hsp sp="0.25"/>+<ce:hsp sp="0.25"/>|{<ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic>}|. Note that if all vertices have the same backward slice then {<ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic>} is a singleton set. Finally, let <ce:italic>UH</ce:italic> be the number of <ce:italic>unique hash-values</ce:italic>, <ce:italic>UH</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/>|{<ce:italic>H</ce:italic>(<ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>))<ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic>}|<ce:hsp sp="0.25"/>+<ce:hsp sp="0.25"/>|{<ce:italic>H</ce:italic>(<ce:italic>FSlice</ce:italic>(<ce:italic>x</ce:italic>))<ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>V</ce:italic>}|.</ce:para><ce:para id="p0585" view="all">The accuracy of hash function <ce:sans-serif>H</ce:sans-serif> is given as Hashed Slice Precision, <ce:italic>HSP</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>UH/US</ce:italic><ce:hsp sp="0.25"/>. A precision of 1.00 (<ce:italic>US</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>UH</ce:italic>) means the hash function is 100% accurate (i.e., it produces a unique hash value for every distinct slice) whereas a precision of 1/<ce:italic>US</ce:italic> means that the hash function produces the same hash value for every slice leaving <ce:italic>UH</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/>1.</ce:para><ce:para id="p0590" view="all"><ce:cross-ref id="crf0395" refid="tbl0015">Table 3</ce:cross-ref><ce:float-anchor refid="tbl0015"/> summarizes the results. The first column lists the programs. The second and the third columns report the values of <ce:italic>US</ce:italic> and <ce:italic>UH</ce:italic> respectively. The fourth column reports <ce:italic>HSP</ce:italic>, the precision attained using hash values to compare slices. Considering all 78,587 unique slices the hash function produced unique hash values for 74,575 of them, resulting in an average precision of 94.97%. In other words, the hash function fails to produce unique hash values for just over 5% of the slices. Considering the precision of individual programs, five of the programs have a precision greater than 97%, while the lowest precision, for <ce:sans-serif>findutils</ce:sans-serif>, is 92.37%. This is, however, a significant improvement over previous use of slice size as the hash value, which is only 78.3% accurate in the strict case of <ce:italic>zero</ce:italic> tolerance for variation in slice contents (<ce:cross-ref id="crf0400" refid="bib0065">Binkley and Harman, 2005</ce:cross-ref>).</ce:para><ce:para id="p0595" view="all">Coherent cluster identification uses two hash values for each vertex (one for the backward slice and other for the forward slice) and the slice sizes. Slice size matching filters out some instances where the hash values happen to be the same by coincidence but the slices are different. The likelihood of both hash values matching those from another vertex with different slices is less than that of a single hash matching. Extending <ce:italic>US</ce:italic> and <ce:italic>UH</ce:italic> to clusters, columns 5 and 6 (<ce:cross-ref id="crf0405" refid="tbl0015">Table 3</ce:cross-ref>) report <ce:italic>CC</ce:italic>, the number of coherent clusters in a program and <ce:italic>HCC</ce:italic>, the number of coherent clusters found using hashing. The final column shows the precision attained using hashing to identify clusters, <ce:italic>HCP</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>HCC/CC</ce:italic>. The results show that of the 40,169 coherent clusters, 40,083 are uniquely identified using hashing, which yields a precision of 99.72%. Five of the programs show total agreement, furthermore for every program <ce:italic>HCP</ce:italic> is over 99%, except for <ce:sans-serif>userv</ce:sans-serif>, which has the lowest precision of 97.76%. This can be attributed to the large percentage (96%) of single vertex clusters in <ce:sans-serif>userv</ce:sans-serif>. The hash values for slices taken with respect to these single-vertex clusters have a higher potential for collision leading to a reduction in overall precision. In summary, as an answer to <ce:italic>RQ2</ce:italic>, the hash-based approximation is found to be sufficiently accurate at 94.97% for slices and at 99.72% for clusters (for the studied programs). Thus, comparing hash values can replace the need to compare actual slices.</ce:para></ce:section><ce:section id="sec0065" view="all"><ce:label>3.4</ce:label><ce:section-title id="sect0110">Do large coherent clusters occur in practice?</ce:section-title><ce:para id="p0600" view="all">Having demonstrated that hash function <ce:sans-serif>H</ce:sans-serif> can be used to effectively approximate slice contents, this section and the following section consider the validation research question, <ce:italic>RQ3: How large are coherent clusters that exist in production source code and which patterns of clustering can be identified?</ce:italic> The question is first answered quantitatively using the size of the largest coherent cluster in each program and then through visual analysis of the SCGs.</ce:para><ce:para id="p0605" view="all">To assess if a program includes a <ce:italic>large</ce:italic> coherent cluster, requires making a judgement concerning what threshold constitutes large. Following prior empirical work (<ce:cross-refs id="crfs0060" refid="bib0065 bib0150 bib0160 bib0165">Binkley and Harman, 2005; Harman et al., 2009; Islam et al., 2010a,b</ce:cross-refs>), a threshold of 10% is used. In other words, a program is said to contain a large coherent cluster if 10% of the program's SDG vertices produce the same backward slice as well as the same forward slice.</ce:para><ce:para id="p0610" view="all"><ce:cross-ref id="crf0410" refid="fig0045">Fig. 9</ce:cross-ref><ce:float-anchor refid="fig0045"/> shows the size of the largest coherent cluster found in each of the 30 subject programs. The programs are divided into 3 groups based on the size of the largest cluster present in the program.<ce:list id="list0010"><ce:list-item id="listitem0040"><ce:label><ce:bold>Small:</ce:bold></ce:label><ce:para id="p0615" view="all"><ce:italic>Small</ce:italic> consists of seven programs none of which have a coherent cluster constituting over 10% of the program vertices. These programs are <ce:sans-serif>archimedes, time, wdiff, byacc, a2ps, cflow</ce:sans-serif> and <ce:sans-serif>userv</ce:sans-serif>. Although it may be interesting to study why large clusters are not present in these programs, this paper focuses on studying the existence and implications of large coherent clusters.</ce:para></ce:list-item><ce:list-item id="listitem0045"><ce:label><ce:bold>Large:</ce:bold></ce:label><ce:para id="p0620" view="all">This group consists of programs that have at least one cluster with size 10% or larger. As there are programs containing much larger coherent clusters, a program is placed in this group if it has a large cluster between the size 10% and 50%. Over two-thirds of the programs studied fall in this category.</ce:para><ce:para id="p0625" view="all">The program at the bottom of this group (<ce:sans-serif>acct</ce:sans-serif>) has a coherent cluster of size 11% and the largest program in this group (<ce:sans-serif>copia</ce:sans-serif>) has a coherent cluster of size 48%. We present both these programs as case studies and discuss their clustering in detail in <ce:cross-refs id="crfs0065" refid="sec0080 sec0095">Sections 3.6.1 and 3.6.4</ce:cross-refs>, respectively. The program <ce:sans-serif>bc</ce:sans-serif> which has multiple large clusters with the largest of size 32% falls in the middle of this group and is also presented as a case study in <ce:cross-ref id="crf0415" refid="sec0090">Section 3.6.3</ce:cross-ref>.</ce:para></ce:list-item><ce:list-item id="listitem0050"><ce:label><ce:bold>Huge:</ce:bold></ce:label><ce:para id="p0630" view="all">The final group consists of programs that have a large coherent cluster whose size is over 50%. Out of the 30 programs 4 fall in this group. These programs are <ce:sans-serif>indent, ed</ce:sans-serif>, <ce:sans-serif>barcode</ce:sans-serif> and <ce:sans-serif>gcal</ce:sans-serif>. From this group, we present <ce:sans-serif>indent</ce:sans-serif> as a case study in <ce:cross-ref id="crf0420" refid="sec0085">Section 3.6.2</ce:cross-ref>.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="p0635" view="all">In summary all but 7 of the 30 subject programs contain a large coherent cluster. Therefore, over 75% of the subject programs contain a coherent cluster of size 10% or more. Furthermore, half the programs contain a coherent cluster of at least 20% in size. It is interesting to note that although this grouping is based only on the largest cluster, many of the programs contain multiple large coherent clusters. For example, <ce:sans-serif>ed, ctags, nano, less, bc, findutils, flex</ce:sans-serif> and <ce:sans-serif>garpd</ce:sans-serif> all have multiple large coherent clusters. It is also interesting to note that there is no correlation between a program's size (measured in SLoC) and the size of its largest coherent cluster. For example, in <ce:cross-ref id="crf0425" refid="tbl0005">Table 1</ce:cross-ref> two programs of very different sizes, <ce:sans-serif>cflow</ce:sans-serif> and <ce:sans-serif>userv</ce:sans-serif>, have similar largest-cluster sizes of 8% and 9%, respectively. Whereas programs <ce:sans-serif>acct</ce:sans-serif> and <ce:sans-serif>ed</ce:sans-serif>, of similar size, have very different largest coherent clusters of sizes 11% and 55%.</ce:para><ce:para id="p0640" view="all">Therefore as an answer to first part of <ce:italic>RQ3</ce:italic>, the study finds that 23 of the 30 programs studied have a large coherent cluster. Some programs also have a huge cluster covering over 50% of the program vertices. Furthermore, the choice of 10% as a threshold for classifying a cluster as large is a relatively conservative choice. Thus, the results presented in this section can be thought of as a lower bound to the existence question.</ce:para></ce:section><ce:section id="sec0070" view="all"><ce:label>3.5</ce:label><ce:section-title id="sect0115">Patterns of clustering</ce:section-title><ce:para id="p0645" view="all">This section presents a visual study of SCGs for the three program groups and addresses the second part of <ce:italic>RQ3</ce:italic>. <ce:cross-refs id="crfs0070" refid="fig0050 fig0055 fig0060">Figs. 10-12</ce:cross-refs><ce:float-anchor refid="fig0050"/><ce:float-anchor refid="fig0055"/><ce:float-anchor refid="fig0060"/> show graphs for the three categories. The graphs in the figures are laid out in ascending order based on the largest coherent cluster present in the program and thus follow the same order as seen in <ce:cross-ref id="crf0430" refid="fig0045">Fig. 9</ce:cross-ref>.</ce:para><ce:para id="p0650" view="all"><ce:cross-ref id="crf0435" refid="fig0050">Fig. 10</ce:cross-ref> shows SCGs for the seven programs of the <ce:italic>small</ce:italic> group. In the SCGs of the first three programs (<ce:sans-serif>archimedes, time</ce:sans-serif> and <ce:sans-serif>wdiff</ce:sans-serif>) only a small coherent cluster is visible in the red landscape. In the remaining four programs, the red landscape shows the presence of multiple small coherent clusters. It is very likely that, similar to the results of the case studies presented later, these clusters also depict logical constructs within each program.</ce:para><ce:para id="p0655" view="all"><ce:cross-ref id="crf0440" refid="fig0055">Fig. 11</ce:cross-ref> shows SCGs of the 19 programs that have at least one large, but not huge, coherent cluster. That is, each program has at least one coherent cluster covering 10-50% of the program. Most of the programs have multiple coherent clusters as is visible on the red landscape. Some of these have only one large cluster satisfying the definition of <ce:italic>large</ce:italic>, such as <ce:sans-serif>acct</ce:sans-serif>. The clustering of <ce:sans-serif>acct</ce:sans-serif> is discussed in further detail in <ce:cross-ref id="crf0445" refid="sec0080">Section 3.6.1</ce:cross-ref>. Most of the remaining programs are seen to have multiple large clusters such as <ce:sans-serif>bc</ce:sans-serif>, which is also discussed in further detail in <ce:cross-ref id="crf0450" refid="sec0090">Section 3.6.3</ce:cross-ref>. The presence of multiple large coherent cluster hints that the program consists of multiple functional components. In three of the programs (<ce:sans-serif>which, gnuedma</ce:sans-serif> and <ce:sans-serif>copia</ce:sans-serif>) the landscape is completely dominated by a single large coherent cluster. In <ce:sans-serif>which</ce:sans-serif> and <ce:sans-serif>gnuedma</ce:sans-serif> this cluster covers around 40% of the program vertices whereas in <ce:sans-serif>copia</ce:sans-serif> the cluster covers 50%. The presence of a single large dominating cluster points to a centralized functionality or structure being present in the program. <ce:sans-serif>Copia</ce:sans-serif> is presented as a case study in <ce:cross-ref id="crf0455" refid="sec0095">Section 3.6.4</ce:cross-ref> where its clustering is discussed in further detail.</ce:para><ce:para id="p0660" view="all">Finally, SCGs for the four programs that contain <ce:italic>huge</ce:italic> coherent clusters (covering over 50%) are found in <ce:cross-ref id="crf0460" refid="fig0060">Fig. 12</ce:cross-ref>. In all four landscapes there is a very large dominating cluster with other smaller clusters also being visible. This pattern supports the conjecture that the program has one central structure or functionality which consists of most of the program elements, but also has additional logical constructs that work in support of the central idea. <ce:sans-serif>Indent</ce:sans-serif> is one program that falls in this category and is discussed in further detail in <ce:cross-ref id="crf0465" refid="sec0085">Section 3.6.2</ce:cross-ref>.</ce:para><ce:para id="p0665" view="all">As an answer to second part of <ce:italic>RQ3</ce:italic>, the study finds that most programs contain multiple coherent clusters. Furthermore, the visual study reveals that a third of the programs have multiple large coherent clusters. Only three programs <ce:sans-serif>copia</ce:sans-serif>, <ce:sans-serif>gnuedma</ce:sans-serif>, and <ce:sans-serif>which</ce:sans-serif> show the presence of only a single (overwhelming) cluster covering most of the program. Having shown that coherent clusters are prevalent in programs and that most programs have multiple significant clusters, the next section presents a series of four case studies that looks at how program structures are represented by these clusters.</ce:para></ce:section><ce:section id="sec0075" view="all"><ce:label>3.6</ce:label><ce:section-title id="sect0120">Coherent cluster and program decomposition</ce:section-title><ce:para id="p0670" view="all">This section presents four case studies using <ce:sans-serif>acct, indent, bc</ce:sans-serif> and <ce:sans-serif>copia</ce:sans-serif>. The case studies form a major contribution of the paper and collectively address research question <ce:italic>RQ4: Which structures within a program can coherent cluster analysis reveal?</ce:italic> As coherent clusters consist of program vertices that are mutually inter-dependent and share extra-cluster properties we consider such vertices of the cluster to be tightly coupled. It is our conjecture that these clusters likely represent logical structures representing a high-level functional decomposition of systems. This study will therefore look at how coherent clusters map to logical structures of the program.</ce:para><ce:para id="p0675" view="all">The case studies have been chosen to represent the <ce:italic>large</ce:italic> and <ce:italic>huge</ce:italic> groups identified in the previous section. Three programs are taken from the <ce:italic>large</ce:italic> group as it consists of the majority of the programs and one from the <ce:italic>huge</ce:italic> group. Each of the three programs from the <ce:italic>large</ce:italic> group were chosen because it exhibits specific patterns. <ce:sans-serif>acct</ce:sans-serif> has multiple coherent clusters visible in its profile and has the smallest large cluster in the group, <ce:sans-serif>bc</ce:sans-serif> has multiple large coherent clusters, and <ce:sans-serif>copia</ce:sans-serif> has only a single large coherent cluster dominating the entire landscape.</ce:para><ce:section id="sec0080" view="all"><ce:label>3.6.1</ce:label><ce:section-title id="sect0125">Case study: acct</ce:section-title><ce:para id="p0680" view="all">The first of the series of case studies is <ce:sans-serif>acct</ce:sans-serif>, an open-source program used for monitoring and printing statistics about users and processes. The program <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> is one of the smaller programs with 2600 LoC and 1558 SLoC from which CodeSurfer produced 2834 slices. The program has seven <ce:sans-serif>C</ce:sans-serif> files, two of which, <ce:sans-serif>getopt.c</ce:sans-serif> and <ce:sans-serif>getopt1.c</ce:sans-serif>, contain only conditionally included functions. These functions provide support for command-line argument processing and are included if needed library code is missing.</ce:para><ce:para id="p0685" view="all"><ce:cross-ref id="crf0470" refid="tbl0020">Table 4</ce:cross-ref><ce:float-anchor refid="tbl0020"/> shows the statistics for the five largest clusters of <ce:sans-serif>acct</ce:sans-serif>. Column 1 gives the cluster number, where <ce:sans-serif>1</ce:sans-serif> is the largest and <ce:sans-serif>5</ce:sans-serif> is the 5th largest cluster measured using the number of vertices. Columns 2 and 3 show the size of the cluster as a percentage of the program's vertices and actual vertex count, as well as the line count. Columns 4 and 5 show the number of files and functions where the cluster is found. The cluster sizes range from 11.4% to 2.4%. These five clusters can be readily identified in the Heat-Map visualization (not shown) of <ce:italic>decluvi</ce:italic>. The rest of the clusters are very small (less than 2% or 30 vertices) in size and are thus of little interest.</ce:para><ce:para id="p0690" view="all">The B-SCG for <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> (row one of <ce:cross-ref id="crf0475" refid="fig0055">Fig. 11</ce:cross-ref>) shows the existence of these five coherent clusters along with other same-slice clusters. <ce:italic>Splitting</ce:italic> of the same-slice cluster is evident in the SCG. Splitting occurs when the vertices of a same-slice cluster become part of different coherent clusters. This happens when vertices have either the same backward slice or the same forward slice but <ce:italic>not</ce:italic> both. This is because either same-backward-slice or same-forward-slice clusters only capture one of the two external properties captured by coherent clusters (Eq. <ce:cross-ref id="crf0480" refid="eq0020">(1)</ce:cross-ref>). In <ce:sans-serif>acct</ce:sans-serif>'s B-SCG the vertices of the largest same-backward-slice cluster spanning the <ce:italic>x</ce:italic>-axis from 60% to 75% are not part of the same coherent cluster. This is because the vertices do not share the same forward slice which is also a requirement for coherent clusters. This phenomenon is common in the programs studied and is found in both same-backward-slice and same-forward-slice clusters. This is another reason why coherent clusters are often smaller in size then same-slice clusters.</ce:para><ce:para id="p0695" view="all"><ce:italic>Decluvi</ce:italic><ce:hsp sp="0.25"/> visualization (not shown) of <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> reveals that the largest cluster spans four files (<ce:sans-serif>file_rd.c</ce:sans-serif>, <ce:sans-serif>common.c</ce:sans-serif>, <ce:sans-serif>ac.c</ce:sans-serif>, and <ce:sans-serif>utmp_rd.c</ce:sans-serif>), the 2nd largest cluster spans only a single file (<ce:sans-serif>hashtab.c</ce:sans-serif>), the 3rd largest cluster spans three files (<ce:sans-serif>file_rd.c</ce:sans-serif>, <ce:sans-serif>ac.c</ce:sans-serif>, and <ce:sans-serif>hashtab.c</ce:sans-serif>), the 4th largest cluster spans two files (<ce:sans-serif>ac.c</ce:sans-serif> and <ce:sans-serif>hashtab.c</ce:sans-serif>), while the 5th largest cluster includes parts of <ce:sans-serif>ac.c</ce:sans-serif> only.</ce:para><ce:para id="p0700" view="all">The largest cluster of <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> is spread over six functions, <ce:sans-serif>log_in</ce:sans-serif>, <ce:sans-serif>log_out</ce:sans-serif>, <ce:sans-serif>file_open</ce:sans-serif>, <ce:sans-serif>file_reader_get_entry</ce:sans-serif>, <ce:sans-serif>bad_utmp_record</ce:sans-serif> and <ce:sans-serif>utmp_get_entry</ce:sans-serif>. These functions are responsible for <ce:italic>putting accounting records into the hash table</ce:italic> used by the program, <ce:italic>accessing user-defined files</ce:italic>, and <ce:italic>reading entries</ce:italic> from the file. Thus, the purpose of the code in this cluster is to track user login and logout events.</ce:para><ce:para id="p0705" view="all">The second largest cluster is spread over two functions <ce:sans-serif>hashtab_create</ce:sans-serif> and <ce:sans-serif>hashtab_resize</ce:sans-serif>. These functions are responsible for <ce:italic>creating fresh hash tables</ce:italic> and <ce:italic>resizing existing hash tables</ce:italic> when the number of entries becomes too large. The purpose of the code in this cluster is the memory management in support of the program's main data structure.</ce:para><ce:para id="p0710" view="all">The third largest cluster is spread over four functions: <ce:sans-serif>hashtab_set_value</ce:sans-serif>, <ce:sans-serif>log_everyone_out</ce:sans-serif>, <ce:sans-serif>update_user_time</ce:sans-serif>, and <ce:sans-serif>hashtab_create</ce:sans-serif>. These functions are responsible for <ce:italic>setting values of an entry</ce:italic>, <ce:italic>updating all the statistics</ce:italic> for users, and <ce:italic>resetting the tables</ce:italic>. The purpose of the code from this cluster is the modification of the user accounting data.</ce:para><ce:para id="p0715" view="all">The fourth cluster is spread over three functions: <ce:sans-serif>hashtab_delete</ce:sans-serif>, <ce:sans-serif>do_statistics</ce:sans-serif>, and <ce:sans-serif>hashtab_find</ce:sans-serif>. These functions are responsible for <ce:italic>removing entries</ce:italic> from the hash table, <ce:italic>printing out statistics</ce:italic> for users and <ce:italic>finding entries</ce:italic> in the hash table. The purpose of the code from this cluster is maintaining user accounting data and printing results.</ce:para><ce:para id="p0720" view="all">The fifth cluster is contained within the function <ce:sans-serif>main</ce:sans-serif>. This cluster is formed due to the use of a while loop containing various cases based on input to the program. Because of the conservative nature of static analysis, all the code within the loop is part of the same cluster.</ce:para><ce:para id="p0725" view="all">Finally, it is interesting to note that functions from the same file or with similar names do not necessarily belong to the same cluster. Intuitively, it can be presumed that functions that have similar names or prefixes work together to provide some common functionality. In this case, six functions that have the same common prefix "<ce:sans-serif>hashtab</ce:sans-serif>" all perform operations on the hash table. However, these six functions are not part of the same cluster. Instead the functions that work together to provide a particular functionality are found in the same cluster. The clusters help identify functionality which is not obvious from the name of program artefacts such as functions and files. As an answer to RQ4, we find that in this case study each of the top five clusters maps to specific logical functionality.</ce:para></ce:section><ce:section id="sec0085" view="all"><ce:label>3.6.2</ce:label><ce:section-title id="sect0130">Case study: <ce:sans-serif>indent</ce:sans-serif></ce:section-title><ce:para id="p0730" view="all">The next case study uses <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> to further support the answer found for <ce:italic>RQ4</ce:italic> in the <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> case study. The characteristics of <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> are very different from those of <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> as <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> has a very large dominant coherent cluster (52%) whereas <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/> has multiple smaller clusters with the largest being 11%. We include <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> as a case study to ensure that the answer for <ce:italic>RQ4</ce:italic> is derived from programs with different cluster profiles and sizes giving confidence as to the generality of the answer.</ce:para><ce:para id="p0735" view="all"><ce:sans-serif>Indent</ce:sans-serif><ce:hsp sp="0.25"/> is a Unix utility used to format <ce:sans-serif>C</ce:sans-serif> source code. It consists of 6978 LoC with 7543 vertices in the SDG produced by CodeSurfer. <ce:cross-ref id="crf0485" refid="tbl0025">Table 5</ce:cross-ref><ce:float-anchor refid="tbl0025"/> shows statistics of the five largest clusters found in the program.</ce:para><ce:para id="p0740" view="all"><ce:sans-serif>Indent</ce:sans-serif><ce:hsp sp="0.25"/> has one extremely large coherent cluster that spans 52.1% of the program's vertices. The cluster is formed of vertices from 54 functions spread over 7 source files. This cluster captures most of the logical functionalities of the program. Out of the 54 functions, 26 begin with the common prefix of "<ce:sans-serif>handle_token</ce:sans-serif>". These 26 functions are individually responsible for handling a specific token during the formatting process. For example, <ce:sans-serif>handle_token_colon</ce:sans-serif>, <ce:sans-serif>handle_token_comma</ce:sans-serif>, <ce:sans-serif>handle_token_comment</ce:sans-serif>, and <ce:sans-serif>handle_token_lbrace</ce:sans-serif> are responsible for handling the colon, comma, comment, and left brace tokens, respectively.</ce:para><ce:para id="p0745" view="all">This cluster also includes multiple handler functions that check the size of the code and labels being handled, such as <ce:sans-serif>check_code_size</ce:sans-serif> and <ce:sans-serif>check_lab_size</ce:sans-serif>. Others, such as <ce:sans-serif>search_brace, sw_buffer, print_comment</ce:sans-serif>, and <ce:sans-serif>reduce</ce:sans-serif>, help with tracking braces and comments in code. The cluster also spans the main loop of <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> (<ce:sans-serif>indent_main_loop</ce:sans-serif>) that repeatedly calls the parser function <ce:sans-serif>parse</ce:sans-serif>.</ce:para><ce:para id="p0750" view="all">Finally, the cluster consists of code for outputting formatted lines such as the functions <ce:sans-serif>better_break, computer_code_target, dump_line, dump_line_code, dump_line_label, inhibit_indenting, is_comment_start, output_line_length</ce:sans-serif> and <ce:sans-serif>slip_horiz_space</ce:sans-serif>, and ones that perform flag and memory management (<ce:sans-serif>clear_buf_break_list, fill_buffer</ce:sans-serif> and <ce:sans-serif>set_priority</ce:sans-serif>).</ce:para><ce:para id="p0755" view="all">Cluster 1 therefore consists of the main functionality of this program and provides support for <ce:italic>parsing, handling tokens, associated memory management</ce:italic>, and <ce:italic>output</ce:italic>. The parsing, handling of individual tokens and associated memory management are highly inter-twined. For example, the handling of each individual token is dictated by operations of <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> and closely depends on the parsing. This code cannot easily be decoupled and, for example, reused. Similarly the memory management code is specific to the data structures used by <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> resulting in these many logical constructs to become part of the same cluster.</ce:para><ce:para id="p0760" view="all">The second largest coherent cluster consists of 7 functions from 3 source files. These functions handle the arguments and parameters passed to <ce:sans-serif>indent</ce:sans-serif>. For example, <ce:sans-serif>set_option</ce:sans-serif> and <ce:sans-serif>option_prefix</ce:sans-serif> along with the helper function <ce:sans-serif>eqin</ce:sans-serif> to check and verify that the options or parameters passed to <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> are valid. When options are specified without the required arguments, the function <ce:sans-serif>arg_missing</ce:sans-serif> produces an error message by invoking <ce:sans-serif>usage</ce:sans-serif> followed by a call to <ce:sans-serif>DieError</ce:sans-serif> to terminate the program.</ce:para><ce:para id="p0765" view="all">Clusters 3-5 are less than 3% of the program and are too small to warrant a detailed discussion. Cluster 3 includes 6 functions that generate numbered/un-numbered backup for subject files. Cluster 4 has functions for reading and ignoring comments. Cluster 5 consists of a single function that reinitializes the parser and associated data structures.</ce:para><ce:para id="p0770" view="all">The case study of <ce:sans-serif>indent</ce:sans-serif><ce:hsp sp="0.25"/> further illustrates that coherent clusters can capture the program's logical structure as an answer to research question <ce:italic>RQ4</ce:italic>. However, in cases such as this where the internal functionality is tightly knit, a single large coherent cluster maps to the program's core functionality.</ce:para></ce:section><ce:section id="sec0090" view="all"><ce:label>3.6.3</ce:label><ce:section-title id="sect0135">Case study: bc</ce:section-title><ce:para id="p0775" view="all">The third case study in this series is <ce:sans-serif>bc</ce:sans-serif>, an open-source calculator, which consists of 9438 LoC and 5450 SLoC. The program has nine <ce:sans-serif>C</ce:sans-serif> files from which CodeSurfer produced 15,076 slices (backward and forward).</ce:para><ce:para id="p0780" view="all">Analyzing <ce:sans-serif>bc</ce:sans-serif>'s SCG (row 3, <ce:cross-ref id="crf0490" refid="fig0055">Fig. 11</ce:cross-ref>), two interesting observations can be made. First, <ce:sans-serif>bc</ce:sans-serif><ce:hsp sp="0.25"/> contains two large same-backward-slice clusters visible in the light gray landscapes as opposed to the three large coherent clusters. Second, looking at the B-SCG, it can be seen that the <ce:italic>x</ce:italic>-axis range spanned by the largest same-backward-slice cluster is occupied by the top two coherent clusters shown in the dashed red (dark gray) landscape. This indicates that the same-backward-slice cluster splits into the two coherent clusters.</ce:para><ce:para id="p0785" view="all">The statistics for <ce:sans-serif>bc</ce:sans-serif>'s top five clusters are given in <ce:cross-ref id="crf0495" refid="tbl0030">Table 6</ce:cross-ref><ce:float-anchor refid="tbl0030"/>. Sizes of these five clusters range from 32.3% through to 1.4% of the program. Clusters six onwards are less than 1% of the program. The Project View (<ce:cross-ref id="crf0500" refid="fig0065">Fig. 13</ce:cross-ref><ce:float-anchor refid="fig0065"/>) shows their distribution over the source files.</ce:para><ce:para id="p0790" view="all">In more detail, Cluster 1 spans all of <ce:sans-serif>bc</ce:sans-serif>'s files except for <ce:sans-serif>scan.c</ce:sans-serif> and <ce:sans-serif>bc.c</ce:sans-serif>. This cluster encompasses the core functionality of the program - <ce:italic>loading and handling of equations, converting to</ce:italic> <ce:sans-serif>bc</ce:sans-serif>'s <ce:italic>own number format, performing calculations</ce:italic>, and <ce:italic>accumulating results.</ce:italic> Cluster 2 spans five files, <ce:sans-serif>util.c, execute.c, main.c, scan.c,</ce:sans-serif> and <ce:sans-serif>bc.c</ce:sans-serif>. The majority of the cluster is distributed over the latter two files. Even more interestingly, the source code of these two files (<ce:sans-serif>scan.c</ce:sans-serif> and <ce:sans-serif>bc.c</ce:sans-serif>) map only to Cluster 2 and none of the other top five clusters. This indicates a clear purpose to the code in these files. These two files are solely used for <ce:italic>lexical analysis</ce:italic> and <ce:italic>parsing</ce:italic> of equations. To aid in this task, some utility functions from <ce:sans-serif>util.c</ce:sans-serif> are employed. Only five lines of code in <ce:sans-serif>execute.c</ce:sans-serif> are also part of Cluster 2 and are used for <ce:italic>flushing output</ce:italic> and <ce:italic>clearing interrupt signals.</ce:italic> The third cluster is completely contained within the file <ce:sans-serif>number.c</ce:sans-serif>. It encompasses functions such as <ce:sans-serif>_bc_do_sub, _bc_init_num, _bc_do_compare, _bc_do_add, _bc_simp_mul, _bc_shift_addsub,</ce:sans-serif> and <ce:sans-serif>_bc_rm_leading_zeros</ce:sans-serif>, which are responsible for <ce:italic>initializing</ce:italic> <ce:sans-serif>bc</ce:sans-serif>'s <ce:italic>number formatter, performing comparisons, modulo</ce:italic> and other <ce:italic>arithmetic operations.</ce:italic> Clusters 4 and 5 are also completely contained within <ce:sans-serif>number.c</ce:sans-serif>. These clusters encompass functions to perform <ce:italic>bcd operations for base ten numbers</ce:italic> and <ce:italic>arithmetic division</ce:italic>, respectively.</ce:para><ce:para id="p0795" view="all">As an answer to <ce:italic>RQ4</ce:italic>, the results of the cluster visualizations for <ce:sans-serif>bc</ce:sans-serif><ce:hsp sp="0.25"/> reveal its high-level structure. This aids an engineer in understanding how the artifacts (e.g., functions and files) of the program interact, thus aiding in program comprehension. The remainder of this subsection illustrates a side-effect of <ce:italic>decluvi</ce:italic>'s<ce:hsp sp="0.25"/> multi-level visualization, how it can help find potential problems with the structure of a program.</ce:para><ce:para id="p0800" view="all"><ce:sans-serif>Util.c</ce:sans-serif> consists of small utility functions called from various parts of the program. This file contains code from Clusters 1 and 2 (<ce:cross-ref id="crf0505" refid="fig0065">Fig. 13</ce:cross-ref>). Five of the utility functions belong with Cluster 1, while six belong with Cluster 2. Furthermore, <ce:cross-ref id="crf0510" refid="fig0070">Fig. 14</ce:cross-ref><ce:float-anchor refid="fig0070"/> shows that the distribution of the two clusters in red (dark gray) and blue (medium gray) within the file are well separated. Both clusters do not occur together inside any function with the exception of <ce:sans-serif>init_gen</ce:sans-serif> (highlighted by the rectangle in first column of <ce:cross-ref id="crf0515" refid="fig0070">Fig. 14</ce:cross-ref>). The other functions of <ce:sans-serif>util.c</ce:sans-serif> thus belong to either Cluster 1 or Cluster 2. Separating these utility functions into two separate source files where each file is dedicated to functions belonging to a single cluster would improve the code's logical separation and file-level cohesion. This would make the code easier to understand and maintain at the expense of a very simple refactoring. In general, this example illustrates how <ce:italic>decluvi</ce:italic><ce:hsp sp="0.25"/> visualization can provide an indicator of potential points of code degradation during evolution.</ce:para><ce:para id="p0805" view="all">Finally, the Code View for function <ce:sans-serif>init_gen</ce:sans-serif> shown in <ce:cross-ref id="crf0520" refid="fig0075">Fig. 15</ce:cross-ref><ce:float-anchor refid="fig0075"/> includes Lines 244, 251, 254, and 255 in red (dark gray) from Cluster 1 and Lines 247, 248, 249, and 256 in blue (medium gray) from Cluster 2. Other lines, shown in light gray, belong to smaller clusters and lines containing no executable code. Ideally, clusters should capture a particular functionality; thus, functions should generally not contain code from multiple clusters (unless perhaps the clusters are completely contained within the function). Functions with code from multiple clusters reduce code separation (hindering comprehension) and increase the likelihood of ripple-effects (<ce:cross-ref id="crf0525" refid="bib0095">Black, 2001</ce:cross-ref>). Like other initialization functions, <ce:sans-serif>bc</ce:sans-serif>'s<ce:hsp sp="0.25"/><ce:sans-serif>init_gen</ce:sans-serif> is an exception to this guideline.</ce:para><ce:para id="p0810" view="all">This case study not only provides support for the answer to research question <ce:italic>RQ4</ce:italic> found in previous case studies, but also illustrates that the visualization is able to reveal structural defects in programs.</ce:para></ce:section><ce:section id="sec0095" view="all"><ce:label>3.6.4</ce:label><ce:section-title id="sect0140">Case study: copia</ce:section-title><ce:para id="p0815" view="all">The final case study in this series is <ce:sans-serif>copia</ce:sans-serif>, an industrial program used by the ESA to perform signal processing. <ce:sans-serif>Copia</ce:sans-serif><ce:hsp sp="0.25"/>is the smallest program considered in this series of case studies with 1168 LoC and 1111 SLoC all in a single <ce:sans-serif>C</ce:sans-serif> file. Its largest coherent cluster covers 48% of the program. The program is at the top of the group with large coherent clusters. CodeSurfer extracts 6654 slices (backward and forward).</ce:para><ce:para id="p0820" view="all">The B-SCG for <ce:sans-serif>copia</ce:sans-serif> is shown in <ce:cross-ref id="crf0530" refid="fig0080">Fig. 16</ce:cross-ref><ce:float-anchor refid="fig0080"/>a. The single large coherent cluster spanning 48% of the program is shown by the dashed red (dark gray) line (running approx. from 2% to 50% on the <ce:italic>x</ce:italic>-axis). The plots for same-backward-slice cluster sizes (light gray line) and the coherent cluster sizes (dashed line) are identical. This is because the size of the coherent clusters are restricted by the size of the same-backward-slice clusters. Although the plot for the size of the backward slices (black line) seems to be the same from the 10% mark to 95% mark on the <ce:italic>x</ce:italic>-axis, the slices are not exactly the same. Only vertices plotted from 2% through to 50% have exactly same backward and forward slice resulting in the large coherent cluster.</ce:para><ce:para id="p0825" view="all"><ce:cross-ref id="crf0535" refid="tbl0035">Table 7</ce:cross-ref><ce:float-anchor refid="tbl0035"/> shows statistics for the top five coherent clusters found in <ce:sans-serif>copia</ce:sans-serif>. Other than the largest cluster which covers 48% of the program, the rest of the clusters are extremely small. Clusters 2-5 include no more than 0.1% of the program (four vertices) rendering them too small to be of interest. This suggests a program with a single functionality or structure.</ce:para><ce:para id="p0830" view="all">During analysis of <ce:sans-serif>copia</ce:sans-serif><ce:hsp sp="0.25"/>using <ce:italic>decluvi</ce:italic>, the File View (<ce:cross-ref id="crf0540" refid="fig0085">Fig. 17</ce:cross-ref><ce:float-anchor refid="fig0085"/>) reveals an intriguing structure. There is a large block of code with the same spatial arrangement (bounded by the dotted black rectangle in <ce:cross-ref id="crf0545" refid="fig0085">Fig. 17</ce:cross-ref>) that belongs to the largest cluster of the program. It is unusual for so many consecutive source code lines to have nearly identical length and indentation. Inspection of the source code reveals that this block of code is a <ce:sans-serif>switch</ce:sans-serif> statement handling 234 cases. Further investigation shows that <ce:sans-serif>copia</ce:sans-serif><ce:hsp sp="0.25"/>has 234 small functions that eventually call one large function, <ce:sans-serif>seleziona</ce:sans-serif>, which in turn calls the smaller functions effectively implementing a finite state machine. Each of the smaller functions returns a value that is the next state for the machine and is used by the switch statement to call the appropriate next function. The primary reason for the high level of dependence in the program lies with the statement <ce:sans-serif>switch(next_state)</ce:sans-serif>, which controls the calls to the smaller functions. This causes what might be termed 'conservative dependence analysis collateral damage' because the static analysis cannot determine that when function <ce:sans-serif>f()</ce:sans-serif> returns the constant value 5 this leads the switch statement to eventually invoke function <ce:sans-serif>g()</ce:sans-serif>. Instead, the analysis makes the conservative assumption that a call to <ce:sans-serif>f()</ce:sans-serif> might be followed by a call to any of the functions called in the switch statement, resulting in a mutual recursion involving most of the program.</ce:para><ce:para id="p0835" view="all">Although the coherent cluster still shows the structure of the program and includes all these stub functions that work together, this is a clear case of dependence pollution (<ce:cross-ref id="crf0550" refid="bib0065">Binkley and Harman, 2005</ce:cross-ref>), which is avoidable. To illustrate this, the code was re-factored to simulate the replacement of the integer <ce:sans-serif>next_state</ce:sans-serif> with direct recursive function calls. The SCG for the modified version of <ce:sans-serif>copia</ce:sans-serif><ce:hsp sp="0.25"/>is shown in <ce:cross-ref id="crf0555" refid="fig0080">Fig. 16</ce:cross-ref>b where the large cluster has clearly disappeared. As a result of this reduction, the potential impact of changes to the program will be greatly reduced, making it easier to understand and maintain. This is even further amplified for automatic static analysis tools such as CodeSurfer. Of course, in order to do a proper re-factoring, the programmer will have to consider ways in which the program can be re-written to change the flow of control. Whether such a re-factoring is deemed cost-effective is a decision that can only be taken by the engineers and managers responsible for maintaining the program in question.</ce:para><ce:para id="p0840" view="all">This case study reiterates the answer for <ce:italic>RQ4</ce:italic> by showing the structure and dependency within the program. It also identifies potential refactoring points which can improve the performance of static analysis tools and make the program easier to understand.</ce:para></ce:section></ce:section><ce:section id="sec0100" view="all"><ce:label>3.7</ce:label><ce:section-title id="sect0145">Inter-cluster dependence</ce:section-title><ce:para id="p0845" view="all">This section addresses research question <ce:italic>RQ5: What are the implications of inter-cluster dependence between coherent clusters?</ce:italic> The question attempts to reveal whether there is dependence (slice inclusion) relationship between the vertices of different coherent clusters. A slice inclusion relationship between two clusters <ce:italic>X</ce:italic> and <ce:italic>Y</ce:italic> exist, if â<ce:italic>x</ce:italic>â<ce:hsp sp="0.25"/><ce:italic>X</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>â©<ce:hsp sp="0.25"/><ce:italic>Y</ce:italic><ce:hsp sp="0.25"/>â <ce:hsp sp="0.25"/>â. If such containment occurs, it must be a strict containment relationship (<ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>â©<ce:hsp sp="0.25"/><ce:italic>Y</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>Y</ce:italic>, see Eq. <ce:cross-ref id="crf0560" refid="eq0020">1</ce:cross-ref>). Defining this relation using forward slices produces the inverse relation. In the series of case studies presented earlier we have seen that coherent clusters map to logical components of a system and can be used to gain an understanding of the architecture of the program. If such dependencies exist that allows entire clusters to depend on other clusters, then this dependence relationship can be used to group clusters to form a hierarchical decomposition of the system where coherent clusters are regarded as sub-systems, opening up the potential use of coherent clusters in reverse engineering. Secondly, if there are mutual dependency relations between clusters then such mutual dependency relationships can be used to provide a better estimate of slice-based clusters.</ce:para><ce:para id="p0850" view="all">All vertices of a coherent cluster share the same external and internal dependence, that is, all vertices have the same backward slice and also the same forward slice. Because of this, any backward/forward slice that includes a vertex from a cluster will also include all other vertices of the same cluster (Eq. <ce:cross-ref id="crf0565" refid="eq0020">1</ce:cross-ref>). The study exploits this unique property of coherent clusters to investigate whether or not a backward slice taken with respect to a vertex of a coherent cluster includes vertices of another cluster. Note that if vertices of coherent cluster <ce:italic>X</ce:italic> are contained in the slice taken with respect to a vertex of coherent cluster <ce:italic>Y</ce:italic>, then all vertices of <ce:italic>X</ce:italic> are contained in the slice taken with respect to each vertex of <ce:italic>Y</ce:italic> (follows from Eq. <ce:cross-ref id="crf0570" refid="eq0020">1</ce:cross-ref>).</ce:para><ce:para id="p0855" view="all"><ce:cross-ref id="crf0575" refid="fig0090">Fig. 18</ce:cross-ref><ce:float-anchor refid="fig0090"/> shows <ce:italic>Cluster Dependence Graphs</ce:italic> (CDG) for each of the four case study subjects. Only the five largest clusters of the case study subjects are considered during this study. The graphs depict slice containment relationships between the top five clusters of each program. In these graphs, the top five clusters are represented by nodes (<ce:sans-serif>1</ce:sans-serif> depicts the largest coherent cluster, while <ce:sans-serif>5</ce:sans-serif> is the 5th largest cluster) and the directional edges denote backward slice<ce:cross-ref id="crf0580" refid="fn0010"><ce:sup loc="post">2</ce:sup></ce:cross-ref><ce:footnote id="fn0010"><ce:label>2</ce:label><ce:note-para id="npar0010" view="all">A definition based on forward slices will have the same results with reversed edges.</ce:note-para></ce:footnote> inclusion relationships: <ce:italic>A</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>B</ce:italic> depicts that vertices of cluster <ce:italic>B</ce:italic> depend on vertices of cluster <ce:italic>A</ce:italic>, that is, a backward slice of any vertex of cluster <ce:italic>B</ce:italic> will include all vertices of cluster <ce:italic>A</ce:italic> (â<ce:italic>x</ce:italic><ce:hsp sp="0.25"/>â<ce:hsp sp="0.25"/><ce:italic>B</ce:italic><ce:hsp sp="0.25"/>:<ce:hsp sp="0.25"/><ce:italic>BSlice</ce:italic>(<ce:italic>x</ce:italic>)<ce:hsp sp="0.25"/>â©<ce:hsp sp="0.25"/><ce:italic>A</ce:italic><ce:hsp sp="0.25"/>=<ce:hsp sp="0.25"/><ce:italic>A</ce:italic>). Bi-directional edges show mutual dependencies, whereas uni-directional edges show dependency in one direction only. In the graph for <ce:sans-serif>copia</ce:sans-serif><ce:hsp sp="0.25"/>(<ce:cross-ref id="crf0585" refid="fig0090">Fig. 18</ce:cross-ref>a), the top five clusters have no slice inclusion relationships between them (absence of edges between the nodes of the CDG). Looking at <ce:cross-ref id="crf0590" refid="tbl0035">Table 7</ce:cross-ref>, only the largest cluster of <ce:sans-serif>copia</ce:sans-serif><ce:hsp sp="0.25"/>is truly large at 48%, while the other four clusters are extremely small making them unlikely candidates for inter-cluster dependence.</ce:para><ce:para id="p0860" view="all">For <ce:sans-serif>acct</ce:sans-serif><ce:hsp sp="0.25"/>(<ce:cross-ref id="crf0595" refid="fig0090">Fig. 18</ce:cross-ref>b) there is a dependence between all of the top five clusters. In fact, there is mutual dependence between clusters <ce:sans-serif>1, 2, 3</ce:sans-serif> and <ce:sans-serif>4</ce:sans-serif>, while cluster <ce:sans-serif>5</ce:sans-serif> depends on all the other four clusters but not mutually. Clusters <ce:sans-serif>1</ce:sans-serif> through <ce:sans-serif>4</ce:sans-serif> contain logic for manipulating, accessing, and maintaining the hash tables, making them interdependent. Cluster <ce:sans-serif>5</ce:sans-serif> on the other hand is a loop structure within the main function for executing different cases based on command line inputs. Similarly for <ce:sans-serif>indent</ce:sans-serif> (<ce:cross-ref id="crf0600" refid="fig0090">Fig. 18</ce:cross-ref>c), clusters <ce:sans-serif>1, 2, 4</ce:sans-serif>, and <ce:sans-serif>5</ce:sans-serif> are mutually dependent and <ce:sans-serif>3</ce:sans-serif> depends on all the other top five clusters but not mutually.</ce:para><ce:para id="p0865" view="all">Finally, in the case of <ce:sans-serif>bc</ce:sans-serif> (<ce:cross-ref id="crf0605" refid="fig0090">Fig. 18</ce:cross-ref>d), all the vertices from the top five clusters are mutually inter-dependent. The rest of this section uses <ce:sans-serif>bc</ce:sans-serif><ce:hsp sp="0.25"/>as an example where this mutual dependence is used to identify larger dependence structures by grouping of the inter-dependent coherent clusters.</ce:para><ce:para id="p0870" view="all">At first glance it may seem that the grouping of the coherent clusters is simply reversing the splitting of same-backward-slice or same-forward-slice clusters observed earlier in <ce:cross-ref id="crf0610" refid="sec0090">Section 3.6.3</ce:cross-ref>. However, examining the sizes of the top five same-backward-slice clusters, same-forward-slice clusters and coherent clusters for <ce:sans-serif>bc</ce:sans-serif><ce:hsp sp="0.25"/>illustrates that it is not the case.</ce:para><ce:para id="p0875" view="all"><ce:cross-ref id="crf0615" refid="tbl0040">Table 8</ce:cross-ref><ce:float-anchor refid="tbl0040"/> shows the size of these clusters both in terms of number of vertices and as a percentage of the program. The combined size of the group of top five inter-dependent coherent clusters is 70.43%, which is 15.67% larger than the largest same-backward-slice cluster (54.86%) and 37.91% larger than the same-forward-slice cluster (32.35%). Therefore, the set of all (mutually dependent) vertices from the top five coherent clusters when taken together form a larger dependence structure, an estimate of a slice-based cluster.</ce:para><ce:para id="p0880" view="all">As an answer to <ce:italic>RQ5</ce:italic>, this section shows that there are dependence relationships between coherent clusters and in some cases there are mutual dependences between large coherent clusters. It also shows that it may be possible to leverage this inter-cluster relationship to build a hierarchical system decomposition. Furthermore, groups of inter-dependent coherent clusters form larger dependence structures than same-slice clusters and provides a better approximation for slice-based clusters. This indicates that the sizes of dependence clusters reported by previous studies (<ce:cross-refs id="crfs0075" refid="bib0055 bib0065 bib0070 bib0150 bib0165">Binkley et al., 2008; Binkley and Harman, 2005, 2009; Harman et al., 2009; Islam et al., 2010b</ce:cross-refs>) maybe conservative and mutual dependence clusters are <ce:italic>larger</ce:italic> and more prevalent than previously reported.</ce:para></ce:section><ce:section id="sec0105" view="all"><ce:label>3.8</ce:label><ce:section-title id="sect0150">Dependence clusters and bug fixes</ce:section-title><ce:para id="p0885" view="all">Initial work on dependence clusters advised that they might cause problems in software maintenance, and thus even be considered harmful, because they represent an intricate interweaving of mutual dependencies between program elements. Thus a large dependence cluster might be thought of as a bad code smell (<ce:cross-ref id="crf0620" refid="bib0120">Elssamadisy and Schalliol, 2002</ce:cross-ref>) or a anti-pattern (<ce:cross-ref id="crf0625" refid="bib0055">Binkley et al., 2008</ce:cross-ref>). <ce:cross-ref id="crf0630" refid="bib0090">Black et al. (2006)</ce:cross-ref> suggested that dependence clusters are potentially where bugs may be located and suggested the possibility of a link between clusters and program faults. This section further investigates this issue using a study that explores the relationship between program faults and dependence clusters. In doing so, it addresses research question <ce:italic>RQ6: How do program faults relate to coherent clusters?</ce:italic></ce:para><ce:para id="p0890" view="all"><ce:sans-serif>Barcode</ce:sans-serif>, an open source utility tool for converting text strings to printed bars (barcodes) is used in this study. A series of versions of the system are available for download from GNU repository.<ce:cross-ref id="crf0635" refid="fn0015"><ce:sup loc="post">3</ce:sup></ce:cross-ref><ce:footnote id="fn0015"><ce:label>3</ce:label><ce:note-para id="npar0015" view="all"><ce:inter-ref id="intr0010" xlink:href="http://gnu.mirror.iweb.com/gnu/barcode/" xlink:type="simple">http://gnu.mirror.iweb.com/gnu/barcode/</ce:inter-ref>.</ce:note-para></ce:footnote> There are nine public releases for <ce:sans-serif>barcode</ce:sans-serif>, details of which are shown in <ce:cross-ref id="crf0640" refid="tbl0045">Table 9</ce:cross-ref><ce:float-anchor refid="tbl0045"/>. Column 1 shows the release version, columns 3-6 show various metrics about the size of the system in terms of number of source files and various source code size measures. Columns 7-9 report the number of SDG vertices, SDG edges and the number of slices produced for each release. Finally, Column 10 reports the number of faults that were fixed since the previous release of the system. In <ce:cross-ref id="crf0645" refid="tbl0045">Table 9</ce:cross-ref> the size of <ce:sans-serif>barcode</ce:sans-serif> increases from 1352 lines of code in version 0.90 to 3968 lines of code in version 0.98. The total number of faults that were fixed during this time was 39.</ce:para><ce:para id="p0895" view="all">Fault data, gathered by manually analyzing the publicly available version control repository<ce:cross-ref id="crf0650" refid="fn0020"><ce:sup loc="post">4</ce:sup></ce:cross-ref><ce:footnote id="fn0020"><ce:label>4</ce:label><ce:note-para id="npar0020" view="all">cvs.savannah.gnu.org:/sources/barcode.</ce:note-para></ce:footnote> for the system, showed that total number of commits for <ce:sans-serif>barcode</ce:sans-serif> during these releases were 137. Each update was manually checked using CVSAnaly (<ce:cross-ref id="crf0655" refid="bib0210">Robles et al., 2004</ce:cross-ref>) to determine whether the update was a bug fix or simply an enhancement or upgrade to the system. Those commits that were identified as bug fixes were isolated and mapped to the release that contained the update. All the bug fixes made during a certain release cycle were then accumulated to give the total number of bugs fixed during a particular release cycle (Column 10 of <ce:cross-ref id="crf0660" refid="tbl0045">Table 9</ce:cross-ref>). The reported number only includes bug fixes and does not include enhancement or addition of new functionality.</ce:para><ce:para id="p0900" view="all"><ce:cross-ref id="crf0665" refid="fig0095">Fig. 19</ce:cross-ref><ce:float-anchor refid="fig0095"/> shows the backward slice size plots for all versions of <ce:sans-serif>barcode</ce:sans-serif> in a single graph. The values of the axises in <ce:cross-ref id="crf0670" refid="fig0095">Fig. 19</ce:cross-ref> are shown as vertex counts rather than relative values (percentages). This allows the growth of barcode to be easily visualized. From the plots it is seen that the size of the program increases progressively with each new release. The graphs also show that a significant number of vertices in each revision of the program yields identical backward slices and the proportion of vertices in the program that have identical backward slices stays roughly the same. Overall, the profile of the clusters and slices remains consistent. The graph also shows that the plots do not show any significant change in their overall shape or structure. Interestingly, the plot for version 0.92 with 9 fault fixes is not different in shape from revision 0.94 where only a single fault was fixed.</ce:para><ce:para id="p0905" view="all">As coherent clusters are composed of both backward and forward slices, the stability of the backward slice profile itself does not guarantee the stability of coherent cluster profile. The remainder of this section looks at how the clustering profile is affected by bug fixes. <ce:cross-ref id="crf0675" refid="fig0100">Fig. 20</ce:cross-ref><ce:float-anchor refid="fig0100"/> shows individual SCGs for each version of <ce:sans-serif>barcode</ce:sans-serif>. As coherent clusters are dependent on both backward and forward slices, such clusters will be more sensitive to changes in dependences within the program. The SCGs show that from the initial version <ce:sans-serif>barcode-0.90</ce:sans-serif> there were two coherent clusters in the system. The smaller one is around 10% of the code while the larger is around 40% of the code. As the system evolved and went through various modifications and enhancements, the number of clusters and the profile of the clusters remained consistent other than its scaled growth with the increase in program size. It is also evident that during evolution of the system, the enhancement code or newly added code formed part of the larger cluster. This is why in the later stages of the evolution we see an increase in the size of the largest cluster, but not the smaller one.</ce:para><ce:para id="p0910" view="all">However, we do not see any significant changes in the slice and cluster profile of the program that can be attributed to bug fixes. For example, the single bug fixed between revisions <ce:sans-serif>0.93</ce:sans-serif> and <ce:sans-serif>0.94</ce:sans-serif> was on a single line of code from the file <ce:sans-serif>code128.c</ce:sans-serif>. The changes to the line is shown in <ce:cross-ref id="crf0680" refid="fig0105">Fig. 21</ce:cross-ref><ce:float-anchor refid="fig0105"/> (in version <ce:sans-serif>0.93</ce:sans-serif> there is an error in calculating the <ce:sans-serif>checksum</ce:sans-serif> value, which was corrected in version <ce:sans-serif>0.94</ce:sans-serif>). As illustrated by this example, the data and control flow of the program and thus the dependencies between program points are not affected by the bug fix and hence no change is observed between the SCGs of the two releases (<ce:cross-ref id="crf0685" refid="fig0100">Fig. 20</ce:cross-ref>).</ce:para><ce:para id="p0915" view="all">If dependence clusters correlated to faults, or, if dependence clusters were directly related to the number of faults in a program, then a significant difference would be expected in the shape of the SCG when faults were rectified. The SCGs for program <ce:sans-serif>barcode</ce:sans-serif> (<ce:cross-ref id="crf0690" refid="fig0100">Fig. 20</ce:cross-ref>) show no change in their profile when faults within the program are fixed. This provides evidence that faults may not be dictated by the presence or absence of dependence clusters. As an answer to <ce:italic>RQ6</ce:italic>, the study of <ce:sans-serif>barcode</ce:sans-serif> finds no correlation between the existence of dependence clusters and program faults and their fix. We have to be careful in generalising the answer to this question because of the small dataset considered in this study, further extended research is needed to derive a more generalised answer. Moreover, this does not exclude the possibility that most program faults occur in code that are part of large clusters. In future we plan to extend this experiment in a qualitative form to study whether program faults lie within large or small clusters, or outside them altogether.</ce:para></ce:section><ce:section id="sec0110" view="all"><ce:label>3.9</ce:label><ce:section-title id="sect0155">Clusters and system evolution</ce:section-title><ce:para id="p0920" view="all">The previous section showed that for <ce:sans-serif>barcode</ce:sans-serif> the slice and cluster profiles remain quite stable through bug fixes during system evolution and its growth of almost 2.5 times over a period of 3 years. This section extends that study by looking for cluster changes during system evolution. It addresses <ce:italic>RQ7: How stable are coherent clusters during system evolution?</ce:italic> using longitudinal analysis of the case studies presented earlier. From the GNU repository we were able to retrieve four releases for <ce:sans-serif>bc</ce:sans-serif>, four releases for <ce:sans-serif>acct</ce:sans-serif> and 14 releases for <ce:sans-serif>indent</ce:sans-serif>. As <ce:sans-serif>copia</ce:sans-serif> is an industrial closed-source program, we were unable to obtain any previous versions of the program and thus the program is excluded from this study.</ce:para><ce:para id="p0925" view="all">The graphs in <ce:cross-ref id="crf0695" refid="fig0110">Fig. 22</ce:cross-ref><ce:float-anchor refid="fig0110"/> show backward slice size overlays for every version of each program. <ce:cross-ref id="crf0700" refid="fig0110">Fig. 22</ce:cross-ref>a and c for <ce:sans-serif>bc</ce:sans-serif> and <ce:sans-serif>indent</ce:sans-serif> show that these systems grow in size during its evolution. The growth is more prominent in <ce:sans-serif>indent</ce:sans-serif> (<ce:cross-ref id="crf0705" refid="fig0110">Fig. 22</ce:cross-ref>c) where the program grows from around 4800 vertices in its initial version to around 7000 vertices in the final version. The growth for <ce:sans-serif>bc</ce:sans-serif> is smaller, it grows from around 6000 vertices to 7000 vertices. This is partly because the versions considered for <ce:sans-serif>bc</ce:sans-serif> are all minor revisions. For both <ce:sans-serif>bc</ce:sans-serif> and <ce:sans-serif>indent</ce:sans-serif> the slice-size graphs show very little change in their profile. The graphs mainly show a scale up that parallels the growth of the system.</ce:para><ce:para id="p0930" view="all">For <ce:sans-serif>acct</ce:sans-serif> (<ce:cross-ref id="crf0710" refid="fig0110">Fig. 22</ce:cross-ref>b) the plots do not simply show a scale up but show a significant difference. In the 4 plots, the revisions that belong to the same major release are seen to be similar and show a scaling, whereas those from different major releases show very different landscapes. The remainder of this section gives detail of these clustering profile changes.</ce:para><ce:para id="p0935" view="all"><ce:cross-ref id="crf0715" refid="fig0115">Fig. 23</ce:cross-ref><ce:float-anchor refid="fig0115"/> shows the BSCGs for the four versions of <ce:sans-serif>bc</ce:sans-serif>. Initially, the backward slice size plots (solid black lines) show very little difference. However, upon closer inspection of the last three versions we see that the backward slice size plot changes slightly at around the 80% mark on the <ce:italic>x</ce:italic>-axis. This is highlighted by the fact that the later three versions show an additional coherent cluster spanning from 85% to 100% on the <ce:italic>x</ce:italic>-axis which is absent from the initial release. Upon inspection of the source code changes between versions <ce:sans-serif>bc-1.03</ce:sans-serif> and <ce:sans-serif>bc-1.04</ce:sans-serif> the following types of updates were found:<ce:list id="list0020"><ce:list-item id="listitem0085"><ce:label>1</ce:label><ce:para id="p0940" view="all">bug fixes,</ce:para></ce:list-item><ce:list-item id="listitem0090"><ce:label>2</ce:label><ce:para id="p0945" view="all">addition of command line options,</ce:para></ce:list-item><ce:list-item id="listitem0095"><ce:label>3</ce:label><ce:para id="p0950" view="all">reorganization of the source tree, and</ce:para></ce:list-item><ce:list-item id="listitem0100"><ce:label>4</ce:label><ce:para id="p0955" view="all">addition of new commands for <ce:sans-serif>dc</ce:sans-serif>.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="p0960" view="all">The reorganization of the program involved significant architectural changes that separated out the code supporting <ce:sans-serif>bc</ce:sans-serif>'s related <ce:sans-serif>dc</ce:sans-serif> functionality into a separate hierarchy and moved files common to both <ce:sans-serif>bc</ce:sans-serif> and <ce:sans-serif>dc</ce:sans-serif> to a library. This refactoring of the code broke up the largest cluster into two clusters, where a new third cluster is formed as seen in the SCG. Thus, the major restructuring of the code between revisions <ce:sans-serif>1.03</ce:sans-serif> and <ce:sans-serif>1.04</ce:sans-serif> causes a significant change in the cluster profile. Almost no other change is seen in the cluster profile between the remaining three <ce:sans-serif>bc</ce:sans-serif> revisions <ce:sans-serif>1.04</ce:sans-serif>, <ce:sans-serif>1.05</ce:sans-serif>, and <ce:sans-serif>1.06</ce:sans-serif>, where no significant restructuring took place.</ce:para><ce:para id="p0965" view="all"><ce:cross-ref id="crf0720" refid="fig0120">Fig. 24</ce:cross-ref><ce:float-anchor refid="fig0120"/> shows the SCGs for the four versions of <ce:sans-serif>acct</ce:sans-serif> considered in this study. The slice profile and the cluster profile show very little change between <ce:sans-serif>acct-6.3</ce:sans-serif> and <ce:sans-serif>acct-6.3.2</ce:sans-serif>. Similarly, not much change is seen between <ce:sans-serif>acct-6.5</ce:sans-serif> and <ce:sans-serif>acct-6.5.5</ce:sans-serif>. However, the slice and the cluster profiles change significantly between major revisions, <ce:sans-serif>6.3.X</ce:sans-serif> and <ce:sans-serif>6.5.X</ce:sans-serif>. The change log of release <ce:sans-serif>6.5</ce:sans-serif> notes "Huge code-refactoring." The refactoring of the code is primarily in the way system log files are handled using <ce:sans-serif>utmp_rd.c</ce:sans-serif>, <ce:sans-serif>file_rd.c</ce:sans-serif>, <ce:sans-serif>dump-utmp.c</ce:sans-serif> and stored using hash tables whose operations are defined in <ce:sans-serif>hashtab.c</ce:sans-serif> and <ce:sans-serif>uid_hash.c</ce:sans-serif>.</ce:para><ce:para id="p0970" view="all">Finally, <ce:cross-ref id="crf0725" refid="fig0125">Fig. 25</ce:cross-ref><ce:float-anchor refid="fig0125"/> shows the SCGs for the 14 versions of <ce:sans-serif>indent</ce:sans-serif>. These revisions include two major releases. It is evident from the SCGs that the slice profile during the evolution hardly changes. The cluster profile also remains similar through the evolution. The system grows from 4466 to 6521 SLoC during its evolution which is supported by <ce:cross-ref id="crf0730" refid="fig0110">Fig. 22</ce:cross-ref>c showing the growth of the system SDG size. <ce:sans-serif>Indent</ce:sans-serif> is a program for formatting C programs. A study of the change logs for <ce:sans-serif>indent</ce:sans-serif> did not reveal any major refactoring or restructuring. The changes to the system were mostly bug fixes and upgrades to support new command line options. This results in almost negligible changes in the slice and cluster profiles despite the system evolution and growth.</ce:para><ce:para id="p0975" view="all">As an answer to <ce:italic>RQ7</ce:italic>, this study finds that unless there is significant refactoring of the system, coherent cluster profiles remain stable during system evolution and thus captures the core architecture of the program in all three case studies. Future work will replicate this longitudinal study on a large code corpus to ascertain whether this stability holds for other programs.</ce:para></ce:section><ce:section id="sec0115" view="all"><ce:label>3.10</ce:label><ce:section-title id="sect0160">Threats to validity</ce:section-title><ce:para id="p0980" view="all">This section presents threats to the validity of the results presented. Threats to three types of validity (external, internal and construct) are considered. The primary external threat arises from the possibility that the programs selected are not representative of programs in general (i.e., the findings of the experiments do not apply to 'typical' programs). This is a reasonable concern that applies to any study of program properties. To address this issue, a set of thirty open-source and industrial programs were analyzed in the quantitative study. The programs were not selected based on any criteria or property and thus represent a random selection from various domains. However, these were from the set of programs that were studied in previous work on dependence clusters to facilitate comparison with previous results. In addition, all of the programs studied were <ce:sans-serif>C</ce:sans-serif> programs, so there is greater uncertainty that the results will hold for other programming paradigms such as object-oriented or aspect-oriented programming.</ce:para><ce:para id="p0985" view="all">Internal validity is the degree to which conclusions can be drawn about the causal effect of the independent variables on the dependent variable. The use of hash values to approximate slice content during clustering is a source of potential internal threat. The approach assumes that hash values uniquely identify slice contents. Hash functions are prone to hash collision which in our approach can cause clustering errors. The hash function used is carefully crafted to minimize collision and its use is validated in <ce:cross-ref id="crf0735" refid="sec0060">Section 3.3</ce:cross-ref>. Furthermore, the identification of logical structure in programs were done by the authors of the paper who are not involved in the development of any of the case study subjects. This brings about the possibility that the identified structures do not represent actual logical constructs of the programs. As the case studies are Unix utilities, their design specification are not available for evaluation. Future work will entail consultation with the development team of the systems to further validate the results.</ce:para><ce:para id="p0990" view="all">Construct validity refers to the validity that observations or measurement tools actually represent or measure the construct being investigated. In this paper, one possible threat to construct arises from the potential for faults in the slicer. A mature and widely used slicing tool (CodeSurfer) is used to mitigate this concern. Another possible concern surrounds the precision of the pointer analysis used. An overly conservative, and therefore imprecise, analysis would tend to increase the levels of dependence and potentially also increase the size of clusters. There is no automatic way to tell whether a cluster arises because of imprecision in the computation of dependence or whether it is 'real'. <ce:cross-ref id="crf0740" refid="sec0055">Section 3.2</ce:cross-ref> discusses the various pointer analysis settings and validates its precision. CodeSurfer's most precise pointer analysis option was used for the study.</ce:para></ce:section></ce:section><ce:section id="sec0120" view="all"><ce:label>4</ce:label><ce:section-title id="sect0165">Related work</ce:section-title><ce:para id="p0995" view="all">In testing, dependence analysis has been shown to be effective at reducing the computational effort required to automate the test-data generation process (<ce:cross-ref id="crf0745" refid="bib0010">Ali et al., 2010</ce:cross-ref>). In software maintenance, dependence analysis is used to protect a software maintainer against the potentially unforeseen side effects of a maintenance change. This can be achieved by measuring the impact of the proposed change (<ce:cross-ref id="crf0750" refid="bib0095">Black, 2001</ce:cross-ref>) or by attempting to identify portions of code for which a change can be safely performed free from side effects (<ce:cross-refs id="crfs0080" refid="bib0135 bib0235">Gallagher and Lyle, 1991; Tonella, 2003</ce:cross-refs>). A recently proposed impact analysis framework (<ce:cross-ref id="crf0755" refid="bib0005">Acharya and Robinson, 2011</ce:cross-ref>) reports that impact sets are often part of large dependence clusters when using time consuming but high precision slicing. When low precision slicing is used, the study reports smaller dependence clusters. This paper uses the most precise static slicing available. There has also been recent work on finding dependence communities in software (<ce:cross-ref id="crf0760" refid="bib0145">Hamilton and Danicic, 2012</ce:cross-ref>) where social network community structure detection algorithms are applied to slice-inclusion graphs to identify communities.</ce:para><ce:para id="p1000" view="all">Dependence clusters have previously been linked to software faults (<ce:cross-ref id="crf0765" refid="bib0090">Black et al., 2006</ce:cross-ref>) and have been identified as a potentially harmful 'dependence anti-pattern' (<ce:cross-ref id="crf0770" refid="bib0055">Binkley et al., 2008</ce:cross-ref>). The presence of large dependence cluster was thought to reduce the effectiveness of testing and maintenance support techniques. Having considered dependence clusters harmful, previous work on dependence clusters focuses on locating dependence clusters, understanding their cause, and removing them.</ce:para><ce:para id="p1005" view="all">The first of these studies (<ce:cross-refs id="crfs0085" refid="bib0065 bib0150">Binkley and Harman, 2005; Harman et al., 2009</ce:cross-refs>) were based on efficient technique for locating dependence clusters and identifying dependence pollution (avoidable dependence clusters). One common cause of large dependence clusters is the use of global variables. A study of 21 programs found that 50% of the programs had a global variable that was responsible for holding together large dependence clusters (<ce:cross-ref id="crf0775" refid="bib0075">Binkley et al., 2009</ce:cross-ref>). Other work on dependence clusters in software engineering has considered clusters at both low-level (<ce:cross-refs id="crfs0090" refid="bib0065 bib0150">Binkley and Harman, 2005; Harman et al., 2009</ce:cross-refs>) (SDG based) and high-level (<ce:cross-refs id="crfs0095" refid="bib0115 bib0190">Eisenbarth et al., 2003; Mitchell and Mancoridis, 2006</ce:cross-refs>) (models and functions) abstractions.</ce:para><ce:para id="p1010" view="all">This paper extends our previous work which introduced coherent dependence clusters (<ce:cross-ref id="crf0780" refid="bib0165">Islam et al., 2010b</ce:cross-ref>) and <ce:italic>decluvi</ce:italic> (<ce:cross-ref id="crf0785" refid="bib0160">Islam et al., 2010a</ce:cross-ref>). Previous work established the existence of coherent dependence clusters and detailed the functionalities of the visualization tool. This paper extends previous work in many ways, firstly by introducing an efficient hashing algorithm for slice approximation. This improves on the precision of previous slice approximation from 78% to 95%, resulting in precise and accurate clustering. The coherent cluster existence study is extended to empirically validate the results by considering 30 production programs. Additional case studies show that coherent clusters can help reveal the structure of a program and identify structural defects. We also introduce the notion of inter-cluster dependence which will form the base of reverse engineering efforts in future. Finally, we also present studies which show the lack of correlation between coherent clusters and bug fixes and show that coherent clusters remain surprisingly stable during system evolution.</ce:para><ce:para id="p1015" view="all">In some ways our work follows the evolutionary development of the study of software clones (<ce:cross-ref id="crf0790" refid="bib0035">Bellon et al., 2007</ce:cross-ref>), which were thought to be harmful and problematic when first observed. Further reflection and analysis revealed that these code clone structures were a widespread phenomena that deserved study and consideration. While engineers needed to be aware of them, it remains a subject of much debate as to whether or not they should be refactored, tolerated or even nurtured (<ce:cross-refs id="crfs0100" refid="bib0105 bib0170">Bouktif et al., 2006; Kapser and Godfrey, 2008</ce:cross-refs>).</ce:para><ce:para id="p1020" view="all">We believe the same kind of discussion may apply to dependence clusters. While dependence clusters may have significant impact on comprehension and maintenance and though there is evidence that these clusters are a widespread phenomena, it is not always obvious whether they can be or should be removed or refactored. There may be a (good) reason for the presence of a cluster and/or it may not be obvious how it can be removed (though its presence should surely be brought to the attention of the software maintainer). These observations motivate further study to investigate and understand dependence clusters, and to provide tools to support software engineers in their analysis.</ce:para><ce:para id="p1025" view="all">In support of future research, we make available all data from our study at the website <ce:inter-ref id="intr0015" xlink:href="http://www.cs.ucl.ac.uk/staff/s.islam/decluvi.html" xlink:type="simple">http://www.cs.ucl.ac.uk/staff/s.islam/decluvi.html</ce:inter-ref>. The reader can obtain the slices for each program studied and the clusters they form, facilitating replication of our results and other studies of dependence and dependence clusters.</ce:para><ce:para id="p1030" view="all">The visualizations used in this paper are similar to those used for program comprehension. <ce:italic>Seesoft</ce:italic> (<ce:cross-ref id="crf0795" refid="bib0110">Eick et al., 1992</ce:cross-ref>) is a seminal tool for line oriented visualization of software statistics. The system pioneered four key ideas: reduced representation, coloring by statistic, direct manipulation, and capability to read actual code. The reduced representation was achieved by displaying files in columns with lines of code as lines of pixels. This approach allows 50,000 lines of code to be shown on a single screen.</ce:para><ce:para id="p1035" view="all">The SeeSys System (<ce:cross-ref id="crf0800" refid="bib0025">Baker and Eick, 1995</ce:cross-ref>) introduced tree maps to show hierarchical data. It displays code organized hierarchically into subsystems, directories, and files by representing the whole system as a rectangle and recursively representing the various sub-units with interior rectangles. The area of each rectangle is used to reflect statistic associated with the sub-unit. <ce:italic>Decluvi</ce:italic><ce:hsp sp="0.25"/> builds on the SeeSoft concepts through different abstractions and dynamic mapping of line statistics removing the 50,000 line limitation.</ce:para><ce:para id="p1040" view="all">An alternative software visualization approach often used in program comprehension does not use the "line of pixels" approach, but instead uses nested graphs for hierarchical fish-eye views. Most of these tools focus on visualizing high-level system abstractions (often referred to as 'clustering' or 'aggregation') such as classes, modules, and packages. A popular example is the reverse engineering tool Rigi (<ce:cross-ref id="crf0805" refid="bib0225">Storey et al., 1997</ce:cross-ref>).</ce:para></ce:section><ce:section id="sec0125" view="all"><ce:label>5</ce:label><ce:section-title id="sect0170">Summary and future work</ce:section-title><ce:para id="p1045" view="all">Previous work has deemed dependence clusters to be problematic as they inhibit program understanding and maintenance. This paper views them in a new light, it introduces and evaluates a specialized form of dependence cluster: the coherent cluster. Such clusters have vertices that share the same internal and external dependencies. The paper shows that such clusters are not necessarily problems but rather can aid an engineer understand program components and their interactions. Developers can exploit knowledge of coherent clusters as they aid in program comprehension as the clusters bring out interactions between logical constructs of the system. We also lay a foundation for research into this new application area and encourage further research. Moreover, future research could compare the aspects of various definitions of dependence clusters and the properties they capture.</ce:para><ce:para id="p1050" view="all">This paper presents new approximations that support the efficient and accurate identification of coherent clusters. Empirical evaluation finds that 23 of the 30 subject programs have at least one large coherent cluster. A series of four case studies illustrate that coherent clusters map to a logical functional decomposition and can be used to depict the structure of a program. In all four case studies, coherent clusters map to subsystems, each of which is responsible for implementing concise functionality. As side-effects of the study, we find that the visualization of coherent clusters can identify potential structural problems as well as refactoring opportunities.</ce:para><ce:para id="p1055" view="all">The paper also discusses inter-cluster dependence and how mutual dependencies between clusters may be exploited to reveal large dependence structure that form the basis of reverse engineering efforts. Furthermore, the paper presents a study on how bug fixes relate to the presence of coherent clusters, and finds no relationship between program faults and coherent clusters in <ce:sans-serif>barcode</ce:sans-serif>. Finally, a longitudinal study of three subjects shows that coherent clusters remain surprisingly stable through system evolution.</ce:para><ce:para id="p1060" view="all">The paper is one of the first in the area of dependence clusters to suggest that dependence clusters (coherent clusters) are not problematic but represent program structure and give evidence to that cause. Future work in this area is rife with opportunities beginning with enabling the use of coherent clusters in a program comprehension and reverse engineering tools. The inter-cluster dependence study lays out the ground work in this context. There is also room for further research aimed at understanding the formation and impact of coherent clusters on software quality. For example, by studying how well dependence clusters can capture functionality. Furthermore, application of dynamic slicing in formation of dependence clusters might by considered as static analysis can suffer from over approximation caused by its conservative nature.</ce:para></ce:section></ce:sections><ce:acknowledgment id="ack0005" view="all"><ce:section-title id="sect0175">Acknowledgements</ce:section-title><ce:para id="p1065" view="all">This work is supported by <ce:grant-sponsor id="gs0005" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">EPSRC</ce:grant-sponsor> (<ce:grant-number refid="gs0005">EP/G060525/2</ce:grant-number>, <ce:grant-number refid="gs0005">EP/F059442/2</ce:grant-number>), <ce:grant-sponsor id="gs0015" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">EU</ce:grant-sponsor> (<ce:grant-number refid="gs0015">ICT-2009.1.2 no 257574</ce:grant-number>), and <ce:grant-sponsor id="gs0025" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">NSF</ce:grant-sponsor> (<ce:grant-number refid="gs0025">CCF 0916081</ce:grant-number>). Data from the EPSRC-funded portions of this work may be available by contacting Dr. Krinke. Please note that intellectual property or other restrictions may prevent the full disclosure of this data.</ce:para></ce:acknowledgment></body><tail view="all"><ce:bibliography id="bibl0005" view="all"><ce:section-title id="sect0180">References</ce:section-title><ce:bibliography-sec id="bibs0005" view="all"><ce:bib-reference id="bib0005"><ce:label>Acharya and Robinson, 2011</ce:label><sb:reference id="sbref0005"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Acharya</ce:surname></sb:author><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Robinson</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Practical change impact analysis based on static program slicing for industrial software systems</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Proceedings of the 33rd International Conference on Software Engineering</sb:maintitle></sb:title><sb:conference>ACM Press</sb:conference><sb:date>2011</sb:date></sb:edited-book><sb:pages><sb:first-page>746</sb:first-page><sb:last-page>755</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0010"><ce:label>Ali et al., 2010</ce:label><sb:reference id="sbref0010"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Ali</ce:surname></sb:author><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Briand</ce:surname></sb:author><sb:author><ce:given-name>H.</ce:given-name><ce:surname>Hemmati</ce:surname></sb:author><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Panesar-Walawege</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A systematic review of the application and empirical investigation of search-based test case generation</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>36</sb:volume-nr></sb:series><sb:issue-nr>6</sb:issue-nr><sb:date>2010</sb:date></sb:issue><sb:pages><sb:first-page>742</sb:first-page><sb:last-page>762</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0015"><ce:label>Andersen, 1994</ce:label><ce:other-ref id="oref0015"><ce:textref>Andersen, L.O., 1994. Program analysis and specialization for the C programming language, Ph.D. thesis, DIKU, University of Copenhagen, (DIKU report 94/19).</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="bib0020"><ce:label>Anderson and Teitelbaum, 2001</ce:label><sb:reference id="sbref0020"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Anderson</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Teitelbaum</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Software inspection using CodeSurfer</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>First Workshop on Inspection in Software Engineering</sb:maintitle></sb:title><sb:date>2001</sb:date></sb:edited-book><sb:pages><sb:first-page>1</sb:first-page><sb:last-page>9</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0025"><ce:label>Baker and Eick, 1995</ce:label><sb:reference id="sbref0025"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.J.</ce:given-name><ce:surname>Baker</ce:surname></sb:author><sb:author><ce:given-name>S.G.</ce:given-name><ce:surname>Eick</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Space-filling software visualization</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Journal of Visual Languages &amp; Computing</sb:maintitle></sb:title><sb:volume-nr>6</sb:volume-nr></sb:series><sb:issue-nr>2</sb:issue-nr><sb:date>1995</sb:date></sb:issue><sb:pages><sb:first-page>119</sb:first-page><sb:last-page>133</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0030"><ce:label>Bastian et al., 2009</ce:label><sb:reference id="sbref0030"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Bastian</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Heymann</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Jacomy</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Gephi: An open source software for exploring and manipulating networks</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>International AAAI Conference on Weblogs and Social Media</sb:maintitle></sb:title><sb:date>2009</sb:date><sb:publisher><sb:name>AAAI Press</sb:name></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0035"><ce:label>Bellon et al., 2007</ce:label><sb:reference id="sbref0035"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Bellon</ce:surname></sb:author><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Koschke</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Antoniol</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author><sb:author><ce:given-name>E.</ce:given-name><ce:surname>Merlo</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Comparison and evaluation of clone detection tools</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>33</sb:volume-nr></sb:series><sb:issue-nr>9</sb:issue-nr><sb:date>2007</sb:date></sb:issue><sb:pages><sb:first-page>577</sb:first-page><sb:last-page>591</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0040"><ce:label>BeszÃ©des et al., 2007</ce:label><sb:reference id="sbref0040"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>Ã.</ce:given-name><ce:surname>BeszÃ©des</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Gergely</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>JÃ¡sz</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Toth</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>GyimÃ³thy</ce:surname></sb:author><sb:author><ce:given-name>V.</ce:given-name><ce:surname>Rajlich</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Computation of static execute after relation with applications to software maintenance</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>23rd IEEE International Conference on Software Maintenance, October</sb:maintitle></sb:title><sb:date>2007</sb:date><sb:publisher><sb:name>IEEE Computer Society Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>295</sb:first-page><sb:last-page>304</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0045"><ce:label>Beyer, 2008</ce:label><sb:reference id="sbref0045"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Beyer</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>CCVisu: automatic visual software decomposition</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>Companion of the 30th International Conference on Software Engineering</sb:maintitle></sb:title><sb:date>2008</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>967</sb:first-page><sb:last-page>968</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0050"><ce:label>Binkley, 2007</ce:label><sb:reference id="sbref0050"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Source code analysis: A road map</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>FOSE '07: 2007 Future of Software Engineering</sb:maintitle></sb:title><sb:date>2007</sb:date><sb:publisher><sb:name>IEEE Computer Society Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>104</sb:first-page><sb:last-page>119</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0055"><ce:label>Binkley et al., 2008</ce:label><sb:reference id="sbref0055"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>N.</ce:given-name><ce:surname>Gold</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author><sb:author><ce:given-name>Z.</ce:given-name><ce:surname>Li</ce:surname></sb:author><sb:author><ce:given-name>K.</ce:given-name><ce:surname>Mahdavi</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Wegener</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Dependence anti patterns</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>4th International ERCIM Workshop on Software Evolution and Evolvability (Evol'08)</sb:maintitle></sb:title><sb:date>2008</sb:date></sb:book><sb:pages><sb:first-page>25</sb:first-page><sb:last-page>34</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0060"><ce:label>Binkley and Harman, 2003</ce:label><sb:reference id="sbref0060"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A large-scale empirical study of forward and backward static slice size and context sensitivity</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>IEEE International Conference on Software Maintenance</sb:maintitle></sb:title><sb:date>2003</sb:date><sb:publisher><sb:name>IEEE Computer Society Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>44</sb:first-page><sb:last-page>53</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0065"><ce:label>Binkley and Harman, 2005</ce:label><sb:reference id="sbref0065"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Locating dependence clusters and dependence pollution</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>21st IEEE International Conference on Software Maintenance</sb:maintitle></sb:title><sb:date>2005</sb:date><sb:publisher><sb:name>IEEE Computer Society Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>177</sb:first-page><sb:last-page>186</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0070"><ce:label>Binkley and Harman, 2009</ce:label><sb:reference id="sbref0070"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Identifying 'linchpin vertices' that cause large dependence clusters</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Ninth IEEE International Working Conference on Source Code Analysis and Manipulation</sb:maintitle></sb:title><sb:date>2009</sb:date></sb:edited-book><sb:pages><sb:first-page>89</sb:first-page><sb:last-page>98</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0075"><ce:label>Binkley et al., 2009</ce:label><sb:reference id="sbref0075"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author><sb:author><ce:given-name>Y.</ce:given-name><ce:surname>Hassoun</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Islam</ce:surname></sb:author><sb:author><ce:given-name>Z.</ce:given-name><ce:surname>Li</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Assessing the impact of global variables on program dependence and dependence clusters</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Journal of Systems and Software</sb:maintitle></sb:title><sb:volume-nr>83</sb:volume-nr></sb:series><sb:issue-nr>1</sb:issue-nr><sb:date>2009</sb:date></sb:issue><sb:pages><sb:first-page>96</sb:first-page><sb:last-page>107</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0080"><ce:label>Binkley et al., 2007</ce:label><sb:reference id="sbref0080"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.W.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Empirical study of optimization techniques for massive slicing</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>ACM Transactions on Programming Languages and Systems</sb:maintitle></sb:title><sb:volume-nr>30</sb:volume-nr></sb:series><sb:date>2007</sb:date></sb:issue></sb:host><sb:comment>3:1-3:33</sb:comment></sb:reference></ce:bib-reference><ce:bib-reference id="bib0085"><ce:label>Black et al., 2009</ce:label><sb:reference id="sbref0085"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Black</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Counsell</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Hall</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Bowes</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Fault analysis in OSS based on program slicing metrics</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>EUROMICRO Conference on Software Engineering and Advanced Applications</sb:maintitle></sb:title><sb:date>2009</sb:date><sb:publisher><sb:name>IEEE Computer Society Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>3</sb:first-page><sb:last-page>10</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0090"><ce:label>Black et al., 2006</ce:label><sb:reference id="sbref0090"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Black</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Counsell</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Hall</ce:surname></sb:author><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Wernick</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Using program slicing to identify faults in software.</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Beyond Program Slicing. No. 05451 in Dagstuhl Seminar Proceedings. Internationales Begegnungs- und Forschungszentrum fÃ¼r Informatik (IBFI)</sb:maintitle></sb:title><sb:conference>Schloss Dagstuhl, Germany</sb:conference><sb:date>2006</sb:date></sb:edited-book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0095"><ce:label>Black, 2001</ce:label><sb:reference id="sbref0095"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.E.</ce:given-name><ce:surname>Black</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Computing ripple effect for software maintenance</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Journal of Software Maintenance and Evolution: Research and Practice</sb:maintitle></sb:title><sb:volume-nr>13</sb:volume-nr></sb:series><sb:issue-nr>4</sb:issue-nr><sb:date>2001</sb:date></sb:issue><sb:pages><sb:first-page>263</sb:first-page><sb:last-page>279</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0100"><ce:label>Bomze et al., 1999</ce:label><sb:reference id="sbref0100"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>I.M.</ce:given-name><ce:surname>Bomze</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Budinich</ce:surname></sb:author><sb:author><ce:given-name>P.M.</ce:given-name><ce:surname>Pardalos</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Pelillo</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The maximum clique problem</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>Handbook of Combinatorial Optimization</sb:maintitle></sb:title><sb:date>1999</sb:date><sb:publisher><sb:name>Springer</sb:name><sb:location>US</sb:location></sb:publisher></sb:book><sb:pages><sb:first-page>1</sb:first-page><sb:last-page>74</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0105"><ce:label>Bouktif et al., 2006</ce:label><sb:reference id="sbref0105"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Bouktif</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Antoniol</ce:surname></sb:author><sb:author><ce:given-name>E.</ce:given-name><ce:surname>Merlo</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Neteler</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A novel approach to optimize clone refactoring activity</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:book-series><sb:series><sb:title><sb:maintitle>GECCO 2006: Proceedings of the 8th annual conference on Genetic and evolutionary computation</sb:maintitle></sb:title><sb:volume-nr>vol. 2</sb:volume-nr></sb:series></sb:book-series><sb:date>2006</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>1885</sb:first-page><sb:last-page>1892</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0110"><ce:label>Eick et al., 1992</ce:label><sb:reference id="sbref0110"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Eick</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Steffen</ce:surname></sb:author><sb:author><ce:given-name>E.</ce:given-name><ce:surname>Sumner</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Seesoft - A tool for visualizing line oriented software statistics</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>18</sb:volume-nr></sb:series><sb:issue-nr>11</sb:issue-nr><sb:date>1992</sb:date></sb:issue><sb:pages><sb:first-page>957</sb:first-page><sb:last-page>968</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0115"><ce:label>Eisenbarth et al., 2003</ce:label><sb:reference id="sbref0115"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Eisenbarth</ce:surname></sb:author><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Koschke</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Simon</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Locating features in source code</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>29</sb:volume-nr></sb:series><sb:issue-nr>3</sb:issue-nr><sb:date>2003</sb:date></sb:issue><sb:pages><sb:first-page>210</sb:first-page><sb:last-page>224</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0120"><ce:label>Elssamadisy and Schalliol, 2002</ce:label><sb:reference id="sbref0120"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Elssamadisy</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Schalliol</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Recognizing and responding to "bad smells" in extreme programming</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>International Conference on Software Engineering</sb:maintitle></sb:title><sb:date>2002</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>617</sb:first-page><sb:last-page>622</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0125"><ce:label>Fahndrich et al., 1998</ce:label><sb:reference id="sbref0125"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Fahndrich</ce:surname></sb:author><sb:author><ce:given-name>J.S.</ce:given-name><ce:surname>Foster</ce:surname></sb:author><sb:author><ce:given-name>Z.</ce:given-name><ce:surname>Su</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Aiken</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Partial online cycle elimination in inclusion constraint graphs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>Proceedings of the ACM SIGPLAN '98 Conference on Programming Language Design and Implementation</sb:maintitle></sb:title><sb:date>1998</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>85</sb:first-page><sb:last-page>96</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0130"><ce:label>Ferrante et al., 1987</ce:label><sb:reference id="sbref0130"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Ferrante</ce:surname></sb:author><sb:author><ce:given-name>K.J.</ce:given-name><ce:surname>Ottenstein</ce:surname></sb:author><sb:author><ce:given-name>J.D.</ce:given-name><ce:surname>Warren</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The program dependence graph and its use in optimization</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>ACM Transactions on Programming Languages and Systems</sb:maintitle></sb:title><sb:volume-nr>9</sb:volume-nr></sb:series><sb:issue-nr>3</sb:issue-nr><sb:date>1987</sb:date></sb:issue><sb:pages><sb:first-page>319</sb:first-page><sb:last-page>349</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0135"><ce:label>Gallagher and Lyle, 1991</ce:label><sb:reference id="sbref0135"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>K.B.</ce:given-name><ce:surname>Gallagher</ce:surname></sb:author><sb:author><ce:given-name>J.R.</ce:given-name><ce:surname>Lyle</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Using program slicing in software maintenance</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>17</sb:volume-nr></sb:series><sb:issue-nr>8</sb:issue-nr><sb:date>1991</sb:date></sb:issue><sb:pages><sb:first-page>751</sb:first-page><sb:last-page>761</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0140"><ce:label>Hajnal and ForgÃ¡cs, 2011</ce:label><sb:reference id="sbref0140"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>Ã.</ce:given-name><ce:surname>Hajnal</ce:surname></sb:author><sb:author><ce:given-name>I.</ce:given-name><ce:surname>ForgÃ¡cs</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A demand-driven approach to slicing legacy COBOL systems</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Journal of Software: Evolution and Process</sb:maintitle></sb:title><sb:volume-nr>24</sb:volume-nr></sb:series><sb:issue-nr>1</sb:issue-nr><sb:date>2011</sb:date></sb:issue><sb:pages><sb:first-page>67</sb:first-page><sb:last-page>82</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0145"><ce:label>Hamilton and Danicic, 2012</ce:label><sb:reference id="sbref0145"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Hamilton</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Danicic</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Dependence communities in source code</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>28th IEEE International Conference on Software Maintenance</sb:maintitle></sb:title><sb:date>2012</sb:date></sb:edited-book><sb:pages><sb:first-page>579</sb:first-page><sb:last-page>582</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0150"><ce:label>Harman et al., 2009</ce:label><sb:reference id="sbref0150"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>K.</ce:given-name><ce:surname>Gallagher</ce:surname></sb:author><sb:author><ce:given-name>N.</ce:given-name><ce:surname>Gold</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Dependence clusters in source code</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>ACM Transactions on Programming Languages and Systems</sb:maintitle></sb:title><sb:volume-nr>32</sb:volume-nr></sb:series><sb:issue-nr>1</sb:issue-nr><sb:date>2009</sb:date></sb:issue></sb:host><sb:comment>1:1-1:33</sb:comment></sb:reference></ce:bib-reference><ce:bib-reference id="bib0155"><ce:label>Horwitz et al., 1990</ce:label><sb:reference id="sbref0155"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Horwitz</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Reps</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Interprocedural slicing using dependence graphs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>ACM Transactions on Programming Languages and Systems</sb:maintitle></sb:title><sb:volume-nr>12</sb:volume-nr></sb:series><sb:issue-nr>1</sb:issue-nr><sb:date>1990</sb:date></sb:issue><sb:pages><sb:first-page>26</sb:first-page><sb:last-page>60</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0160"><ce:label>Islam et al., 2010a</ce:label><sb:reference id="sbref0160"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Islam</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Dependence cluster visualization</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>SoftVis'10: 5th ACM/IEEE Symposium on Software Visualization</sb:maintitle></sb:title><sb:date>2010</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>93</sb:first-page><sb:last-page>102</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0165"><ce:label>Islam et al., 2010b</ce:label><sb:reference id="sbref0165"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Islam</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Binkley</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Harman</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Coherent dependence clusters</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>PASTE '10: Proceedings of the 9th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering</sb:maintitle></sb:title><sb:date>2010</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>53</sb:first-page><sb:last-page>60</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0170"><ce:label>Kapser and Godfrey, 2008</ce:label><sb:reference id="sbref0170"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>C.</ce:given-name><ce:surname>Kapser</ce:surname></sb:author><sb:author><ce:given-name>M.W.</ce:given-name><ce:surname>Godfrey</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>"Cloning considered harmful" considered harmful: patterns of cloning in software</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Empirical Software Engineering</sb:maintitle></sb:title><sb:volume-nr>13</sb:volume-nr></sb:series><sb:issue-nr>6</sb:issue-nr><sb:date>2008</sb:date></sb:issue><sb:pages><sb:first-page>645</sb:first-page><sb:last-page>692</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0175"><ce:label>Krinke, 1998</ce:label><sb:reference id="sbref0175"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Static slicing of threaded programs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering</sb:maintitle></sb:title><sb:date>1998</sb:date></sb:edited-book><sb:pages><sb:first-page>35</sb:first-page><sb:last-page>42</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0180"><ce:label>Krinke, 2002</ce:label><sb:reference id="sbref0180"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Evaluating context-sensitive slicing and chopping</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>IEEE International Conference on Software Maintenance</sb:maintitle></sb:title><sb:date>2002</sb:date><sb:publisher><sb:name>IEEE Computer Society Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>22</sb:first-page><sb:last-page>31</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0185"><ce:label>Krinke, 2003</ce:label><sb:reference id="sbref0185"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Krinke</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Context-sensitive slicing of concurrent programs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Proceedings of the 9th European Software Engineering Conference</sb:maintitle></sb:title><sb:conference>ACM Press</sb:conference><sb:date>2003</sb:date></sb:edited-book><sb:pages><sb:first-page>178</sb:first-page><sb:last-page>187</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0190"><ce:label>Mitchell and Mancoridis, 2006</ce:label><sb:reference id="sbref0190"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>B.S.</ce:given-name><ce:surname>Mitchell</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Mancoridis</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>On the automatic modularization of software systems using the bunch tool</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>32</sb:volume-nr></sb:series><sb:issue-nr>3</sb:issue-nr><sb:date>2006</sb:date></sb:issue><sb:pages><sb:first-page>193</sb:first-page><sb:last-page>208</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0195"><ce:label>Ottenstein and Ottenstein, 1984</ce:label><sb:reference id="sbref0195"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>K.J.</ce:given-name><ce:surname>Ottenstein</ce:surname></sb:author><sb:author><ce:given-name>L.M.</ce:given-name><ce:surname>Ottenstein</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The program dependence graph in software development environments</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environmt, SIGPLAN Notices</sb:maintitle></sb:title><sb:volume-nr>19</sb:volume-nr></sb:series><sb:issue-nr>5</sb:issue-nr><sb:date>1984</sb:date></sb:issue><sb:pages><sb:first-page>177</sb:first-page><sb:last-page>184</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0200"><ce:label>Ren et al., 2006</ce:label><sb:reference id="sbref0200"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>X.</ce:given-name><ce:surname>Ren</ce:surname></sb:author><sb:author><ce:given-name>O.</ce:given-name><ce:surname>Chesley</ce:surname></sb:author><sb:author><ce:given-name>B.G.</ce:given-name><ce:surname>Ryder</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Identifying failure causes in Java programs: an application of change impact analysis</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>32</sb:volume-nr></sb:series><sb:issue-nr>9</sb:issue-nr><sb:date>2006</sb:date></sb:issue><sb:pages><sb:first-page>718</sb:first-page><sb:last-page>732</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0205"><ce:label>Ren et al., 2005</ce:label><sb:reference id="sbref0205"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>X.</ce:given-name><ce:surname>Ren</ce:surname></sb:author><sb:author><ce:given-name>B.G.</ce:given-name><ce:surname>Ryder</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>StÃ¶rzer</ce:surname></sb:author><sb:author><ce:given-name>F.</ce:given-name><ce:surname>Tip</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Chianti: a change impact analysis tool for Java programs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>27th International Conference on Software Engineering</sb:maintitle></sb:title><sb:date>2005</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>664</sb:first-page><sb:last-page>665</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0210"><ce:label>Robles et al., 2004</ce:label><sb:reference id="sbref0210"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Robles</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Koch</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Gonzalez-Barahona</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Remote analysis and measurement of libre software systems by means of the CVSAnalY tool</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Proceedings of Second International Workshop on Remote Analysis and Measurement of Software Systems</sb:maintitle></sb:title><sb:conference>IEE</sb:conference><sb:date>2004</sb:date></sb:edited-book><sb:pages><sb:first-page>51</sb:first-page><sb:last-page>55</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0215"><ce:label>Savernik, 2007</ce:label><sb:reference id="sbref0215"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Savernik</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Entwicklung eines automatischen Verfahrens zur AuflÃ¶sung statischer zyklischer AbhÃ¤ngigkeiten in Softwaresystemen (in German)</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Software Engineering 2007 - BeitrÃ¤ge zu den Workshops. Vol. 106 of LNI. GI</sb:maintitle></sb:title><sb:date>2007</sb:date></sb:edited-book><sb:pages><sb:first-page>357</sb:first-page><sb:last-page>360</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0220"><ce:label>Shapiro and Horwitz, 1997</ce:label><sb:reference id="sbref0220"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Shapiro</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Horwitz</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The effects of the precision of pointer analysis</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>Static Analysis Symposium. Vol. 1302 of Lecture Notes in Computer Science</sb:maintitle></sb:title><sb:date>1997</sb:date><sb:publisher><sb:name>Springer Berlin</sb:name><sb:location>Heidelberg</sb:location></sb:publisher></sb:book><sb:pages><sb:first-page>16</sb:first-page><sb:last-page>34</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0225"><ce:label>Storey et al., 1997</ce:label><sb:reference id="sbref0225"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.-A.D.</ce:given-name><ce:surname>Storey</ce:surname></sb:author><sb:author><ce:given-name>K.</ce:given-name><ce:surname>Wong</ce:surname></sb:author><sb:author><ce:given-name>H.A.</ce:given-name><ce:surname>Muller</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Rigi: a visualization environment for reverse engineering</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:title><sb:maintitle>Proceedings of the 19th International Conference on Software Engineering</sb:maintitle></sb:title><sb:date>1997</sb:date><sb:publisher><sb:name>ACM Press</sb:name></sb:publisher></sb:book><sb:pages><sb:first-page>606</sb:first-page><sb:last-page>607</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0230"><ce:label>Szegedi et al., 2007</ce:label><sb:reference id="sbref0230"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Szegedi</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Gergely</ce:surname></sb:author><sb:author><ce:given-name>Ã.</ce:given-name><ce:surname>BeszÃ©des</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>GyimÃ³thy</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>TÃ³th</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Verifying the concept of union slices on Java programs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>11th European Conference on Software Maintenance and Reengineering</sb:maintitle></sb:title><sb:date>2007</sb:date></sb:edited-book><sb:pages><sb:first-page>233</sb:first-page><sb:last-page>242</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0235"><ce:label>Tonella, 2003</ce:label><sb:reference id="sbref0235"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Tonella</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Using a concept lattice of decomposition slices for program understanding and impact analysis</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>29</sb:volume-nr></sb:series><sb:issue-nr>June (6)</sb:issue-nr><sb:date>2003</sb:date></sb:issue><sb:pages><sb:first-page>495</sb:first-page><sb:last-page>509</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0240"><ce:label>Weiser, 1984</ce:label><sb:reference id="sbref0240"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Weiser</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Program slicing</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>10</sb:volume-nr></sb:series><sb:issue-nr>4</sb:issue-nr><sb:date>1984</sb:date></sb:issue><sb:pages><sb:first-page>352</sb:first-page><sb:last-page>357</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0245"><ce:label>Wheeler, 2004</ce:label><sb:reference id="sbref0245"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.A.</ce:given-name><ce:surname>Wheeler</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>SLOC Count User's Guide</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:date>2004</sb:date></sb:book></sb:host><sb:host><sb:e-host><ce:inter-ref id="intr0020" xlink:href="http://www.dwheeler.com/sloccount/sloccount.html" xlink:type="simple">http://www.dwheeler.com/sloccount/sloccount.html</ce:inter-ref></sb:e-host></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="bib0250"><ce:label>Yau and Collofello, 1985</ce:label><sb:reference id="sbref0250"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.S.</ce:given-name><ce:surname>Yau</ce:surname></sb:author><sb:author><ce:given-name>J.S.</ce:given-name><ce:surname>Collofello</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Design stability measures for software maintenance</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Transactions on Software Engineering</sb:maintitle></sb:title><sb:volume-nr>11</sb:volume-nr></sb:series><sb:issue-nr>September (9)</sb:issue-nr><sb:date>1985</sb:date></sb:issue><sb:pages><sb:first-page>849</sb:first-page><sb:last-page>856</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference></ce:bibliography-sec></ce:bibliography><ce:biography id="vt0005" view="all"><ce:link locator="fx1"/><ce:simple-para id="spar4120" view="all"><ce:bold>Syed Islam</ce:bold> is a Research Associate in the Software Systems Engineering Group at University College London, he is also a part of the CREST centre. His interests are in static program analysis, particularly in program slicing and software clustering. His other research interests include Search Based Software Engineering (SBSE) and Automatic Bug Assignment.</ce:simple-para></ce:biography><ce:biography id="vt0010" view="all"><ce:link locator="fx2"/><ce:simple-para id="spar2120" view="all"><ce:bold>Jens Krinke</ce:bold> is Senior Lecturer in the Software Systems Engineering Group at the University College London, where he is Deputy Director of the CREST centre. He is well known for his work on program slicing; current research topics include program analysis for software engineering purposes, in particular dependence analysis for software security, and clone detection and its use in code provenance. Before joining the University College London, he was at King's College London and the FernUniversitÃ¤t in Hagen, Germany, where he worked on aspect mining and e-learning applications for distant teaching of software engineering.</ce:simple-para></ce:biography><ce:biography id="vt0015" view="all"><ce:link locator="fx3"/><ce:simple-para id="spar1120" view="all"><ce:bold>Dr. David Binkley</ce:bold> is a Professor of Computer Science at Loyola University Maryland where he has worked since earning his doctorate from the University of Wisconsin in 1991. From 1993 to 2000, Dr. Binkley was a visiting faculty researcher at the National Institute of Standards and Technology (NIST), where his work included participating in the <ce:sans-serif>Unravel</ce:sans-serif> program slicer project. While on leave from Loyola in 2000, he worked with Grammatech Inc. on the System Dependence Graph (SDG) based slicer <ce:sans-serif>CodeSurfer</ce:sans-serif> and in 2008 he joined the researchers at the Crest Centre of Kings' College London to work on dependence cluster analysis. Dr. Binkley's current NSF funded research focuses on semantics-based software engineering tools, the application of information retrieval techniques in software engineering, and improved techniques for software testing. In 2014 he will co-chair the program for Software Evolution Week which joins The Working Conference on Reverse Engineering (WCRE) and The European Conference on Software Maintenance and Reengineering (CSMR).</ce:simple-para></ce:biography><ce:biography id="vt0020" view="all"><ce:link locator="fx4"/><ce:simple-para id="spar3120" view="all"><ce:bold>Mark Harman</ce:bold> is professor of Software Engineering in the Department of Computer Science at University College London, where he directs the CREST centre and is Head of Software Systems Engineering. He is widely known for work on source code analysis and testing and was instrumental in founding the field of Search Based Software Engineering (SBSE). SBSE research has rapidly grown over the past five years and now includes over 1000 authors, from nearly 300 institutions spread over more than 40 countries. A recent tutorial paper on SBSE can be found here: <ce:inter-ref id="intr1005" xlink:href="http://www.cs.ucl.ac.uk/staff/mharman/laser.pdf" xlink:type="simple">http://www.cs.ucl.ac.uk/staff/mharman/laser.pdf</ce:inter-ref>.</ce:simple-para></ce:biography></tail></article></xocs:serial-item></xocs:doc>
