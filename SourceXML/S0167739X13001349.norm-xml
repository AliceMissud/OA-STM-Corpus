<?xml version="1.0" encoding="UTF-8"?><!-- Normalized for easier text mining. --><xocs:doc xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.elsevier.com/xml/ja/dtd" xmlns:ja="http://www.elsevier.com/xml/ja/dtd" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:tb="http://www.elsevier.com/xml/common/table/dtd" xmlns:sb="http://www.elsevier.com/xml/common/struct-bib/dtd" xmlns:ce="http://www.elsevier.com/xml/common/dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:cals="http://www.elsevier.com/xml/common/cals/dtd" xsi:schemaLocation="http://www.elsevier.com/xml/xocs/dtd http://schema.elsevier.com/dtds/document/fulltext/xcr/xocs-article.xsd"><xocs:meta><xocs:content-family>serial</xocs:content-family><xocs:content-type>JL</xocs:content-type><xocs:cid>271521</xocs:cid><xocs:srctitle>Future Generation Computer Systems</xocs:srctitle><xocs:normalized-srctitle>FUTUREGENERATIONCOMPUTERSYSTEMS</xocs:normalized-srctitle><xocs:orig-load-date>2013-07-15</xocs:orig-load-date><xocs:ew-transaction-id>2013-11-19T16:55:38</xocs:ew-transaction-id><xocs:eid>1-s2.0-S0167739X13001349</xocs:eid><xocs:pii-formatted>S0167-739X(13)00134-9</xocs:pii-formatted><xocs:pii-unformatted>S0167739X13001349</xocs:pii-unformatted><xocs:doi>10.1016/j.future.2013.06.020</xocs:doi><xocs:item-stage>S300</xocs:item-stage><xocs:item-version-number>S300.1</xocs:item-version-number><xocs:item-weight>FULL-TEXT</xocs:item-weight><xocs:hub-eid>1-s2.0-S0167739X13X00068</xocs:hub-eid><xocs:timestamp>2014-02-03T15:49:17.385808-05:00</xocs:timestamp><xocs:issns><xocs:issn-primary-formatted>0167-739X</xocs:issn-primary-formatted><xocs:issn-primary-unformatted>0167739X</xocs:issn-primary-unformatted></xocs:issns><xocs:sponsored-access-type>UNLIMITED</xocs:sponsored-access-type><xocs:funding-body-id>NONE</xocs:funding-body-id><xocs:crossmark>true</xocs:crossmark><xocs:vol-first>30</xocs:vol-first><xocs:suppl>C</xocs:suppl><xocs:vol-iss-suppl-text>Volume 30</xocs:vol-iss-suppl-text><xocs:sort-order>26</xocs:sort-order><xocs:first-fp>202</xocs:first-fp><xocs:last-lp>215</xocs:last-lp><xocs:pages><xocs:first-page>202</xocs:first-page><xocs:last-page>215</xocs:last-page></xocs:pages><xocs:cover-date-orig><xocs:start-date>201401</xocs:start-date></xocs:cover-date-orig><xocs:cover-date-text>January 2014</xocs:cover-date-text><xocs:cover-date-start>2014-01-01</xocs:cover-date-start><xocs:cover-date-end>2014-01-31</xocs:cover-date-end><xocs:cover-date-year>2014</xocs:cover-date-year><xocs:title-editors-groups><xocs:title-editors-group><ce:title>Special Issue on Extreme Scale Parallel Architectures and Systems, Cryptography in Cloud Computing and Recent Advances in Parallel and Distributed Systems, ICPADS 2012 Selected Papers</ce:title><ce:editors><ce:author-group><ce:author><ce:given-name>Georgios</ce:given-name><ce:surname>Theodoropoulos</ce:surname></ce:author><ce:author><ce:given-name>Kostas</ce:given-name><ce:surname>Katrinis</ce:surname></ce:author><ce:author><ce:given-name>Rolf</ce:given-name><ce:surname>Riesen</ce:surname></ce:author><ce:author><ce:given-name>Shoukat</ce:given-name><ce:surname>Ali</ce:surname></ce:author><ce:author><ce:given-name>Robert H.</ce:given-name><ce:surname>Deng</ce:surname></ce:author><ce:author><ce:given-name>Yang</ce:given-name><ce:surname>Xiang</ce:surname></ce:author><ce:author><ce:given-name>Man Ho</ce:given-name><ce:surname>Au</ce:surname></ce:author><ce:author><ce:given-name>Xueyan</ce:given-name><ce:surname>Tang</ce:surname></ce:author><ce:author><ce:given-name>Wentong</ce:given-name><ce:surname>Cai</ce:surname></ce:author><ce:author><ce:given-name>Rick Siow Mong</ce:given-name><ce:surname>Goh</ce:surname></ce:author></ce:author-group></ce:editors></xocs:title-editors-group></xocs:title-editors-groups><xocs:hub-sec><xocs:hub-sec-title>Special Section: Recent Advances in Parallel and Distributed Systems, ICPADS 2012 Selected Papers; Guest Editors: Xueyan Tang, Wentong Cai and Rick Siow Mong Goh</xocs:hub-sec-title></xocs:hub-sec><xocs:document-type>article</xocs:document-type><xocs:document-subtype>fla</xocs:document-subtype><xocs:copyright-line>Copyright Â© 2013 The Authors. Published by Elsevier B.V. All rights reserved.</xocs:copyright-line><xocs:normalized-article-title>AMEMORYACCESSMODELFORHIGHLYTHREADEDMANYCOREARCHITECTURES</xocs:normalized-article-title><xocs:normalized-first-auth-surname>MA</xocs:normalized-first-auth-surname><xocs:normalized-first-auth-initial>L</xocs:normalized-first-auth-initial><xocs:item-toc><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>1</xocs:item-toc-label><xocs:item-toc-section-title>Introduction</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2</xocs:item-toc-label><xocs:item-toc-section-title>Related work</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3</xocs:item-toc-label><xocs:item-toc-section-title>TMM model</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.1</xocs:item-toc-label><xocs:item-toc-section-title>Highly-threaded, many-core architectures</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.2</xocs:item-toc-label><xocs:item-toc-section-title>TMM model parameters</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.3</xocs:item-toc-label><xocs:item-toc-section-title>TMM model applicability</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.4</xocs:item-toc-label><xocs:item-toc-section-title>TMM analysis structure</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4</xocs:item-toc-label><xocs:item-toc-section-title>Analysis of all pairs shortest paths algorithms using the TMM model</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4.1</xocs:item-toc-label><xocs:item-toc-section-title>Dynamic programming via matrix multiplication</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>PRAM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>TMM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4.2</xocs:item-toc-label><xocs:item-toc-section-title>Johnson's algorithm: Dijkstra's algorithm using binary heaps</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>PRAM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>TMM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4.3</xocs:item-toc-label><xocs:item-toc-section-title>Johnson's algorithm: Dijkstra's algorithm using arrays</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>PRAM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>TMM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4.4</xocs:item-toc-label><xocs:item-toc-section-title><mml:math altimg="si202.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> iterations of Bellman-Ford algorithm</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>PRAM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>TMM algorithm and analysis</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5</xocs:item-toc-label><xocs:item-toc-section-title>Comparison of the various algorithms</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.1</xocs:item-toc-label><xocs:item-toc-section-title>Influence of machine parameters</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.1.1</xocs:item-toc-label><xocs:item-toc-section-title>Dynamic programming vs. Johnson's algorithm using binary heaps when <mml:math altimg="si241.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow></mml:math></xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.1.2</xocs:item-toc-label><xocs:item-toc-section-title>Johnson's algorithm using binary heaps vs. Johnson's algorithm using arrays when <mml:math altimg="si247.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math></xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.2</xocs:item-toc-label><xocs:item-toc-section-title>Influence of graph size</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6</xocs:item-toc-label><xocs:item-toc-section-title>Effect of problem size</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.1</xocs:item-toc-label><xocs:item-toc-section-title>Vertices fit in local memory</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.2</xocs:item-toc-label><xocs:item-toc-section-title>Edges fit in the combined local memories</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7</xocs:item-toc-label><xocs:item-toc-section-title>Empirical investigation</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.1</xocs:item-toc-label><xocs:item-toc-section-title>Experimental Setup</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.2</xocs:item-toc-label><xocs:item-toc-section-title>Effect of the number of threads</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.3</xocs:item-toc-label><xocs:item-toc-section-title>Effect of fast local memory size</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.4</xocs:item-toc-label><xocs:item-toc-section-title>Comparison between the dynamic programming and Johnson's algorithms</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>8</xocs:item-toc-label><xocs:item-toc-section-title>Conclusions</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:acknowledgment"><xocs:item-toc-section-title>Acknowledgments</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:bibliography"><xocs:item-toc-section-title>References</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc><xocs:references><xocs:ref-info refid="sbref1"><xocs:ref-normalized-surname>ALCANTARA</xocs:ref-normalized-surname><xocs:ref-pub-year>2009</xocs:ref-pub-year><xocs:ref-first-fp>154:1</xocs:ref-first-fp><xocs:ref-last-lp>154:9</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="or000005"/><xocs:ref-info refid="or000010"/><xocs:ref-info refid="or000015"/><xocs:ref-info refid="or000020"/><xocs:ref-info refid="or000025"/><xocs:ref-info refid="or000030"/><xocs:ref-info refid="sbref8"><xocs:ref-normalized-surname>LIU</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>1270</xocs:ref-first-fp><xocs:ref-last-lp>1281</xocs:ref-last-lp><xocs:ref-normalized-initial>W</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref9"><xocs:ref-normalized-surname>LIU</xocs:ref-normalized-surname><xocs:ref-pub-year>2010</xocs:ref-pub-year><xocs:ref-first-fp>93</xocs:ref-first-fp><xocs:ref-normalized-initial>Y</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="or000035"/><xocs:ref-info refid="or000040"/><xocs:ref-info refid="or000045"/><xocs:ref-info refid="or000050"/><xocs:ref-info refid="sbref14"><xocs:ref-normalized-surname>CHE</xocs:ref-normalized-surname><xocs:ref-pub-year>2008</xocs:ref-pub-year><xocs:ref-first-fp>1370</xocs:ref-first-fp><xocs:ref-last-lp>1380</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="or000055"/><xocs:ref-info refid="or000060"/><xocs:ref-info refid="or000065"/><xocs:ref-info refid="or000070"/><xocs:ref-info refid="or000075"/><xocs:ref-info refid="or000080"/><xocs:ref-info refid="sbref21"><xocs:ref-normalized-surname>AHO</xocs:ref-normalized-surname><xocs:ref-pub-year>1974</xocs:ref-pub-year><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>DESIGNANALYSISCOMPUTERALGORITHMS</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="sbref22"><xocs:ref-normalized-surname>AGGARWAL</xocs:ref-normalized-surname><xocs:ref-pub-year>1988</xocs:ref-pub-year><xocs:ref-first-fp>1116</xocs:ref-first-fp><xocs:ref-last-lp>1127</xocs:ref-last-lp><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="or000085"/><xocs:ref-info refid="or000090"/><xocs:ref-info refid="or000095"/><xocs:ref-info refid="or000100"/><xocs:ref-info refid="or000105"/><xocs:ref-info refid="sbref28"><xocs:ref-normalized-surname>ALPERN</xocs:ref-normalized-surname><xocs:ref-pub-year>1994</xocs:ref-pub-year><xocs:ref-first-fp>72</xocs:ref-first-fp><xocs:ref-last-lp>109</xocs:ref-last-lp><xocs:ref-normalized-initial>B</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref29"><xocs:ref-normalized-surname>VITTER</xocs:ref-normalized-surname><xocs:ref-pub-year>1993</xocs:ref-pub-year><xocs:ref-first-fp>107</xocs:ref-first-fp><xocs:ref-last-lp>114</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="or000110"/><xocs:ref-info refid="or000115"/><xocs:ref-info refid="sbref32"><xocs:ref-normalized-surname>VISHKIN</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-normalized-initial>U</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>HANDBOOKPARALLELCOMPUTINGMODELSALGORITHMSAPPLICATIONS</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>MODELSFORADVANCINGPRAMOTHERALGORITHMSPARALLELPROGRAMSFORAPRAMONCHIPPLATFORM</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="or000120"/><xocs:ref-info refid="sbref34"><xocs:ref-normalized-surname>VALIANT</xocs:ref-normalized-surname><xocs:ref-pub-year>1990</xocs:ref-pub-year><xocs:ref-first-fp>103</xocs:ref-first-fp><xocs:ref-last-lp>111</xocs:ref-last-lp><xocs:ref-normalized-initial>L</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref35"><xocs:ref-normalized-surname>VITTER</xocs:ref-normalized-surname><xocs:ref-pub-year>1994</xocs:ref-pub-year><xocs:ref-first-fp>110</xocs:ref-first-fp><xocs:ref-last-lp>147</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="or000125"/><xocs:ref-info refid="or000130"/><xocs:ref-info refid="or000135"/><xocs:ref-info refid="or000140"/><xocs:ref-info refid="or000145"/><xocs:ref-info refid="or000150"/><xocs:ref-info refid="or000155"/><xocs:ref-info refid="or000160"/><xocs:ref-info refid="or000165"/><xocs:ref-info refid="or000170"/><xocs:ref-info refid="or000175"/><xocs:ref-info refid="or000180"/><xocs:ref-info refid="or000185"/><xocs:ref-info refid="or000190"/><xocs:ref-info refid="or000195"/><xocs:ref-info refid="or000200"/><xocs:ref-info refid="sbref52"><xocs:ref-normalized-surname>ALVERSON</xocs:ref-normalized-surname><xocs:ref-pub-year>1990</xocs:ref-pub-year><xocs:ref-first-fp>1</xocs:ref-first-fp><xocs:ref-last-lp>6</xocs:ref-last-lp><xocs:ref-normalized-initial>R</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>PROC4THINTERNATIONALCONFERENCESUPERCOMPUTING</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>TERACOMPUTERSYSTEM</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="sbref53"><xocs:ref-normalized-surname>CORMEN</xocs:ref-normalized-surname><xocs:ref-pub-year>2001</xocs:ref-pub-year><xocs:ref-normalized-initial>T</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>INTRODUCTIONALGORITHMS</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="sbref54"><xocs:ref-normalized-surname>JOHNSON</xocs:ref-normalized-surname><xocs:ref-pub-year>1977</xocs:ref-pub-year><xocs:ref-first-fp>1</xocs:ref-first-fp><xocs:ref-last-lp>13</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref55"><xocs:ref-normalized-surname>DIJKSTRA</xocs:ref-normalized-surname><xocs:ref-pub-year>1959</xocs:ref-pub-year><xocs:ref-first-fp>269</xocs:ref-first-fp><xocs:ref-last-lp>271</xocs:ref-last-lp><xocs:ref-normalized-initial>E</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref56"><xocs:ref-normalized-surname>BELLMAN</xocs:ref-normalized-surname><xocs:ref-pub-year>1958</xocs:ref-pub-year><xocs:ref-first-fp>87</xocs:ref-first-fp><xocs:ref-last-lp>90</xocs:ref-last-lp><xocs:ref-normalized-initial>R</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="sbref57"><xocs:ref-normalized-surname>LESTOR</xocs:ref-normalized-surname><xocs:ref-pub-year>1962</xocs:ref-pub-year><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>FLOWSINNETWORKS</xocs:ref-normalized-srctitle></xocs:ref-info></xocs:references><xocs:attachment-metadata-doc><xocs:attachment-set-type>item</xocs:attachment-set-type><xocs:pii-formatted>S0167-739X(13)00134-9</xocs:pii-formatted><xocs:pii-unformatted>S0167739X13001349</xocs:pii-unformatted><xocs:eid>1-s2.0-S0167739X13001349</xocs:eid><xocs:doi>10.1016/j.future.2013.06.020</xocs:doi><xocs:cid>271521</xocs:cid><xocs:timestamp>2013-11-19T15:18:19.79936-05:00</xocs:timestamp><xocs:path>/271521/1-s2.0-S0167739X13X00068/1-s2.0-S0167739X13001349/</xocs:path><xocs:cover-date-start>2014-01-01</xocs:cover-date-start><xocs:cover-date-end>2014-01-31</xocs:cover-date-end><xocs:sponsored-access-type>UNLIMITED</xocs:sponsored-access-type><xocs:funding-body-id>NONE</xocs:funding-body-id><xocs:attachments><xocs:web-pdf><xocs:attachment-eid>1-s2.0-S0167739X13001349-main.pdf</xocs:attachment-eid><xocs:filename>main.pdf</xocs:filename><xocs:extension>pdf</xocs:extension><xocs:pdf-optimized>true</xocs:pdf-optimized><xocs:filesize>1370402</xocs:filesize><xocs:web-pdf-purpose>MAIN</xocs:web-pdf-purpose><xocs:web-pdf-page-count>14</xocs:web-pdf-page-count><xocs:web-pdf-images><xocs:web-pdf-image><xocs:attachment-eid>1-s2.0-S0167739X13001349-main_1.png</xocs:attachment-eid><xocs:filename>main_1.png</xocs:filename><xocs:extension>png</xocs:extension><xocs:filesize>132071</xocs:filesize><xocs:pixel-height>849</xocs:pixel-height><xocs:pixel-width>656</xocs:pixel-width><xocs:attachment-type>IMAGE-WEB-PDF</xocs:attachment-type><xocs:pdf-page-num>1</xocs:pdf-page-num></xocs:web-pdf-image></xocs:web-pdf-images></xocs:web-pdf><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si82.gif</xocs:attachment-eid><xocs:file-basename>si82</xocs:file-basename><xocs:filename>si82.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>139</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si259.gif</xocs:attachment-eid><xocs:file-basename>si259</xocs:file-basename><xocs:filename>si259.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>273</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si86.gif</xocs:attachment-eid><xocs:file-basename>si86</xocs:file-basename><xocs:filename>si86.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>449</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>124</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si110.gif</xocs:attachment-eid><xocs:file-basename>si110</xocs:file-basename><xocs:filename>si110.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>160</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>24</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si62.gif</xocs:attachment-eid><xocs:file-basename>si62</xocs:file-basename><xocs:filename>si62.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>189</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>42</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si295.gif</xocs:attachment-eid><xocs:file-basename>si295</xocs:file-basename><xocs:filename>si295.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si290.gif</xocs:attachment-eid><xocs:file-basename>si290</xocs:file-basename><xocs:filename>si290.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>228</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>58</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si164.gif</xocs:attachment-eid><xocs:file-basename>si164</xocs:file-basename><xocs:filename>si164.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si115.gif</xocs:attachment-eid><xocs:file-basename>si115</xocs:file-basename><xocs:filename>si115.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>198</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si216.gif</xocs:attachment-eid><xocs:file-basename>si216</xocs:file-basename><xocs:filename>si216.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si102.gif</xocs:attachment-eid><xocs:file-basename>si102</xocs:file-basename><xocs:filename>si102.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>114</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>8</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si97.gif</xocs:attachment-eid><xocs:file-basename>si97</xocs:file-basename><xocs:filename>si97.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>159</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si230.gif</xocs:attachment-eid><xocs:file-basename>si230</xocs:file-basename><xocs:filename>si230.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>498</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>126</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si146.gif</xocs:attachment-eid><xocs:file-basename>si146</xocs:file-basename><xocs:filename>si146.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si45.gif</xocs:attachment-eid><xocs:file-basename>si45</xocs:file-basename><xocs:filename>si45.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>134</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si127.gif</xocs:attachment-eid><xocs:file-basename>si127</xocs:file-basename><xocs:filename>si127.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>184</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>40</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si180.gif</xocs:attachment-eid><xocs:file-basename>si180</xocs:file-basename><xocs:filename>si180.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si40.gif</xocs:attachment-eid><xocs:file-basename>si40</xocs:file-basename><xocs:filename>si40.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>345</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si287.gif</xocs:attachment-eid><xocs:file-basename>si287</xocs:file-basename><xocs:filename>si287.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>453</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>116</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si51.gif</xocs:attachment-eid><xocs:file-basename>si51</xocs:file-basename><xocs:filename>si51.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si122.gif</xocs:attachment-eid><xocs:file-basename>si122</xocs:file-basename><xocs:filename>si122.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>170</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>22</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si185.gif</xocs:attachment-eid><xocs:file-basename>si185</xocs:file-basename><xocs:filename>si185.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si80.gif</xocs:attachment-eid><xocs:file-basename>si80</xocs:file-basename><xocs:filename>si80.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1449</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>347</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si250.gif</xocs:attachment-eid><xocs:file-basename>si250</xocs:file-basename><xocs:filename>si250.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>270</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>68</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si188.gif</xocs:attachment-eid><xocs:file-basename>si188</xocs:file-basename><xocs:filename>si188.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>388</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>82</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si235.gif</xocs:attachment-eid><xocs:file-basename>si235</xocs:file-basename><xocs:filename>si235.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>198</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si267.gif</xocs:attachment-eid><xocs:file-basename>si267</xocs:file-basename><xocs:filename>si267.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si151.gif</xocs:attachment-eid><xocs:file-basename>si151</xocs:file-basename><xocs:filename>si151.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>370</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>95</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si32.gif</xocs:attachment-eid><xocs:file-basename>si32</xocs:file-basename><xocs:filename>si32.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si26.gif</xocs:attachment-eid><xocs:file-basename>si26</xocs:file-basename><xocs:filename>si26.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>359</xocs:filesize><xocs:pixel-height>21</xocs:pixel-height><xocs:pixel-width>78</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si121.gif</xocs:attachment-eid><xocs:file-basename>si121</xocs:file-basename><xocs:filename>si121.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si227.gif</xocs:attachment-eid><xocs:file-basename>si227</xocs:file-basename><xocs:filename>si227.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si66.gif</xocs:attachment-eid><xocs:file-basename>si66</xocs:file-basename><xocs:filename>si66.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>326</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si199.gif</xocs:attachment-eid><xocs:file-basename>si199</xocs:file-basename><xocs:filename>si199.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>493</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>126</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si118.gif</xocs:attachment-eid><xocs:file-basename>si118</xocs:file-basename><xocs:filename>si118.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>857</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>190</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si170.gif</xocs:attachment-eid><xocs:file-basename>si170</xocs:file-basename><xocs:filename>si170.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si152.gif</xocs:attachment-eid><xocs:file-basename>si152</xocs:file-basename><xocs:filename>si152.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si59.gif</xocs:attachment-eid><xocs:file-basename>si59</xocs:file-basename><xocs:filename>si59.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si108.gif</xocs:attachment-eid><xocs:file-basename>si108</xocs:file-basename><xocs:filename>si108.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>139</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si75.gif</xocs:attachment-eid><xocs:file-basename>si75</xocs:file-basename><xocs:filename>si75.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>171</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si274.gif</xocs:attachment-eid><xocs:file-basename>si274</xocs:file-basename><xocs:filename>si274.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si55.gif</xocs:attachment-eid><xocs:file-basename>si55</xocs:file-basename><xocs:filename>si55.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>148</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si93.gif</xocs:attachment-eid><xocs:file-basename>si93</xocs:file-basename><xocs:filename>si93.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>107</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>8</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si126.gif</xocs:attachment-eid><xocs:file-basename>si126</xocs:file-basename><xocs:filename>si126.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>705</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>200</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si194.gif</xocs:attachment-eid><xocs:file-basename>si194</xocs:file-basename><xocs:filename>si194.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>440</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>122</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si125.gif</xocs:attachment-eid><xocs:file-basename>si125</xocs:file-basename><xocs:filename>si125.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>258</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>47</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si42.gif</xocs:attachment-eid><xocs:file-basename>si42</xocs:file-basename><xocs:filename>si42.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>188</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si240.gif</xocs:attachment-eid><xocs:file-basename>si240</xocs:file-basename><xocs:filename>si240.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si98.gif</xocs:attachment-eid><xocs:file-basename>si98</xocs:file-basename><xocs:filename>si98.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>145</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si261.gif</xocs:attachment-eid><xocs:file-basename>si261</xocs:file-basename><xocs:filename>si261.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si203.gif</xocs:attachment-eid><xocs:file-basename>si203</xocs:file-basename><xocs:filename>si203.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>234</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si157.gif</xocs:attachment-eid><xocs:file-basename>si157</xocs:file-basename><xocs:filename>si157.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si33.gif</xocs:attachment-eid><xocs:file-basename>si33</xocs:file-basename><xocs:filename>si33.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>179</xocs:filesize><xocs:pixel-height>21</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si285.gif</xocs:attachment-eid><xocs:file-basename>si285</xocs:file-basename><xocs:filename>si285.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>217</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si99.gif</xocs:attachment-eid><xocs:file-basename>si99</xocs:file-basename><xocs:filename>si99.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>139</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si284.gif</xocs:attachment-eid><xocs:file-basename>si284</xocs:file-basename><xocs:filename>si284.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>136</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si28.gif</xocs:attachment-eid><xocs:file-basename>si28</xocs:file-basename><xocs:filename>si28.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>286</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>78</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si209.gif</xocs:attachment-eid><xocs:file-basename>si209</xocs:file-basename><xocs:filename>si209.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si47.gif</xocs:attachment-eid><xocs:file-basename>si47</xocs:file-basename><xocs:filename>si47.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si253.gif</xocs:attachment-eid><xocs:file-basename>si253</xocs:file-basename><xocs:filename>si253.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si1.gif</xocs:attachment-eid><xocs:file-basename>si1</xocs:file-basename><xocs:filename>si1.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>132</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si23.gif</xocs:attachment-eid><xocs:file-basename>si23</xocs:file-basename><xocs:filename>si23.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>187</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si183.gif</xocs:attachment-eid><xocs:file-basename>si183</xocs:file-basename><xocs:filename>si183.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>864</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>181</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si39.gif</xocs:attachment-eid><xocs:file-basename>si39</xocs:file-basename><xocs:filename>si39.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>10</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si91.gif</xocs:attachment-eid><xocs:file-basename>si91</xocs:file-basename><xocs:filename>si91.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si169.gif</xocs:attachment-eid><xocs:file-basename>si169</xocs:file-basename><xocs:filename>si169.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>426</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>107</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si193.gif</xocs:attachment-eid><xocs:file-basename>si193</xocs:file-basename><xocs:filename>si193.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>144</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si262.gif</xocs:attachment-eid><xocs:file-basename>si262</xocs:file-basename><xocs:filename>si262.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>260</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>62</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si270.gif</xocs:attachment-eid><xocs:file-basename>si270</xocs:file-basename><xocs:filename>si270.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>381</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>97</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si139.gif</xocs:attachment-eid><xocs:file-basename>si139</xocs:file-basename><xocs:filename>si139.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>335</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>86</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si89.gif</xocs:attachment-eid><xocs:file-basename>si89</xocs:file-basename><xocs:filename>si89.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si137.gif</xocs:attachment-eid><xocs:file-basename>si137</xocs:file-basename><xocs:filename>si137.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>966</xocs:filesize><xocs:pixel-height>42</xocs:pixel-height><xocs:pixel-width>224</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si14.gif</xocs:attachment-eid><xocs:file-basename>si14</xocs:file-basename><xocs:filename>si14.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si211.gif</xocs:attachment-eid><xocs:file-basename>si211</xocs:file-basename><xocs:filename>si211.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si48.gif</xocs:attachment-eid><xocs:file-basename>si48</xocs:file-basename><xocs:filename>si48.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si3.gif</xocs:attachment-eid><xocs:file-basename>si3</xocs:file-basename><xocs:filename>si3.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>424</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>117</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si43.gif</xocs:attachment-eid><xocs:file-basename>si43</xocs:file-basename><xocs:filename>si43.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si228.gif</xocs:attachment-eid><xocs:file-basename>si228</xocs:file-basename><xocs:filename>si228.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>846</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>215</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si190.gif</xocs:attachment-eid><xocs:file-basename>si190</xocs:file-basename><xocs:filename>si190.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si84.gif</xocs:attachment-eid><xocs:file-basename>si84</xocs:file-basename><xocs:filename>si84.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>139</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si192.gif</xocs:attachment-eid><xocs:file-basename>si192</xocs:file-basename><xocs:filename>si192.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si64.gif</xocs:attachment-eid><xocs:file-basename>si64</xocs:file-basename><xocs:filename>si64.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>10</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si12.gif</xocs:attachment-eid><xocs:file-basename>si12</xocs:file-basename><xocs:filename>si12.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>132</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si128.gif</xocs:attachment-eid><xocs:file-basename>si128</xocs:file-basename><xocs:filename>si128.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si293.gif</xocs:attachment-eid><xocs:file-basename>si293</xocs:file-basename><xocs:filename>si293.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si112.gif</xocs:attachment-eid><xocs:file-basename>si112</xocs:file-basename><xocs:filename>si112.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>251</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si153.gif</xocs:attachment-eid><xocs:file-basename>si153</xocs:file-basename><xocs:filename>si153.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>907</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>199</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si58.gif</xocs:attachment-eid><xocs:file-basename>si58</xocs:file-basename><xocs:filename>si58.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si217.gif</xocs:attachment-eid><xocs:file-basename>si217</xocs:file-basename><xocs:filename>si217.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si30.gif</xocs:attachment-eid><xocs:file-basename>si30</xocs:file-basename><xocs:filename>si30.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>289</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si251.gif</xocs:attachment-eid><xocs:file-basename>si251</xocs:file-basename><xocs:filename>si251.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>305</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>63</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si249.gif</xocs:attachment-eid><xocs:file-basename>si249</xocs:file-basename><xocs:filename>si249.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>413</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>114</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si83.gif</xocs:attachment-eid><xocs:file-basename>si83</xocs:file-basename><xocs:filename>si83.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1097</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>259</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si239.gif</xocs:attachment-eid><xocs:file-basename>si239</xocs:file-basename><xocs:filename>si239.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si119.gif</xocs:attachment-eid><xocs:file-basename>si119</xocs:file-basename><xocs:filename>si119.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>539</xocs:filesize><xocs:pixel-height>26</xocs:pixel-height><xocs:pixel-width>133</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si159.gif</xocs:attachment-eid><xocs:file-basename>si159</xocs:file-basename><xocs:filename>si159.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si260.gif</xocs:attachment-eid><xocs:file-basename>si260</xocs:file-basename><xocs:filename>si260.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>843</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>195</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si31.gif</xocs:attachment-eid><xocs:file-basename>si31</xocs:file-basename><xocs:filename>si31.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>392</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si272.gif</xocs:attachment-eid><xocs:file-basename>si272</xocs:file-basename><xocs:filename>si272.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>816</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>237</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si156.gif</xocs:attachment-eid><xocs:file-basename>si156</xocs:file-basename><xocs:filename>si156.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si278.gif</xocs:attachment-eid><xocs:file-basename>si278</xocs:file-basename><xocs:filename>si278.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si266.gif</xocs:attachment-eid><xocs:file-basename>si266</xocs:file-basename><xocs:filename>si266.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>136</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si187.gif</xocs:attachment-eid><xocs:file-basename>si187</xocs:file-basename><xocs:filename>si187.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>255</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si72.gif</xocs:attachment-eid><xocs:file-basename>si72</xocs:file-basename><xocs:filename>si72.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si198.gif</xocs:attachment-eid><xocs:file-basename>si198</xocs:file-basename><xocs:filename>si198.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1163</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>288</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si200.gif</xocs:attachment-eid><xocs:file-basename>si200</xocs:file-basename><xocs:filename>si200.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si41.gif</xocs:attachment-eid><xocs:file-basename>si41</xocs:file-basename><xocs:filename>si41.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>106</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>10</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si141.gif</xocs:attachment-eid><xocs:file-basename>si141</xocs:file-basename><xocs:filename>si141.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>244</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si256.gif</xocs:attachment-eid><xocs:file-basename>si256</xocs:file-basename><xocs:filename>si256.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1035</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>222</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si225.gif</xocs:attachment-eid><xocs:file-basename>si225</xocs:file-basename><xocs:filename>si225.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>919</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>203</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si117.gif</xocs:attachment-eid><xocs:file-basename>si117</xocs:file-basename><xocs:filename>si117.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si218.gif</xocs:attachment-eid><xocs:file-basename>si218</xocs:file-basename><xocs:filename>si218.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>180</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si136.gif</xocs:attachment-eid><xocs:file-basename>si136</xocs:file-basename><xocs:filename>si136.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>273</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si144.gif</xocs:attachment-eid><xocs:file-basename>si144</xocs:file-basename><xocs:filename>si144.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si196.gif</xocs:attachment-eid><xocs:file-basename>si196</xocs:file-basename><xocs:filename>si196.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1431</xocs:filesize><xocs:pixel-height>53</xocs:pixel-height><xocs:pixel-width>259</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si160.gif</xocs:attachment-eid><xocs:file-basename>si160</xocs:file-basename><xocs:filename>si160.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>389</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>97</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si85.gif</xocs:attachment-eid><xocs:file-basename>si85</xocs:file-basename><xocs:filename>si85.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si134.gif</xocs:attachment-eid><xocs:file-basename>si134</xocs:file-basename><xocs:filename>si134.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1178</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>272</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si131.gif</xocs:attachment-eid><xocs:file-basename>si131</xocs:file-basename><xocs:filename>si131.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>561</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>151</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si221.gif</xocs:attachment-eid><xocs:file-basename>si221</xocs:file-basename><xocs:filename>si221.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>126</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si46.gif</xocs:attachment-eid><xocs:file-basename>si46</xocs:file-basename><xocs:filename>si46.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>140</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si147.gif</xocs:attachment-eid><xocs:file-basename>si147</xocs:file-basename><xocs:filename>si147.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>251</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si280.gif</xocs:attachment-eid><xocs:file-basename>si280</xocs:file-basename><xocs:filename>si280.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>414</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>94</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si179.gif</xocs:attachment-eid><xocs:file-basename>si179</xocs:file-basename><xocs:filename>si179.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>423</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>119</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si206.gif</xocs:attachment-eid><xocs:file-basename>si206</xocs:file-basename><xocs:filename>si206.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>198</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si201.gif</xocs:attachment-eid><xocs:file-basename>si201</xocs:file-basename><xocs:filename>si201.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>846</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>246</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si205.gif</xocs:attachment-eid><xocs:file-basename>si205</xocs:file-basename><xocs:filename>si205.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>234</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si202.gif</xocs:attachment-eid><xocs:file-basename>si202</xocs:file-basename><xocs:filename>si202.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si283.gif</xocs:attachment-eid><xocs:file-basename>si283</xocs:file-basename><xocs:filename>si283.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>416</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>94</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si36.gif</xocs:attachment-eid><xocs:file-basename>si36</xocs:file-basename><xocs:filename>si36.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>282</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>67</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si181.gif</xocs:attachment-eid><xocs:file-basename>si181</xocs:file-basename><xocs:filename>si181.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>844</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>195</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si265.gif</xocs:attachment-eid><xocs:file-basename>si265</xocs:file-basename><xocs:filename>si265.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>172</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si95.gif</xocs:attachment-eid><xocs:file-basename>si95</xocs:file-basename><xocs:filename>si95.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si208.gif</xocs:attachment-eid><xocs:file-basename>si208</xocs:file-basename><xocs:filename>si208.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>471</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>133</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si104.gif</xocs:attachment-eid><xocs:file-basename>si104</xocs:file-basename><xocs:filename>si104.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>139</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si177.gif</xocs:attachment-eid><xocs:file-basename>si177</xocs:file-basename><xocs:filename>si177.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>198</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si273.gif</xocs:attachment-eid><xocs:file-basename>si273</xocs:file-basename><xocs:filename>si273.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>473</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>108</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si150.gif</xocs:attachment-eid><xocs:file-basename>si150</xocs:file-basename><xocs:filename>si150.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>376</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>96</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si213.gif</xocs:attachment-eid><xocs:file-basename>si213</xocs:file-basename><xocs:filename>si213.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si6.gif</xocs:attachment-eid><xocs:file-basename>si6</xocs:file-basename><xocs:filename>si6.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si13.gif</xocs:attachment-eid><xocs:file-basename>si13</xocs:file-basename><xocs:filename>si13.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>148</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si61.gif</xocs:attachment-eid><xocs:file-basename>si61</xocs:file-basename><xocs:filename>si61.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>362</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>100</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si226.gif</xocs:attachment-eid><xocs:file-basename>si226</xocs:file-basename><xocs:filename>si226.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>946</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>205</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si158.gif</xocs:attachment-eid><xocs:file-basename>si158</xocs:file-basename><xocs:filename>si158.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>224</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si60.gif</xocs:attachment-eid><xocs:file-basename>si60</xocs:file-basename><xocs:filename>si60.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>149</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>23</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si15.gif</xocs:attachment-eid><xocs:file-basename>si15</xocs:file-basename><xocs:filename>si15.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si175.gif</xocs:attachment-eid><xocs:file-basename>si175</xocs:file-basename><xocs:filename>si175.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>367</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>105</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si245.gif</xocs:attachment-eid><xocs:file-basename>si245</xocs:file-basename><xocs:filename>si245.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>460</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>108</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si77.gif</xocs:attachment-eid><xocs:file-basename>si77</xocs:file-basename><xocs:filename>si77.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>776</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>177</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si155.gif</xocs:attachment-eid><xocs:file-basename>si155</xocs:file-basename><xocs:filename>si155.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>180</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si87.gif</xocs:attachment-eid><xocs:file-basename>si87</xocs:file-basename><xocs:filename>si87.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>160</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>24</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si243.gif</xocs:attachment-eid><xocs:file-basename>si243</xocs:file-basename><xocs:filename>si243.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>469</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>131</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si232.gif</xocs:attachment-eid><xocs:file-basename>si232</xocs:file-basename><xocs:filename>si232.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>482</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>127</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si296.gif</xocs:attachment-eid><xocs:file-basename>si296</xocs:file-basename><xocs:filename>si296.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si106.gif</xocs:attachment-eid><xocs:file-basename>si106</xocs:file-basename><xocs:filename>si106.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>166</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si25.gif</xocs:attachment-eid><xocs:file-basename>si25</xocs:file-basename><xocs:filename>si25.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>156</xocs:filesize><xocs:pixel-height>21</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si142.gif</xocs:attachment-eid><xocs:file-basename>si142</xocs:file-basename><xocs:filename>si142.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>618</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>165</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si255.gif</xocs:attachment-eid><xocs:file-basename>si255</xocs:file-basename><xocs:filename>si255.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si44.gif</xocs:attachment-eid><xocs:file-basename>si44</xocs:file-basename><xocs:filename>si44.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si191.gif</xocs:attachment-eid><xocs:file-basename>si191</xocs:file-basename><xocs:filename>si191.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>136</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si268.gif</xocs:attachment-eid><xocs:file-basename>si268</xocs:file-basename><xocs:filename>si268.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>171</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si7.gif</xocs:attachment-eid><xocs:file-basename>si7</xocs:file-basename><xocs:filename>si7.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si223.gif</xocs:attachment-eid><xocs:file-basename>si223</xocs:file-basename><xocs:filename>si223.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si29.gif</xocs:attachment-eid><xocs:file-basename>si29</xocs:file-basename><xocs:filename>si29.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>340</xocs:filesize><xocs:pixel-height>21</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si154.gif</xocs:attachment-eid><xocs:file-basename>si154</xocs:file-basename><xocs:filename>si154.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>441</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si19.gif</xocs:attachment-eid><xocs:file-basename>si19</xocs:file-basename><xocs:filename>si19.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>297</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>73</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si163.gif</xocs:attachment-eid><xocs:file-basename>si163</xocs:file-basename><xocs:filename>si163.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1111</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>257</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si269.gif</xocs:attachment-eid><xocs:file-basename>si269</xocs:file-basename><xocs:filename>si269.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>577</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>181</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si167.gif</xocs:attachment-eid><xocs:file-basename>si167</xocs:file-basename><xocs:filename>si167.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>493</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>126</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si143.gif</xocs:attachment-eid><xocs:file-basename>si143</xocs:file-basename><xocs:filename>si143.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si204.gif</xocs:attachment-eid><xocs:file-basename>si204</xocs:file-basename><xocs:filename>si204.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>258</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si195.gif</xocs:attachment-eid><xocs:file-basename>si195</xocs:file-basename><xocs:filename>si195.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>919</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>203</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si67.gif</xocs:attachment-eid><xocs:file-basename>si67</xocs:file-basename><xocs:filename>si67.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si103.gif</xocs:attachment-eid><xocs:file-basename>si103</xocs:file-basename><xocs:filename>si103.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>108</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>6</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si186.gif</xocs:attachment-eid><xocs:file-basename>si186</xocs:file-basename><xocs:filename>si186.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si246.gif</xocs:attachment-eid><xocs:file-basename>si246</xocs:file-basename><xocs:filename>si246.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>358</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>76</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si210.gif</xocs:attachment-eid><xocs:file-basename>si210</xocs:file-basename><xocs:filename>si210.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si182.gif</xocs:attachment-eid><xocs:file-basename>si182</xocs:file-basename><xocs:filename>si182.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>761</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>165</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si257.gif</xocs:attachment-eid><xocs:file-basename>si257</xocs:file-basename><xocs:filename>si257.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1143</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>252</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si92.gif</xocs:attachment-eid><xocs:file-basename>si92</xocs:file-basename><xocs:filename>si92.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si71.gif</xocs:attachment-eid><xocs:file-basename>si71</xocs:file-basename><xocs:filename>si71.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si174.gif</xocs:attachment-eid><xocs:file-basename>si174</xocs:file-basename><xocs:filename>si174.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>198</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si17.gif</xocs:attachment-eid><xocs:file-basename>si17</xocs:file-basename><xocs:filename>si17.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>216</xocs:filesize><xocs:pixel-height>22</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si286.gif</xocs:attachment-eid><xocs:file-basename>si286</xocs:file-basename><xocs:filename>si286.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si49.gif</xocs:attachment-eid><xocs:file-basename>si49</xocs:file-basename><xocs:filename>si49.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si4.gif</xocs:attachment-eid><xocs:file-basename>si4</xocs:file-basename><xocs:filename>si4.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>132</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si53.gif</xocs:attachment-eid><xocs:file-basename>si53</xocs:file-basename><xocs:filename>si53.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si100.gif</xocs:attachment-eid><xocs:file-basename>si100</xocs:file-basename><xocs:filename>si100.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si248.gif</xocs:attachment-eid><xocs:file-basename>si248</xocs:file-basename><xocs:filename>si248.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>373</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>95</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si168.gif</xocs:attachment-eid><xocs:file-basename>si168</xocs:file-basename><xocs:filename>si168.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si78.gif</xocs:attachment-eid><xocs:file-basename>si78</xocs:file-basename><xocs:filename>si78.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si222.gif</xocs:attachment-eid><xocs:file-basename>si222</xocs:file-basename><xocs:filename>si222.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si138.gif</xocs:attachment-eid><xocs:file-basename>si138</xocs:file-basename><xocs:filename>si138.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si229.gif</xocs:attachment-eid><xocs:file-basename>si229</xocs:file-basename><xocs:filename>si229.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>251</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si294.gif</xocs:attachment-eid><xocs:file-basename>si294</xocs:file-basename><xocs:filename>si294.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>286</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si178.gif</xocs:attachment-eid><xocs:file-basename>si178</xocs:file-basename><xocs:filename>si178.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>251</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si184.gif</xocs:attachment-eid><xocs:file-basename>si184</xocs:file-basename><xocs:filename>si184.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>171</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si57.gif</xocs:attachment-eid><xocs:file-basename>si57</xocs:file-basename><xocs:filename>si57.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si38.gif</xocs:attachment-eid><xocs:file-basename>si38</xocs:file-basename><xocs:filename>si38.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si264.gif</xocs:attachment-eid><xocs:file-basename>si264</xocs:file-basename><xocs:filename>si264.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si238.gif</xocs:attachment-eid><xocs:file-basename>si238</xocs:file-basename><xocs:filename>si238.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>170</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>22</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si277.gif</xocs:attachment-eid><xocs:file-basename>si277</xocs:file-basename><xocs:filename>si277.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si149.gif</xocs:attachment-eid><xocs:file-basename>si149</xocs:file-basename><xocs:filename>si149.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>283</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si90.gif</xocs:attachment-eid><xocs:file-basename>si90</xocs:file-basename><xocs:filename>si90.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>268</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>68</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si165.gif</xocs:attachment-eid><xocs:file-basename>si165</xocs:file-basename><xocs:filename>si165.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>773</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>183</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si120.gif</xocs:attachment-eid><xocs:file-basename>si120</xocs:file-basename><xocs:filename>si120.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>203</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si162.gif</xocs:attachment-eid><xocs:file-basename>si162</xocs:file-basename><xocs:filename>si162.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>912</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>203</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si279.gif</xocs:attachment-eid><xocs:file-basename>si279</xocs:file-basename><xocs:filename>si279.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>345</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>86</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si9.gif</xocs:attachment-eid><xocs:file-basename>si9</xocs:file-basename><xocs:filename>si9.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si18.gif</xocs:attachment-eid><xocs:file-basename>si18</xocs:file-basename><xocs:filename>si18.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>333</xocs:filesize><xocs:pixel-height>26</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si242.gif</xocs:attachment-eid><xocs:file-basename>si242</xocs:file-basename><xocs:filename>si242.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si111.gif</xocs:attachment-eid><xocs:file-basename>si111</xocs:file-basename><xocs:filename>si111.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>141</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si173.gif</xocs:attachment-eid><xocs:file-basename>si173</xocs:file-basename><xocs:filename>si173.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si189.gif</xocs:attachment-eid><xocs:file-basename>si189</xocs:file-basename><xocs:filename>si189.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>452</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>116</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si20.gif</xocs:attachment-eid><xocs:file-basename>si20</xocs:file-basename><xocs:filename>si20.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>343</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>83</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si21.gif</xocs:attachment-eid><xocs:file-basename>si21</xocs:file-basename><xocs:filename>si21.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>216</xocs:filesize><xocs:pixel-height>19</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si35.gif</xocs:attachment-eid><xocs:file-basename>si35</xocs:file-basename><xocs:filename>si35.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>216</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>51</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si219.gif</xocs:attachment-eid><xocs:file-basename>si219</xocs:file-basename><xocs:filename>si219.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>183</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si24.gif</xocs:attachment-eid><xocs:file-basename>si24</xocs:file-basename><xocs:filename>si24.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>254</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si145.gif</xocs:attachment-eid><xocs:file-basename>si145</xocs:file-basename><xocs:filename>si145.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si63.gif</xocs:attachment-eid><xocs:file-basename>si63</xocs:file-basename><xocs:filename>si63.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>10</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si292.gif</xocs:attachment-eid><xocs:file-basename>si292</xocs:file-basename><xocs:filename>si292.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si247.gif</xocs:attachment-eid><xocs:file-basename>si247</xocs:file-basename><xocs:filename>si247.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>378</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>96</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si74.gif</xocs:attachment-eid><xocs:file-basename>si74</xocs:file-basename><xocs:filename>si74.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>144</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si27.gif</xocs:attachment-eid><xocs:file-basename>si27</xocs:file-basename><xocs:filename>si27.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>216</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>51</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si81.gif</xocs:attachment-eid><xocs:file-basename>si81</xocs:file-basename><xocs:filename>si81.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si116.gif</xocs:attachment-eid><xocs:file-basename>si116</xocs:file-basename><xocs:filename>si116.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>359</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>91</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si105.gif</xocs:attachment-eid><xocs:file-basename>si105</xocs:file-basename><xocs:filename>si105.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si271.gif</xocs:attachment-eid><xocs:file-basename>si271</xocs:file-basename><xocs:filename>si271.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si73.gif</xocs:attachment-eid><xocs:file-basename>si73</xocs:file-basename><xocs:filename>si73.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si132.gif</xocs:attachment-eid><xocs:file-basename>si132</xocs:file-basename><xocs:filename>si132.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si214.gif</xocs:attachment-eid><xocs:file-basename>si214</xocs:file-basename><xocs:filename>si214.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>126</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si234.gif</xocs:attachment-eid><xocs:file-basename>si234</xocs:file-basename><xocs:filename>si234.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si101.gif</xocs:attachment-eid><xocs:file-basename>si101</xocs:file-basename><xocs:filename>si101.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>105</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>6</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si79.gif</xocs:attachment-eid><xocs:file-basename>si79</xocs:file-basename><xocs:filename>si79.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>18</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si207.gif</xocs:attachment-eid><xocs:file-basename>si207</xocs:file-basename><xocs:filename>si207.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>745</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>162</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si50.gif</xocs:attachment-eid><xocs:file-basename>si50</xocs:file-basename><xocs:filename>si50.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si16.gif</xocs:attachment-eid><xocs:file-basename>si16</xocs:file-basename><xocs:filename>si16.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>10</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si11.gif</xocs:attachment-eid><xocs:file-basename>si11</xocs:file-basename><xocs:filename>si11.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si233.gif</xocs:attachment-eid><xocs:file-basename>si233</xocs:file-basename><xocs:filename>si233.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si220.gif</xocs:attachment-eid><xocs:file-basename>si220</xocs:file-basename><xocs:filename>si220.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si68.gif</xocs:attachment-eid><xocs:file-basename>si68</xocs:file-basename><xocs:filename>si68.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si263.gif</xocs:attachment-eid><xocs:file-basename>si263</xocs:file-basename><xocs:filename>si263.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>254</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si275.gif</xocs:attachment-eid><xocs:file-basename>si275</xocs:file-basename><xocs:filename>si275.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si244.gif</xocs:attachment-eid><xocs:file-basename>si244</xocs:file-basename><xocs:filename>si244.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>419</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>106</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si114.gif</xocs:attachment-eid><xocs:file-basename>si114</xocs:file-basename><xocs:filename>si114.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>359</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si109.gif</xocs:attachment-eid><xocs:file-basename>si109</xocs:file-basename><xocs:filename>si109.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>715</xocs:filesize><xocs:pixel-height>25</xocs:pixel-height><xocs:pixel-width>169</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si289.gif</xocs:attachment-eid><xocs:file-basename>si289</xocs:file-basename><xocs:filename>si289.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>309</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>79</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si231.gif</xocs:attachment-eid><xocs:file-basename>si231</xocs:file-basename><xocs:filename>si231.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>244</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si52.gif</xocs:attachment-eid><xocs:file-basename>si52</xocs:file-basename><xocs:filename>si52.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>191</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si135.gif</xocs:attachment-eid><xocs:file-basename>si135</xocs:file-basename><xocs:filename>si135.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si37.gif</xocs:attachment-eid><xocs:file-basename>si37</xocs:file-basename><xocs:filename>si37.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si129.gif</xocs:attachment-eid><xocs:file-basename>si129</xocs:file-basename><xocs:filename>si129.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>316</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si241.gif</xocs:attachment-eid><xocs:file-basename>si241</xocs:file-basename><xocs:filename>si241.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>278</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si56.gif</xocs:attachment-eid><xocs:file-basename>si56</xocs:file-basename><xocs:filename>si56.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si69.gif</xocs:attachment-eid><xocs:file-basename>si69</xocs:file-basename><xocs:filename>si69.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>123</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si54.gif</xocs:attachment-eid><xocs:file-basename>si54</xocs:file-basename><xocs:filename>si54.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>132</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si130.gif</xocs:attachment-eid><xocs:file-basename>si130</xocs:file-basename><xocs:filename>si130.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>170</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>22</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si2.gif</xocs:attachment-eid><xocs:file-basename>si2</xocs:file-basename><xocs:filename>si2.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si65.gif</xocs:attachment-eid><xocs:file-basename>si65</xocs:file-basename><xocs:filename>si65.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si8.gif</xocs:attachment-eid><xocs:file-basename>si8</xocs:file-basename><xocs:filename>si8.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si5.gif</xocs:attachment-eid><xocs:file-basename>si5</xocs:file-basename><xocs:filename>si5.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>18</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si224.gif</xocs:attachment-eid><xocs:file-basename>si224</xocs:file-basename><xocs:filename>si224.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>721</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>228</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si148.gif</xocs:attachment-eid><xocs:file-basename>si148</xocs:file-basename><xocs:filename>si148.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>408</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>103</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si212.gif</xocs:attachment-eid><xocs:file-basename>si212</xocs:file-basename><xocs:filename>si212.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>126</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si133.gif</xocs:attachment-eid><xocs:file-basename>si133</xocs:file-basename><xocs:filename>si133.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>919</xocs:filesize><xocs:pixel-height>34</xocs:pixel-height><xocs:pixel-width>203</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si140.gif</xocs:attachment-eid><xocs:file-basename>si140</xocs:file-basename><xocs:filename>si140.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>498</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>126</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si70.gif</xocs:attachment-eid><xocs:file-basename>si70</xocs:file-basename><xocs:filename>si70.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si166.gif</xocs:attachment-eid><xocs:file-basename>si166</xocs:file-basename><xocs:filename>si166.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>224</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>53</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si123.gif</xocs:attachment-eid><xocs:file-basename>si123</xocs:file-basename><xocs:filename>si123.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si124.gif</xocs:attachment-eid><xocs:file-basename>si124</xocs:file-basename><xocs:filename>si124.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>136</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si282.gif</xocs:attachment-eid><xocs:file-basename>si282</xocs:file-basename><xocs:filename>si282.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>746</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>214</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si254.gif</xocs:attachment-eid><xocs:file-basename>si254</xocs:file-basename><xocs:filename>si254.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>125</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si276.gif</xocs:attachment-eid><xocs:file-basename>si276</xocs:file-basename><xocs:filename>si276.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>373</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si113.gif</xocs:attachment-eid><xocs:file-basename>si113</xocs:file-basename><xocs:filename>si113.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>170</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>22</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si252.gif</xocs:attachment-eid><xocs:file-basename>si252</xocs:file-basename><xocs:filename>si252.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>270</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>53</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si176.gif</xocs:attachment-eid><xocs:file-basename>si176</xocs:file-basename><xocs:filename>si176.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>284</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>63</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si281.gif</xocs:attachment-eid><xocs:file-basename>si281</xocs:file-basename><xocs:filename>si281.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>378</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>96</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si236.gif</xocs:attachment-eid><xocs:file-basename>si236</xocs:file-basename><xocs:filename>si236.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>269</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>53</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si10.gif</xocs:attachment-eid><xocs:file-basename>si10</xocs:file-basename><xocs:filename>si10.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si237.gif</xocs:attachment-eid><xocs:file-basename>si237</xocs:file-basename><xocs:filename>si237.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si34.gif</xocs:attachment-eid><xocs:file-basename>si34</xocs:file-basename><xocs:filename>si34.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>21</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si172.gif</xocs:attachment-eid><xocs:file-basename>si172</xocs:file-basename><xocs:filename>si172.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si197.gif</xocs:attachment-eid><xocs:file-basename>si197</xocs:file-basename><xocs:filename>si197.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1201</xocs:filesize><xocs:pixel-height>36</xocs:pixel-height><xocs:pixel-width>277</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si96.gif</xocs:attachment-eid><xocs:file-basename>si96</xocs:file-basename><xocs:filename>si96.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>122</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si288.gif</xocs:attachment-eid><xocs:file-basename>si288</xocs:file-basename><xocs:filename>si288.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>250</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>50</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si291.gif</xocs:attachment-eid><xocs:file-basename>si291</xocs:file-basename><xocs:filename>si291.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>303</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>67</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si215.gif</xocs:attachment-eid><xocs:file-basename>si215</xocs:file-basename><xocs:filename>si215.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>105</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>6</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si22.gif</xocs:attachment-eid><xocs:file-basename>si22</xocs:file-basename><xocs:filename>si22.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>271</xocs:filesize><xocs:pixel-height>19</xocs:pixel-height><xocs:pixel-width>44</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si94.gif</xocs:attachment-eid><xocs:file-basename>si94</xocs:file-basename><xocs:filename>si94.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>28</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si107.gif</xocs:attachment-eid><xocs:file-basename>si107</xocs:file-basename><xocs:filename>si107.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>144</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si88.gif</xocs:attachment-eid><xocs:file-basename>si88</xocs:file-basename><xocs:filename>si88.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>119</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si258.gif</xocs:attachment-eid><xocs:file-basename>si258</xocs:file-basename><xocs:filename>si258.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>260</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>62</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si171.gif</xocs:attachment-eid><xocs:file-basename>si171</xocs:file-basename><xocs:filename>si171.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>111</xocs:filesize><xocs:pixel-height>6</xocs:pixel-height><xocs:pixel-width>9</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si161.gif</xocs:attachment-eid><xocs:file-basename>si161</xocs:file-basename><xocs:filename>si161.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>121</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-si76.gif</xocs:attachment-eid><xocs:file-basename>si76</xocs:file-basename><xocs:filename>si76.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>276</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr6.jpg</xocs:attachment-eid><xocs:file-basename>gr6</xocs:file-basename><xocs:filename>gr6.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>27831</xocs:filesize><xocs:pixel-height>291</xocs:pixel-height><xocs:pixel-width>357</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr2.jpg</xocs:attachment-eid><xocs:file-basename>gr2</xocs:file-basename><xocs:filename>gr2.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>28358</xocs:filesize><xocs:pixel-height>188</xocs:pixel-height><xocs:pixel-width>310</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-pic1.jpg</xocs:attachment-eid><xocs:file-basename>pic1</xocs:file-basename><xocs:filename>pic1.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>20934</xocs:filesize><xocs:pixel-height>131</xocs:pixel-height><xocs:pixel-width>113</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr3.jpg</xocs:attachment-eid><xocs:file-basename>gr3</xocs:file-basename><xocs:filename>gr3.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>27320</xocs:filesize><xocs:pixel-height>291</xocs:pixel-height><xocs:pixel-width>357</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-pic2.jpg</xocs:attachment-eid><xocs:file-basename>pic2</xocs:file-basename><xocs:filename>pic2.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>19862</xocs:filesize><xocs:pixel-height>132</xocs:pixel-height><xocs:pixel-width>113</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr8.jpg</xocs:attachment-eid><xocs:file-basename>gr8</xocs:file-basename><xocs:filename>gr8.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>17769</xocs:filesize><xocs:pixel-height>294</xocs:pixel-height><xocs:pixel-width>367</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr9.jpg</xocs:attachment-eid><xocs:file-basename>gr9</xocs:file-basename><xocs:filename>gr9.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>36661</xocs:filesize><xocs:pixel-height>293</xocs:pixel-height><xocs:pixel-width>376</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-fx1.jpg</xocs:attachment-eid><xocs:file-basename>fx1</xocs:file-basename><xocs:filename>fx1.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>55752</xocs:filesize><xocs:pixel-height>441</xocs:pixel-height><xocs:pixel-width>565</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr7.jpg</xocs:attachment-eid><xocs:file-basename>gr7</xocs:file-basename><xocs:filename>gr7.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>20539</xocs:filesize><xocs:pixel-height>295</xocs:pixel-height><xocs:pixel-width>357</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr5.jpg</xocs:attachment-eid><xocs:file-basename>gr5</xocs:file-basename><xocs:filename>gr5.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>35814</xocs:filesize><xocs:pixel-height>293</xocs:pixel-height><xocs:pixel-width>376</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr4.jpg</xocs:attachment-eid><xocs:file-basename>gr4</xocs:file-basename><xocs:filename>gr4.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>38853</xocs:filesize><xocs:pixel-height>291</xocs:pixel-height><xocs:pixel-width>357</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-fx2.jpg</xocs:attachment-eid><xocs:file-basename>fx2</xocs:file-basename><xocs:filename>fx2.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>48165</xocs:filesize><xocs:pixel-height>347</xocs:pixel-height><xocs:pixel-width>565</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr1.jpg</xocs:attachment-eid><xocs:file-basename>gr1</xocs:file-basename><xocs:filename>gr1.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>29273</xocs:filesize><xocs:pixel-height>313</xocs:pixel-height><xocs:pixel-width>376</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-pic3.jpg</xocs:attachment-eid><xocs:file-basename>pic3</xocs:file-basename><xocs:filename>pic3.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>17507</xocs:filesize><xocs:pixel-height>131</xocs:pixel-height><xocs:pixel-width>112</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr6.sml</xocs:attachment-eid><xocs:file-basename>gr6</xocs:file-basename><xocs:filename>gr6.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3606</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>201</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr2.sml</xocs:attachment-eid><xocs:file-basename>gr2</xocs:file-basename><xocs:filename>gr2.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>8343</xocs:filesize><xocs:pixel-height>133</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-pic1.sml</xocs:attachment-eid><xocs:file-basename>pic1</xocs:file-basename><xocs:filename>pic1.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>13642</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>141</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr3.sml</xocs:attachment-eid><xocs:file-basename>gr3</xocs:file-basename><xocs:filename>gr3.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3896</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>201</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-pic2.sml</xocs:attachment-eid><xocs:file-basename>pic2</xocs:file-basename><xocs:filename>pic2.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>12354</xocs:filesize><xocs:pixel-height>163</xocs:pixel-height><xocs:pixel-width>140</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr8.sml</xocs:attachment-eid><xocs:file-basename>gr8</xocs:file-basename><xocs:filename>gr8.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2416</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>204</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr9.sml</xocs:attachment-eid><xocs:file-basename>gr9</xocs:file-basename><xocs:filename>gr9.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4938</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>210</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-fx1.sml</xocs:attachment-eid><xocs:file-basename>fx1</xocs:file-basename><xocs:filename>fx1.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3490</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>210</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr7.sml</xocs:attachment-eid><xocs:file-basename>gr7</xocs:file-basename><xocs:filename>gr7.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2339</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>198</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr5.sml</xocs:attachment-eid><xocs:file-basename>gr5</xocs:file-basename><xocs:filename>gr5.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4431</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>211</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr4.sml</xocs:attachment-eid><xocs:file-basename>gr4</xocs:file-basename><xocs:filename>gr4.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>5256</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>201</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-fx2.sml</xocs:attachment-eid><xocs:file-basename>fx2</xocs:file-basename><xocs:filename>fx2.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3159</xocs:filesize><xocs:pixel-height>134</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-gr1.sml</xocs:attachment-eid><xocs:file-basename>gr1</xocs:file-basename><xocs:filename>gr1.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3655</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>197</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0167739X13001349-pic3.sml</xocs:attachment-eid><xocs:file-basename>pic3</xocs:file-basename><xocs:filename>pic3.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>8376</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>140</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment></xocs:attachments></xocs:attachment-metadata-doc><xocs:refkeys><xocs:refkey3>MAX2014X202</xocs:refkey3><xocs:refkey4lp>MAX2014X202X215</xocs:refkey4lp><xocs:refkey4ai>MAX2014X202XL</xocs:refkey4ai><xocs:refkey5>MAX2014X202X215XL</xocs:refkey5></xocs:refkeys><xocs:open-access><xocs:oa-article-status is-open-access="1" is-open-archive="0">Full</xocs:oa-article-status><xocs:oa-access-effective-date>2013-07-16T20:15:29Z</xocs:oa-access-effective-date><xocs:oa-sponsor><xocs:oa-sponsor-type>Author</xocs:oa-sponsor-type></xocs:oa-sponsor><xocs:oa-user-license>http://creativecommons.org/licenses/by/3.0/</xocs:oa-user-license></xocs:open-access></xocs:meta><xocs:serial-item><article xmlns:sa="http://www.elsevier.com/xml/common/struct-aff/dtd" docsubtype="fla" version="5.2" xml:lang="en"><item-info><jid>FUTURE</jid><aid>2396</aid><ce:pii>S0167-739X(13)00134-9</ce:pii><ce:doi>10.1016/j.future.2013.06.020</ce:doi><ce:copyright type="other" year="2013">The Authors</ce:copyright></item-info><ce:floats><ce:figure id="f000005"><ce:label>Fig. 1</ce:label><ce:caption id="c000005"><ce:simple-para id="sp000005" view="all">Throughput of Bloom filter algorithm for set membership testing on biosequence data. Performance (in membership tests per second) is plotted vs. number of threads per processor both for a Tesla C1060 and a GTX 480 GPU.</ce:simple-para></ce:caption><ce:link locator="gr1"/></ce:figure><ce:figure id="f000010"><ce:label>Fig. 2</ce:label><ce:caption id="c000010"><ce:simple-para id="sp000010" view="all">Abstracted highly-threaded, many-core architecture. The short arrows from the cores to the local memory symbolize low latency, while the long arrows to the global memory symbolize high latency.</ce:simple-para></ce:caption><ce:link locator="gr2"/></ce:figure><ce:figure id="f000015"><ce:label>Fig. 3</ce:label><ce:caption id="c000015"><ce:simple-para id="sp000015" view="all">Speedup (theoretical <mml:math altimg="si1.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> via PRAM model over empirically measured <mml:math altimg="si2.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:math>) of the dynamic programming algorithm, varying the number of threads per core from 2 to 32 (<mml:math altimg="si3.gif" display="inline" overflow="scroll"><mml:mtext>data block size</mml:mtext><mml:mo>=</mml:mo><mml:mn>64</mml:mn></mml:math>).</ce:simple-para></ce:caption><ce:link locator="gr3"/></ce:figure><ce:figure id="f000020"><ce:label>Fig. 4</ce:label><ce:caption id="c000020"><ce:simple-para id="sp000020" view="all">Speedup of Johnson's algorithm using arrays vs. threads/core for different graph densities. All curves are with 8k nodes. Again, speedup is theoretical <mml:math altimg="si4.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> divided by empirically measured <mml:math altimg="si5.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:math>.</ce:simple-para></ce:caption><ce:link locator="gr4"/></ce:figure><ce:figure id="f000025"><ce:label>Fig. 5</ce:label><ce:caption id="c000025"><ce:simple-para id="sp000025" view="all">Runtime of Johnson's algorithm on graphs with constant 8k nodes and varying density by increasing edges. Threads/core varies from 2 to 32.</ce:simple-para></ce:caption><ce:link locator="gr5"/></ce:figure><ce:figure id="f000030"><ce:label>Fig. 6</ce:label><ce:caption id="c000030"><ce:simple-para id="sp000030" view="all">Speedup of the dynamic programming algorithm for different block sizes, varying the threads/core on graphs with 16k nodes.</ce:simple-para></ce:caption><ce:link locator="gr6"/></ce:figure><ce:figure id="f000035"><ce:label>Fig. 7</ce:label><ce:caption id="c000035"><ce:simple-para id="sp000035" view="all">Spread of performance between block size 64 and block size 32. The speedup scale is the same as that of <ce:cross-ref id="cf000005" refid="f000030">Fig. 6</ce:cross-ref>.</ce:simple-para></ce:caption><ce:link locator="gr7"/></ce:figure><ce:figure id="f000040"><ce:label>Fig. 8</ce:label><ce:caption id="c000040"><ce:simple-para id="sp000040" view="all">Ratio of performance between block size 64 and block size 32.</ce:simple-para></ce:caption><ce:link locator="gr8"/></ce:figure><ce:figure id="f000045"><ce:label>Fig. 9</ce:label><ce:caption id="c000045"><ce:simple-para id="sp000045" view="all">Runtime of the dynamic programming (DP) algorithm relative to Johnson's algorithm on a graph with 8k nodes, varying threads/core from 4 to 32 and edges from 32k to 32 M.</ce:simple-para></ce:caption><ce:link locator="gr9"/></ce:figure><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="t000005" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 1</ce:label><ce:caption id="c000050"><ce:simple-para id="sp000050" view="all">Architecture parameters.</ce:simple-para></ce:caption><tgroup cols="2"><colspec colnum="1" colname="col1"/><colspec colnum="2" colname="col2"/><thead><row valign="top" rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Parameter</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Description</entry></row></thead><tbody><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si6.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Time for a global memory access</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si7.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Number of processors (cores)</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si8.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Memory access width</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si9.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Size of fast local memory per core group</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si10.gif" display="inline" overflow="scroll"><mml:mi>Q</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Number of cores per core group</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si11.gif" display="inline" overflow="scroll"><mml:mi>X</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Hardware limit on number of threads per core</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="t000010" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 2</ce:label><ce:caption id="c000055"><ce:simple-para id="sp000055" view="all">Program parameters.</ce:simple-para></ce:caption><tgroup cols="2"><colspec colnum="1" colname="col1"/><colspec colnum="2" colname="col2"/><thead><row valign="top" rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Parameter</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Description</entry></row></thead><tbody><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si12.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">The work or total number of operations</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si13.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">The span or the number of operations on the critical path</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si14.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Number of global memory operations</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si15.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Number of threads per core</entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si16.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Amount of local memory used per thread</entry></row></tbody></tgroup></ce:table><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" id="t000015" frame="topbot" colsep="0" rowsep="0"><ce:label>Table 3</ce:label><ce:caption id="c000060"><ce:simple-para id="sp000060" view="all">Algorithm running times and constraints.</ce:simple-para></ce:caption><tgroup cols="5"><colspec colnum="1" colname="col1"/><colspec colnum="2" colname="col2"/><colspec colnum="3" colname="col3"/><colspec colnum="4" colname="col4"/><colspec colnum="5" colname="col5"/><thead><row valign="top" rowsep="1"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Algorithm</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Time (PRAM)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Time (TMM)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" namest="col4" nameend="col5" align="left">Constraints</entry></row></thead><tbody><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Dynamic programming</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si17.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si18.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si19.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mi>X</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si20.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:msup><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math></entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left">Johnson's (Binary heap)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si21.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si22.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si23.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>X</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si24.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math></entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left" morerows="1">Johnson's (Array)</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left" morerows="1"><mml:math altimg="si25.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si26.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:mfrac><mml:mo>â¥</mml:mo><mml:mi>C</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si27.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>C</mml:mi><mml:mi>X</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si28.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>â</mml:mo><mml:mi>C</mml:mi></mml:math></entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si29.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:mfrac><mml:mo>&lt;</mml:mo><mml:mi>C</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si30.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>X</mml:mi><mml:mo>/</mml:mo><mml:mi>m</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si31.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math></entry></row><row valign="top"><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si32.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> iteration Bellman-Ford</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si33.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si34.gif" display="inline" overflow="scroll"><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si35.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>C</mml:mi><mml:mi>X</mml:mi></mml:math></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd" align="left"><mml:math altimg="si36.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>C</mml:mi><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math></entry></row></tbody></tgroup></ce:table></ce:floats><head><ce:article-footnote><ce:label>â</ce:label><ce:note-para id="np000005" view="all">This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</ce:note-para></ce:article-footnote><ce:title id="ti000005">A memory access model for highly-threaded many-core architectures</ce:title><ce:author-group id="ag000005"><ce:author id="au000005" biographyid="bio1"><ce:given-name>Lin</ce:given-name><ce:surname>Ma</ce:surname><ce:cross-ref id="cf000010" refid="cor000005"><ce:sup loc="post">â</ce:sup></ce:cross-ref><ce:e-address id="ed000005" type="email">lin.ma@cse.wustl.edu</ce:e-address></ce:author><ce:author id="au000010" biographyid="bio2"><ce:given-name>Kunal</ce:given-name><ce:surname>Agrawal</ce:surname></ce:author><ce:author id="au000015" biographyid="bio3"><ce:given-name>Roger D.</ce:given-name><ce:surname>Chamberlain</ce:surname></ce:author><ce:affiliation id="af000005"><ce:textfn>Department of Computer Science and Engineering, Washington University in St. Louis, United States</ce:textfn><sa:affiliation><sa:organization>Department of Computer Science and Engineering, Washington University in St. Louis</sa:organization><sa:country>United States</sa:country></sa:affiliation></ce:affiliation><ce:correspondence id="cor000005"><ce:label>â</ce:label><ce:text>Corresponding author. Tel.: +1 3144986029.</ce:text></ce:correspondence></ce:author-group><ce:date-received day="25" month="1" year="2013"/><ce:date-revised day="14" month="5" year="2013"/><ce:date-accepted day="17" month="6" year="2013"/><ce:abstract id="a000005" xml:lang="en" class="author" view="all"><ce:section-title id="st000005">Abstract</ce:section-title><ce:abstract-sec id="as000005" view="all"><ce:simple-para id="sp000065" view="all">A number of highly-threaded, many-core architectures hide memory-access latency by low-overhead context switching among a large number of threads. The speedup of a program on these machines depends on how well the latency is hidden. If the number of threads were infinite, theoretically, these machines could provide the performance predicted by the PRAM analysis of these programs. However, the number of threads per processor is not infinite, and is constrained by both hardware and algorithmic limits. In this paper, we introduce the Threaded Many-core Memory (TMM) model which is meant to capture the important characteristics of these highly-threaded, many-core machines. Since we model some important machine parameters of these machines, we expect analysis under this model to provide a more fine-grained and accurate performance prediction than the PRAM analysis. We analyze 4 algorithms for the classic all pairs shortest paths problem under this model. We find that even when two algorithms have the same PRAM performance, our model predicts different performance for some settings of machine parameters. For example, for dense graphs, the dynamic programming algorithm and Johnson's algorithm have the same performance in the PRAM model. However, our model predicts different performance for large enough memory-access latency and validates the intuition that the dynamic programming algorithm performs better on these machines. We validate several predictions made by our model using empirical measurements on an instantiation of a highly-threaded, many-core machine, namely the NVIDIA GTX 480.</ce:simple-para></ce:abstract-sec></ce:abstract><ce:abstract id="a000010" xml:lang="en" class="author-highlights" view="all"><ce:section-title id="st000010">Highlights</ce:section-title><ce:abstract-sec id="as000010" view="all"><ce:simple-para id="sp000070" view="all"><ce:list id="l000005"><ce:list-item id="li000005"><ce:label>â¢</ce:label><ce:para id="p000005" view="all">We design a memory model to analyze algorithms for highly-threaded many-core systems.</ce:para></ce:list-item><ce:list-item id="li000010"><ce:label>â¢</ce:label><ce:para id="p000010" view="all">The model captures significant factors of performance: work, span, and memory accesses.</ce:para></ce:list-item><ce:list-item id="li000015"><ce:label>â¢</ce:label><ce:para id="p000015" view="all">We show the model is better than PRAM by applying both to 4 shortest paths algorithms.</ce:para></ce:list-item><ce:list-item id="li000020"><ce:label>â¢</ce:label><ce:para id="p000020" view="all">Empirical performance is effectively predicted by our model in many circumstances.</ce:para></ce:list-item><ce:list-item id="li000025"><ce:label>â¢</ce:label><ce:para id="p000025" view="all">It is the first formalized asymptotic model helpful for algorithm design on many-cores.</ce:para></ce:list-item></ce:list></ce:simple-para></ce:abstract-sec></ce:abstract><ce:keywords id="ks000005" class="keyword" xml:lang="en" view="all"><ce:section-title id="st000015">Keywords</ce:section-title><ce:keyword id="k000005"><ce:text>PRAM</ce:text></ce:keyword><ce:keyword id="k000010"><ce:text>TMM</ce:text></ce:keyword><ce:keyword id="k000015"><ce:text>All Pairs Shortest Paths (APSP)</ce:text></ce:keyword><ce:keyword id="k000020"><ce:text>Highly-threaded many-core</ce:text></ce:keyword><ce:keyword id="k000025"><ce:text>Memory access model</ce:text></ce:keyword></ce:keywords></head><body view="all"><ce:sections><ce:section id="s000005" view="all"><ce:label>1</ce:label><ce:section-title id="st000020">Introduction</ce:section-title><ce:para id="p000030" view="all">Highly-threaded, many-core devices such as GPUs have gained popularity in the last decade; both NVIDIA and AMD manufacture general purpose GPUs that fall in this category. The important distinction between these machines and traditional multi-core machines is that these devices provide a large number of low-overhead hardware threads with low-overhead context switching between them; this fast context-switch mechanism is used to hide the memory access latency of transferring data from slow large (and often global) memory to fast, small (and typically local) memory. Researchers have designed algorithms to solve many interesting problems for these devices, such as GPU sorting or hashing <ce:cross-refs id="cs000005" refid="br000005 br000010 br000015 br000020">[1-4]</ce:cross-refs>, linear algebra <ce:cross-refs id="cs000010" refid="br000025 br000030 br000035">[5-7]</ce:cross-refs>, dynamic programming <ce:cross-refs id="cs000015" refid="br000040 br000045">[8,9]</ce:cross-refs>, graph algorithms <ce:cross-refs id="cs000020" refid="br000050 br000055 br000060 br000065">[10-13]</ce:cross-refs>, and many other classic algorithms <ce:cross-refs id="cs000025" refid="br000070 br000075">[14,15]</ce:cross-refs>. These projects generally report impressive gains in performance. These devices appear to be here to stay. While there is a lot of folk wisdom on how to design good algorithms for these highly-threaded machines, in addition to a significant body of work on performance analysis <ce:cross-refs id="cs000030" refid="br000080 br000085 br000090 br000095 br000100">[16-20]</ce:cross-refs>, there are no systematic theoretical models to analyze the performance of programs on these machines. We are interested in analyzing and characterizing performance of algorithms on these highly-threaded, many-core machines in a more abstract, algorithmic, and systematic manner.</ce:para><ce:para id="p000035" view="all">Theoretical analysis relies upon models that represent underlying assumptions; if a model does not capture the important aspects of target machines and programs, then the analysis is not predictive of real performance. Over the years, computer scientists have designed various models to capture important aspects of the machines that we use. The most fundamental model that is used to analyze sequential algorithms is the Random Access Machine (RAM) model <ce:cross-ref id="cf000015" refid="br000105">[21]</ce:cross-ref>, which we teach undergraduates in their first algorithms class. This model assumes that all operations, including memory accesses, take unit time. While this model is a good predictor of performance on computationally intensive programs, it does not properly capture the important characteristics of the memory hierarchy of modern machines. Aggarwal and Vitter proposed the Disk Access Machine (DAM) model <ce:cross-ref id="cf000020" refid="br000110">[22]</ce:cross-ref> which counts the number of memory transfers from slow to fast memory instead of simply counting the number of memory accesses by the program. Therefore, it better captures the fact that modern machines have memory hierarchies and exploiting spatial and temporal locality on these machines can lead to better performance. There are also a number of other models that consider the memory access costs of sequential algorithms in different ways <ce:cross-refs id="cs000035" refid="br000115 br000120 br000125 br000130 br000135 br000140 br000145">[23-29]</ce:cross-refs>.</ce:para><ce:para id="p000040" view="all">For parallel computing, the analogue for the RAM model is the Parallel Random Access Machine (PRAM) model <ce:cross-ref id="cf000025" refid="br000150">[30]</ce:cross-ref>, and there is a large body of work describing and analyzing algorithms in the PRAM model <ce:cross-refs id="cs000040" refid="br000155 br000160">[31,32]</ce:cross-refs>. In the PRAM model, the algorithm's complexity is analyzed in terms of its <ce:italic>work</ce:italic>-the time taken by the algorithm on 1 processor, and <ce:italic>span</ce:italic> (also called <ce:italic>depth</ce:italic> and <ce:italic>critical-path length</ce:italic>)-the time taken by the algorithm on an infinite number of processors. Given a machine with <mml:math altimg="si37.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors, a PRAM algorithm with work <mml:math altimg="si38.gif" display="inline" overflow="scroll"><mml:mi>W</mml:mi></mml:math> and span <mml:math altimg="si39.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi></mml:math> completes in <mml:math altimg="si40.gif" display="inline" overflow="scroll"><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>W</mml:mi><mml:mo>/</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> time. The PRAM model also ignores the vagaries of the memory hierarchy and assumes that each memory access by the algorithm takes unit time. For modern machines, however, this assumption seldom holds. Therefore, researchers have designed various models that capture memory hierarchies for various types of machines such as distributed memory machines <ce:cross-refs id="cs000045" refid="br000165 br000170 br000175">[33-35]</ce:cross-refs>, shared memory machines and multi-cores <ce:cross-refs id="cs000050" refid="br000180 br000185 br000190 br000195 br000200">[36-40]</ce:cross-refs>, or the combination of the two <ce:cross-refs id="cs000055" refid="br000205 br000210">[41,42]</ce:cross-refs>.</ce:para><ce:para id="p000045" view="all">All of these models capture particular capabilities and properties of the respective target machines, namely shared memory machines or distributed memory machines. While superficially highly-threaded, many-core machines such as GPUs are shared memory machines, their characteristics are very different from traditional multi-core or multiprocessor shared memory machines. The most important distinction between the multi-cores and highly-threaded, many-core machines is the number of threads per core. On multi-core machines, context switch cost is high, and most models nominally assume that only one (or a small constant number of) thread(s) are running on each machine and this thread blocks when there is a memory access. Therefore, many models consider the number of memory transfers from slow memory to fast memory as a performance measure, and algorithms are designed to minimize these, since memory transfers take a significant amount of time. In contrast, highly-threaded, many-core machines are explicitly designed to have a large number of threads per core and a fast context switching mechanism. Highly-threaded many-cores are explicitly designed to hide memory latency; if a thread stalls on a memory operation, some other thread can be scheduled in its place. In principle, the number of memory transfers does not matter <ce:italic>as long as there are enough threads</ce:italic> to hide their latency. Therefore, if there are enough threads, we should, in principle, be able to use PRAM algorithms on such machines, since we can ignore the effect of memory transfers which is exactly what PRAM model does.</ce:para><ce:para id="p000050" view="all">However, the number of threads required to reach the point where one gets PRAM performance depends on both the algorithm and the hardware. Since no highly-threaded, many-core machine allows an infinite number of threads, it is important to understand both (1) how many threads does a particular algorithm need to achieve PRAM performance, and (2) how does an algorithm perform when it has fewer threads than required to get PRAM performance? In this paper, we attempt to characterize these properties of algorithms. To motivate this enterprise and to understand the importance of high thread counts on highly-threaded, many-core machines, let us consider a simple application that performs Bloom filter set membership tests on an input stream of biosequence data on GPUs <ce:cross-ref id="cf000030" refid="br000015">[3]</ce:cross-ref>. The problem is embarrassingly parallel, each set membership test is independent of every other membership test. <ce:cross-ref id="cf000035" refid="f000005">Fig. 1</ce:cross-ref><ce:float-anchor refid="f000005"/> shows the performance of this application, varying the number of threads per processor core, for two distinct GPUs. For both machines, the pattern is quite similar, at low thread counts, the performance increases (roughly linearly) with the number of threads, up until a transition region, after which the performance no longer increases with increasing thread count. While the location of the transition region is different for distinct GPU models, this general pattern is found in many applications. Once sufficient threads are present, the PRAM model adequately describes the performance of the application and increasing the number of threads no longer helps.</ce:para><ce:para id="p000055" view="all">In this work, we propose the <ce:italic>Threaded Many-core Memory (TMM)</ce:italic> model that captures the performance characteristics of these highly-threaded, many-core machines. This model explicitly models the large number of threads per processor and the memory latency to slow memory. Note that while we motivate this model for highly-threaded many-core machines with synchronous computations, in principle, it can be used in any system which has fast context switching and enough threads to hide memory latency. Typical examples of such machines include both NVIDIA and AMD/ATI GPUs and the YarcData uRiKA system. We do not try to model the Intel Xeon Phi, due to its limited use of threading for latency hiding. In contrast, its approach to hide memory latency is primarily based on strided memory access patterns associated with vector computation.</ce:para><ce:para id="p000060" view="all">If the latency of transfers from slow memory to fast memory is small, or if the number of threads per processor is infinite, then this model generally provides the same analysis results as the PRAM analysis. It, however, provides more intuition. (1) Ideally, we want to get the PRAM performance for algorithms using the fewest number of threads possible, since threads do have overhead. This model can help us pick such algorithms. (2) It also captures the reality of when memory latency is large and the number of threads is large but finite. In particular, it can distinguish between algorithms that have the same PRAM analysis, but one may be better at hiding latency than another with a bounded number of threads.</ce:para><ce:para id="p000065" view="all">This model is a high-level model meant to be generally applicable to a number of machines which allow a large number of threads with fast context switching. Therefore, it abstracts away many implementation details of either the machine or the algorithm. We also assume that the hardware provides 0-cost and perfect scheduling between threads. In addition, it also models the machine as having only 2 levels of memory. In particular, we model a slow global memory and fast local memory shared by one <ce:italic>core group</ce:italic>. In practice, these machines may have many levels of memory. However, we are interested in the interplay between the farthest level, since the latencies are the largest at that level, and therefore have the biggest impact on the performance. We expect that the model can be extended to also model other levels of the memory hierarchy.</ce:para><ce:para id="p000070" view="all">We analyze 4 classic algorithms for the problem of computing All Pairs Shortest Paths (APSP) on a weighted graph in the TMM model <ce:cross-ref id="cf000040" refid="br000215">[43]</ce:cross-ref>. We compare the analysis from this model with the PRAM analysis of these 4 algorithms to gain intuition about the usefulness of both our model and the PRAM model for analyzing performance of algorithms on highly-threaded, many-core machines. Our results validate the intuition that this model can provide more information than the PRAM model for the large latency, finite thread case. In particular, we compare these algorithms and find specific relationships between hardware parameters (latency, fast memory size, limits on number of threads) under which some algorithms are better than others even if they have the same PRAM cost.</ce:para><ce:para id="p000075" view="all">Following the formal analysis, we assess the utility of the model by comparing empirically measured performance on an individual machine to that predicted by the model. For two of the APSP algorithms, we illustrate the impact of various individual parameters on performance, showing the effectiveness of the model at predicting measured performance.</ce:para><ce:para id="p000080" view="all">This paper is organized as follows. Section <ce:cross-ref id="cf000045" refid="s000010">2</ce:cross-ref> presents related work. Section <ce:cross-ref id="cf000050" refid="s000015">3</ce:cross-ref> describes the TMM model. Section <ce:cross-ref id="cf000055" refid="s000040">4</ce:cross-ref> provides the 4 shortest paths algorithms and their analysis in both the PRAM and TMM models. Section <ce:cross-ref id="cf000060" refid="s000105">5</ce:cross-ref> provides the lessons learned from this model; in particular, we see that algorithms that have the same PRAM performance have different performance in the TMM model since they are better at hiding memory latency with fewer threads. Section <ce:cross-ref id="cf000065" refid="s000130">6</ce:cross-ref> continues the discussion of lessons learned, concentrating on the effects of problem size. Section <ce:cross-ref id="cf000070" refid="s000145">7</ce:cross-ref> shows performance measurements for a pair of the APSP algorithms executing on a commercial GPU, illustrating correspondence between model predictions and empirical measurements. Finally, Section <ce:cross-ref id="cf000075" refid="s000170">8</ce:cross-ref> concludes.</ce:para></ce:section><ce:section id="s000010" view="all"><ce:label>2</ce:label><ce:section-title id="st000025">Related work</ce:section-title><ce:para id="p000085" view="all">In this section, we briefly review the related work. We first review the work on abstract models of computations for both sequential and parallel machines. We then review recent work on algorithms and performance analysis of GPUs which are the most common current instantiations of highly-threaded, many-core machines.</ce:para><ce:para id="p000090" view="all">Many machine and memory models have been designed for various types of parallel and sequential machines. In an early work, Aggarwal et al. <ce:cross-ref id="cf000080" refid="br000125">[25]</ce:cross-ref> present the Hierarchical Memory Model (HMM) and use it for a theoretical investigation of the inherent complexity of solving problems in RAM with a memory hierarchy of multiple levels. It differs from the RAM model by defining that access to location <mml:math altimg="si41.gif" display="inline" overflow="scroll"><mml:mi>x</mml:mi></mml:math> takes <mml:math altimg="si42.gif" display="inline" overflow="scroll"><mml:mo>log</mml:mo><mml:mi>x</mml:mi></mml:math> time, but it does not consider the concept of block transfers, which collects data into blocks to utilize spatial locality of reference in algorithms. The Block Transfer model (BT) <ce:cross-ref id="cf000085" refid="br000135">[27]</ce:cross-ref> addresses this deficiency by defining that a block of consecutive locations can be copied from memory to memory, taking one unit of time per element after the initial access time. Alpern et al. propose the Memory Hierarchy (MH) Framework <ce:cross-ref id="cf000090" refid="br000130">[26]</ce:cross-ref> that reflects important practical considerations that are hidden by the RAM and HMM models: data are moved in fixed size blocks simultaneously at different levels in the hierarchy, and the memory capacity as well as bus bandwidth are limited at each level. But there are too many parameters in this model that can obscure algorithm analysis. Thus, they simplified and reduced the MH parameters by putting forward a new Uniform Memory Hierarchy (UMH) model <ce:cross-refs id="cs000060" refid="br000140 br000145">[28,29]</ce:cross-refs>. Later, an 'ideal-cache' model was introduced in <ce:cross-refs id="cs000065" refid="br000115 br000120">[23,24]</ce:cross-refs> allowing analysis of cache-oblivious algorithms that use asymptotically optimal amounts of work and move data asymptotically optimally among multiple levels of cache without the necessity of tuning program variables according to hardware configuration parameters.</ce:para><ce:para id="p000095" view="all">In the parallel case, although widely used, the PRAM <ce:cross-ref id="cf000095" refid="br000150">[30]</ce:cross-ref> model is unrealistic because it assumes all processors work synchronously and that interprocessor communication is free. Quite different to PRAM, the Bulk-Synchronous Parallel (BSP) model <ce:cross-ref id="cf000100" refid="br000170">[34]</ce:cross-ref> attempts to bridge theory and practice by allowing processors to work asynchronously, and it models latency and limited bandwidth for distributed memory machines without shared memory. Culler et al. <ce:cross-ref id="cf000105" refid="br000165">[33]</ce:cross-ref> offer a new parallel machine model called LogP based on BSP, characterizing a parallel machine by four parameters: number of processors, communication bandwidth, delay, and overhead. It reflects the convergence towards systems formed by a collection of computers connected by a communication network via message passing. Vitter et al. <ce:cross-ref id="cf000110" refid="br000175">[35]</ce:cross-ref> present a two-level memory model and give a realistic treatment of parallel block transfers in parallel machines. But this model assumes that processors are interconnected via sharing of internal memory.</ce:para><ce:para id="p000100" view="all">More recently, several models have been proposed emphasizing the use of private-cache chip multiprocessors (CMPs). Arge et al. <ce:cross-ref id="cf000115" refid="br000180">[36]</ce:cross-ref> present the Parallel External Memory (PEM) model with <mml:math altimg="si43.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors and a two-level memory hierarchy, consisting of the main memory as external memory shared by all processors and caches as internal memory exclusive to each of the <mml:math altimg="si44.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors. Blelloch et al. <ce:cross-ref id="cf000120" refid="br000185">[37]</ce:cross-ref> present a multi-core-cache model capturing the fact that multi-core machines have both per-processor private caches and a large shared cache on-chip. Bender et al. <ce:cross-ref id="cf000125" refid="br000220">[44]</ce:cross-ref> present a concurrent cache-oblivious model. Blelloch et al. <ce:cross-ref id="cf000130" refid="br000190">[38]</ce:cross-ref> also propose a parallel cache-oblivious (PCO) model to account for costs of a wide range of cache hierarchies. Chowdhury et al. <ce:cross-ref id="cf000135" refid="br000195">[39]</ce:cross-ref> present a hierarchical multi-level caching model (HM), consisting of a collection of cores sharing an arbitrarily large main memory through a hierarchy of caches of finite but increasing sizes that are successively shared by larger groups of cores. They in <ce:cross-ref id="cf000140" refid="br000210">[42]</ce:cross-ref> consider three types of caching systems for CMPs: D-CMP with a private cache for each core, S-CMP with a single cache shared by all cores, and multi-core with private <mml:math altimg="si45.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> caches and a shared <mml:math altimg="si46.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> cache. All the models above do not accurately describe highly-threaded, many-core systems, due to their distinctive architectures, i.e. the explicit use of many threads for the purpose of hiding memory latency.</ce:para><ce:para id="p000105" view="all">While there has not been much work on abstract machine models for highly-threaded, many-core machines, there has been a lot of recent work on designing calibrated performance models for particular instantiations of these machines such as NVIDIA GPUs. We review some of that work here. Liu et al. <ce:cross-ref id="cf000145" refid="br000095">[19]</ce:cross-ref> describe a general performance model that predicts the performance of a biosequence database scanning application fairly precisely. Their model incorporates the relationship between problem size and performance, but only targets their biosequence application. Govindaraju et al. <ce:cross-ref id="cf000150" refid="br000225">[45]</ce:cross-ref> propose a cache model for efficiently implementing three memory intensive scientific applications with nested loops. It is helpful for applications with 2D-block representations while choosing an appropriate block size by estimating cache misses, but is not completely general. Ryoo et al. <ce:cross-ref id="cf000155" refid="br000230">[46]</ce:cross-ref> summarize five categories of optimization mechanisms, and use two metrics to prune the GPU performance optimization space by 98% via computing the utilization and efficiency of GPU applications. They do not, however, consider memory latency and multiple conflicting performance indicators. Kothapalli et al. are the first to define a general GPU analytical performance model in <ce:cross-ref id="cf000160" refid="br000235">[47]</ce:cross-ref>. They propose a simple yet efficient solution combining several well-known parallel computation models: PRAM, BSP, QRQW, but they do not model global memory coalescing. Using a different approach, Hong et al. <ce:cross-ref id="cf000165" refid="br000085">[17]</ce:cross-ref> propose another analytical model to capture the cost of memory operations by counting the number of parallel memory requests in terms of memory-warp parallelism (MWP) and computation-warp parallelism (CWP). Meantime, Baghsorkhi et al. <ce:cross-ref id="cf000170" refid="br000080">[16]</ce:cross-ref> measure performance factors in isolation and later combine them to model the overall performance via workflow graphs so that the interactive effects between different performance factors are modeled correctly. The model can determine data access patterns, branch divergence, and control flow patterns only for a restricted class of kernels on traditional GPU architectures. Zhang and Owens <ce:cross-ref id="cf000175" refid="br000075">[15]</ce:cross-ref> present a quantitative performance model that characterizes an application's performance as being primarily bounded by one of three potential limits: instruction pipeline, shared memory accesses, and global memory accesses. More recently, Sim et al. <ce:cross-ref id="cf000180" refid="br000240">[48]</ce:cross-ref> develop a performance analysis framework that consists of an analytical model and profiling tools. The framework does a good job in performance diagnostics on case studies of real codes. Kim et al. <ce:cross-ref id="cf000185" refid="br000245">[49]</ce:cross-ref> also design a tool to estimate GPU memory performance by collecting performance-critical parameters. Parakh et al. <ce:cross-ref id="cf000190" refid="br000250">[50]</ce:cross-ref> present a model to estimate both computation time by precisely counting instructions and memory access time by a method to generate address traces. All of these efforts are mainly focused on the practical calibrated performance models. No attempts have been made to develop an asymptotic theoretical model applicable to a wide range of highly-threaded machines.</ce:para></ce:section><ce:section id="s000015" view="all"><ce:label>3</ce:label><ce:section-title id="st000030">TMM model</ce:section-title><ce:para id="p000110" view="all">The TMM model is meant to model the asymptotic performance of algorithms on highly-threaded, many-core machines. The model should abstract away the details of particular implementations so as to be applicable to many instantiations of these machines, while being particular enough to model the performance of algorithms on these machines with reasonable accuracy. In this section, we will describe the important characteristics of these highly-threaded, many-core architectures and our model for analyzing algorithms for these architectures.</ce:para><ce:section id="s000020" view="all"><ce:label>3.1</ce:label><ce:section-title id="st000035">Highly-threaded, many-core architectures</ce:section-title><ce:para id="p000115" view="all">The most important high-level characteristic of highly-threaded, many-core architectures is that they provide a large number of hardware threads and use fast and low-overhead context-switching in order to hide the memory access latency from slow global memory.</ce:para><ce:para id="p000120" view="all">Highly-threaded, many-core architectures typically consist of a number of <ce:italic>core groups</ce:italic>, each containing a number of processors (or cores),<ce:cross-ref id="cf000195" refid="fn000005"><ce:sup loc="post">1</ce:sup></ce:cross-ref><ce:footnote id="fn000005"><ce:label>1</ce:label><ce:note-para id="np000010" view="all">A core group can also have a single core.</ce:note-para></ce:footnote> a fixed number of registers, and a fixed quantity of fast local on-chip memory shared within a core group. A large slow global memory is shared by all the core groups. Registers and local on-chip memory are the fastest to access, while accessing the global memory may potentially take 100s of cycles. The TMM model models these machines as having a memory hierarchy with two levels of memory: slow global memory and fast local memory. In addition, on most highly-threaded, many-core machines, data is transferred from slow to fast memory in <ce:italic>chunks</ce:italic>; instead of just transferring one word at a time, the hardware tries to transfer a large number of words during a memory transfer. The chunk can either be a cache line from hardware managed caches, or an explicitly-managed combined read from multiple threads. Since this characteristic of using high-bandwidth transfers in order to counter high latencies is common to most many-core machines (and even most multi-core machines), the TMM model captures the chunk size as one of its parameters.</ce:para><ce:para id="p000125" view="all">These architectures support a large number of hardware threads, much larger than the number of cores. Cores on a single core group execute in synchronous style where groups of threads execute in lock-step. When a thread group executing on a core group stalls on a slow memory access, in theory, a context switch occurs and another thread group is scheduled on that core group. The abstract architecture is shown in <ce:cross-ref id="cf000200" refid="f000010">Fig. 2</ce:cross-ref><ce:float-anchor refid="f000010"/>. Note that this architecture abstraction ignores a number of details about the physical machine, including thread grouping, scheduling, etc.</ce:para></ce:section><ce:section id="s000025" view="all"><ce:label>3.2</ce:label><ce:section-title id="st000040">TMM model parameters</ce:section-title><ce:para id="p000130" view="all">The TMM model captures the important characteristics of a highly-threaded, many-core architecture by using six parameters shown in <ce:cross-ref id="cf000205" refid="t000005">Table 1</ce:cross-ref><ce:float-anchor refid="t000005"/>. <mml:math altimg="si47.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math> is the latency for accessing the slow memory (in our case, the global memory which is shared by all the core groups). <mml:math altimg="si48.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> is the total number of cores (or processors) in the machine. <mml:math altimg="si49.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi></mml:math> is the maximum chunk size; the number of words that can be read from slow memory to fast memory in one memory transfer. The parameter <mml:math altimg="si50.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math> represents the size of fast local memory per core group and <mml:math altimg="si51.gif" display="inline" overflow="scroll"><mml:mi>Q</mml:mi></mml:math> represents the number of cores per core group. As mentioned earlier, in some instantiations, a core group can have a single core. In this case, a many-core machine looks very much like a multi-core machine with a large number of low-overhead hardware threads. Note that we do not have a parameter for the number of core groups, that quantity is simply <mml:math altimg="si52.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math>. Finally <mml:math altimg="si53.gif" display="inline" overflow="scroll"><mml:mi>X</mml:mi></mml:math> is the hardware limit on the number of threads an algorithm is allowed to generate per core. This limit is enforced due to many different constraints, such as constraints on the number of registers each thread uses and an explicit constraint on the number of threads. We unify these constraints into one parameter.</ce:para><ce:para id="p000135" view="all">In addition to the architecture parameters, we must also consider the parameters which are determined by the algorithm. We assume that the programmer has written a correct synchronous program and taken care to balance the workload across the core groups. These program parameters are shown in <ce:cross-ref id="cf000210" refid="t000010">Table 2</ce:cross-ref><ce:float-anchor refid="t000010"/>. <mml:math altimg="si54.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> represents the work of the algorithm, that is, the total number of operations that the program must perform (including fast memory accesses).<mml:math altimg="si55.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub></mml:math> represents the span of the algorithm, that is, the total number of operations on the critical path. These are similar to the analogous PRAM parameters of work and time (or depth or critical-path length).</ce:para><ce:para id="p000140" view="all">Next, we come to program parameters that are specific to many-core programs. <mml:math altimg="si56.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi></mml:math> represents the total number of global memory operations performed by the algorithm. Note that this is the total number of operations, not total number of accesses. Since many-core machines often transfer data in large chunks, multiple memory accesses can combine into one memory transfer. For instance, if the many-core machine has a hardware managed cache, and the program accesses data sequentially, then there is only one memory operation for <mml:math altimg="si57.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi></mml:math> memory accesses; these will count as one when accounting for <mml:math altimg="si58.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi></mml:math>. <mml:math altimg="si59.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi></mml:math> is the number of threads created by the program per core. We assume that the work is perfectly distributed among cores. Therefore, the total number of threads in the system is <mml:math altimg="si60.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:math>. On highly-threaded, many-core architectures, thread switching is used to hide memory latency. Therefore, it is beneficial to create as many threads as possible. However, the maximum number of threads is limited by both the hardware and the program. The software limitation has to do with parallelism, the number of threads per core is limited by <mml:math altimg="si61.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. The hardware limits <mml:math altimg="si62.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:mi>X</mml:mi></mml:math>. Finally, we have a parameter <mml:math altimg="si63.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi></mml:math>, which is the local memory used per thread. <mml:math altimg="si64.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi></mml:math> and <mml:math altimg="si65.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi></mml:math> are related parameters, since there is a limited amount of local memory in the system. The number of threads per core is at most <mml:math altimg="si66.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>Q</mml:mi><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para></ce:section><ce:section id="s000030" view="all"><ce:label>3.3</ce:label><ce:section-title id="st000045">TMM model applicability</ce:section-title><ce:para id="p000145" view="all">The TMM model is a high-level abstract model, meant to be applicable to many instantiations of hardware platforms that feature a large number of threads with fast context switching and a hierarchical memory subsystem of at least two levels with a large memory latency gap in between. Typical examples of this set include NVIDIA GPUs, AMD/ATI GPUs, and the uRiKA machine from YarcData.</ce:para><ce:para id="p000150" view="all">For NVIDIA GPUs, a number of streaming multiprocessors (core groups in our terminology) share the same global memory. On each of these core groups, there are a number of CUDA cores<ce:cross-ref id="cf000215" refid="fn000010"><ce:sup loc="post">2</ce:sup></ce:cross-ref><ce:footnote id="fn000010"><ce:label>2</ce:label><ce:note-para id="np000015" view="all">CUDA (aka Compute Unified Device Architecture) is a parallel computing platform and programming model created by NVIDIA.</ce:note-para></ce:footnote> that share a fixed number of registers and on-chip (fast) memory shared among the cores of the core group. A fast hardware-supported context-switching mechanism enables a large number of threads to execute concurrently. Transfers between slow global memory and fast local memory can occur in chunks of at most 32 words; these chunks can only be created if the memory accesses are within a specified range. Accessing the off-chip global memory usually takes 20 to 40 times more clock cycles than accessing the on-chip shared memory/L1 cache <ce:cross-ref id="cf000220" refid="br000255">[51]</ce:cross-ref>. All these features are well captured in the TMM model. Streaming multiprocessors serve the same role as a core group, while CUDA cores are equivalent to the cores defined in TMM. The width of memory access <mml:math altimg="si67.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi></mml:math> is 32 due to the coalescing of the threads in a warp. Global memory latency and size of on-chip shared memory/L1 cache are also depicted by <mml:math altimg="si68.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math> and <mml:math altimg="si69.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math> respectively.</ce:para><ce:para id="p000155" view="all">Considering AMD/ATI GPUs and taking Cypress, the codename for Radeon HD5800 series GPUs, as an example, the architecture is composed of 20 Single-Instruction-Multiple-Data (SIMD) computation engines. In each SIMD engine, there are 16 Thread Processors (TP) and a 32 kB Local Data Store (LDS). Every TP is arranged as a five-way or four-way Very Long Instruction Word (VLIW) processor, and consists of 5 Stream Cores (SC). Low context-switch threading is well supported, and every 64 threads are grouped into a wavefront executing the same instruction. Basically, the SIMD engine can naturally be modeled by core groups. Each SC is modeled as a core in TMM, summing up to 1600 cores totally. LDS is straightforwardly described by the fast local memory of TMM. The width of memory access <mml:math altimg="si70.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi></mml:math> in TMM equals to the wavefront width of 64 for AMD/ATI GPUs.</ce:para><ce:para id="p000160" view="all">The uRiKA system from YarcData is also a potential target for the TMM model. Based on the description from Alverson et al. <ce:cross-ref id="cf000225" refid="br000260">[52]</ce:cross-ref> about the nature of the computations this processor was designed to run, it is a purpose-built appliance for real-time graph analytics featuring graph-optimized hardware that provides up to 512 terabytes of global shared memory, massively-multi-threaded graph processors (named Threadstorm) supporting 128 threads/processor, and highly scalable I/O. Therefore, 128 defines parameter <mml:math altimg="si71.gif" display="inline" overflow="scroll"><mml:mi>X</mml:mi></mml:math>, the hard limit of number of threads per processor. There can be up to 65,000 threads in a 512 processor system and over 1 million threads at the maximum system size of 8192 processors, so that the latencies are hidden by accommodating many remote memory references in flight. The processor's instruction execution hardware essentially does a context switch every instruction cycle, finding the next thread that is ready to issue an instruction into the execution pipeline. This suggests that the memory access width or chunk size <mml:math altimg="si72.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi></mml:math> is 1 on these machines. Threads do not share anything, as the Threadstorm processor has 128 hardware copies of the register set, program counter, stack pointer, etc., necessary to hold the current state of one software thread that is executing on the processor. Conceptually, each of the Threadstorm processors is mapped to a core group in the TMM model but, different than the two GPU architectures, it has only one core on-chip, thus <mml:math altimg="si73.gif" display="inline" overflow="scroll"><mml:mi>Q</mml:mi></mml:math> equals 1.</ce:para></ce:section><ce:section id="s000035" view="all"><ce:label>3.4</ce:label><ce:section-title id="st000050">TMM analysis structure</ce:section-title><ce:para id="p000165" view="all">In order to analyze program performance in the TMM model, we must first calculate the program parameters for the particular program. Once we have calculated these values, we can then try to understand the performance of the algorithm. We first calculate the effective work of the algorithm <mml:math altimg="si74.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub></mml:math>. The effective work should consider both work due to computation and work due to memory accesses. Total work due to memory accesses is <mml:math altimg="si75.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:math>, but since this work is hidden by using threads, the real effective work due to memory accesses is <mml:math altimg="si76.gif" display="inline" overflow="scroll"><mml:mrow><mml:mo>(</mml:mo><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>/</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:math> Therefore, we have <ce:display><ce:formula id="fd000005"><ce:label>(1)</ce:label><mml:math altimg="si77.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display> Note that this expression assumes perfect scheduling (the threads are context swapped with no overhead, as soon as they are stalled) and perfect load balance between threads.</ce:para><ce:para id="p000170" view="all">The time to execute on <mml:math altimg="si78.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> cores is represented by <mml:math altimg="si79.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:math> and is defined as: <ce:display><ce:formula id="fd000010"><ce:label>(2)</ce:label><mml:math altimg="si80.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000175" view="all">Therefore, speedup on <mml:math altimg="si81.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> cores, <mml:math altimg="si82.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:math>, is <ce:display><ce:formula id="fd000015"><ce:label>(3)</ce:label><mml:math altimg="si83.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>P</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000180" view="all">For linear speedup, <mml:math altimg="si84.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:math> should be <mml:math altimg="si85.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math>. More precisely, for PRAM algorithms, <mml:math altimg="si86.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:math>. Therefore, if the first two terms in the <mml:math altimg="si87.gif" display="inline" overflow="scroll"><mml:mo>min</mml:mo></mml:math> of Eq. <ce:cross-ref id="cf000230" refid="fd000015">(3)</ce:cross-ref> dominate, then a highly-threaded, many-core algorithm's performance is the same as the corresponding PRAM algorithm. On the other hand, if the last term dominates, then the algorithm's performance depends on other factors. If <mml:math altimg="si88.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi></mml:math> could be unbounded, then the last term will never dominate. However, as we explained earlier, <mml:math altimg="si89.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi></mml:math> is not an unlimited resource and has both hardware and algorithmic upper bounds. Therefore, based on the machine parameters, algorithms that have the same PRAM performance can have different real performance on highly-threaded, many-core machines. Therefore, this model can help us pick algorithms that provide performance as close as possible to PRAM algorithms.</ce:para></ce:section></ce:section><ce:section id="s000040" view="all"><ce:label>4</ce:label><ce:section-title id="st000055">Analysis of all pairs shortest paths algorithms using the TMM model</ce:section-title><ce:para id="p000185" view="all">In this section, we demonstrate the usefulness of our model by using it to analyze 4 different algorithms for calculating all pairs shortest paths in graphs. All pairs shortest paths is a classic problem for which there are many algorithms. We are given a graph <mml:math altimg="si90.gif" display="inline" overflow="scroll"><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> with <mml:math altimg="si91.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> vertices and <mml:math altimg="si92.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi></mml:math> edges. Each edge <mml:math altimg="si93.gif" display="inline" overflow="scroll"><mml:mi>e</mml:mi></mml:math> has a weight <mml:math altimg="si94.gif" display="inline" overflow="scroll"><mml:mi>w</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>e</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. We must calculate the shortest weighted path from every vertex to every other vertex. In this section, we are interested in asymptotic insights, therefore, we assume that the graphs are large graphs. In particular <mml:math altimg="si95.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>&gt;</mml:mo><mml:mi>Z</mml:mi></mml:math>.</ce:para><ce:section id="s000045" view="all"><ce:label>4.1</ce:label><ce:section-title id="st000060">Dynamic programming via matrix multiplication</ce:section-title><ce:para id="p000190" view="all">Our first algorithm is a dynamic programming algorithm <ce:cross-ref id="cf000235" refid="br000265">[53]</ce:cross-ref> that uses repeated matrix multiplication to calculate all pairs shortest paths. The graph is represented as an adjacency matrix <mml:math altimg="si96.gif" display="inline" overflow="scroll"><mml:mi>A</mml:mi></mml:math> where <mml:math altimg="si97.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> represents the weight of edge (<mml:math altimg="si98.gif" display="inline" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:math>).</ce:para><ce:para id="p000195" view="all"><mml:math altimg="si99.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msup></mml:math> is a transitive matrix where <mml:math altimg="si100.gif" display="inline" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msubsup></mml:math> represents the shortest path from vertex <mml:math altimg="si101.gif" display="inline" overflow="scroll"><mml:mi>i</mml:mi></mml:math> to vertex <mml:math altimg="si102.gif" display="inline" overflow="scroll"><mml:mi>j</mml:mi></mml:math> using at most <mml:math altimg="si103.gif" display="inline" overflow="scroll"><mml:mi>l</mml:mi></mml:math> intermediate edges. <mml:math altimg="si104.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:math> is the same as the adjacency matrix <mml:math altimg="si105.gif" display="inline" overflow="scroll"><mml:mi>A</mml:mi></mml:math> and we want to calculate <mml:math altimg="si106.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:math> to calculate all pairs shortest paths.</ce:para><ce:para id="p000200" view="all"><mml:math altimg="si107.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math> can be calculated from <mml:math altimg="si108.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:math> as follows: <ce:display><ce:formula id="fd000020"><ce:label>(4)</ce:label><mml:math altimg="si109.gif" display="block" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo>min</mml:mo></mml:mrow><mml:mrow><mml:mn>0</mml:mn><mml:mo>â¤</mml:mo><mml:mi>k</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:mo>(</mml:mo><mml:munderover accentunder="false" accent="false"><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:munderover><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display> Note that, the structure of this equation is the same as the structure of a matrix multiplication operation where the sum is replaced by a <mml:math altimg="si110.gif" display="inline" overflow="scroll"><mml:mo>min</mml:mo></mml:math> operation and the multiplication is replaced by an addition operation. Therefore, we can use repeated matrix multiplication which calculates <mml:math altimg="si111.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msup></mml:math> using <mml:math altimg="si112.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> matrix multiplications.</ce:para><ce:section id="s000050" view="all"><ce:section-title id="st000065">PRAM algorithm and analysis</ce:section-title><ce:para id="p000205" view="all">Parallelizing this algorithm for the PRAM model simply involves parallelizing the matrix multiplication algorithm such that each element in the matrix is calculated in parallel. The total work of <mml:math altimg="si113.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:math> matrix multiplications using a PRAM algorithm is <mml:math altimg="si114.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.<ce:cross-ref id="cf000240" refid="fn000015"><ce:sup loc="post">3</ce:sup></ce:cross-ref><ce:footnote id="fn000015"><ce:label>3</ce:label><ce:note-para id="np000020" view="all">This can be done faster using Strassen's algorithm. Using Strassen's algorithm will impact the PRAM and the TMM algorithms equally. Therefore, we demonstrate our point using the simpler algorithm.</ce:note-para></ce:footnote> The span of a single matrix multiplication algorithm is <mml:math altimg="si115.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. Therefore, the total span of the algorithm is <mml:math altimg="si116.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para><ce:para id="p000210" view="all">The time and speedup using <mml:math altimg="si117.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors are <ce:display><ce:formula id="fd000025"><ce:formula id="fd000030"><ce:label>(5)</ce:label><mml:math altimg="si118.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000035"><ce:label>(6)</ce:label><mml:math altimg="si119.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display> Therefore, the PRAM algorithm gets linear speedup as long as<mml:math altimg="si120.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi><mml:mo>â¤</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math>.</ce:para></ce:section><ce:section id="s000055" view="all"><ce:section-title id="st000070">TMM algorithm and analysis</ce:section-title><ce:para id="p000215" view="all">TMM algorithms are tailored to highly-threaded, many-core architectures generally by using fast on-chip memory to avoid accesses to slow off-chip global memory, coalescing to diminish the time required to access slow memory, and threading to hide the latency of accesses to slow memory. Due to its large size, the adjacency matrix is stored in off-chip global memory. Following traditional block-decomposition techniques, sub-blocks of the result matrix (whose size is denoted by <mml:math altimg="si121.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math>) are assigned to core groups for computation. The threads in a core group read in the required input sub-blocks, perform the computation of Eq. <ce:cross-ref id="cf000245" refid="fd000020">(4)</ce:cross-ref> for their assigned sub-block, and write the sub-block out to global memory. This happens <mml:math altimg="si122.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:math> times by repeated squaring.</ce:para><ce:para id="p000220" view="all">The work and the span of this algorithm remain unchanged from the PRAM algorithm. However, we must also calculate <mml:math altimg="si123.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi></mml:math>, the number of memory operations. Let us first consider a single matrix multiplication operation. There are a total of <mml:math altimg="si124.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math> elements and each element is read for the calculation of <mml:math altimg="si125.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mi>B</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> other blocks. However, due to the regularity in memory accesses, each block can be read fully coalesced. Therefore, the number of memory operations for one matrix multiply is <mml:math altimg="si126.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>â</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mi>B</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>B</mml:mi><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>. Also note that since we must fit a <mml:math altimg="si127.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi><mml:mo>Ã</mml:mo><mml:mi>B</mml:mi></mml:math> block in a local memory of size <mml:math altimg="si128.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math> on one core group, we get <mml:math altimg="si129.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi><mml:mo>=</mml:mo><mml:mi>Î</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mo>)</mml:mo></mml:mrow></mml:math>. Therefore, for <mml:math altimg="si130.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:math> matrix multiplication operations, <mml:math altimg="si131.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mo>â</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para><ce:para id="p000225" view="all">Now we are ready to calculate the time on <mml:math altimg="si132.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors. <ce:display><ce:formula id="fd000040"><ce:formula id="fd000045"><ce:label>(7)</ce:label><mml:math altimg="si133.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000050"><ce:label>(8)</ce:label><mml:math altimg="si134.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mo>â</mml:mo><mml:mi>C</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para><ce:para id="p000230" view="all">Therefore, the speedup on <mml:math altimg="si135.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors is <ce:display><ce:formula id="fd000055"><ce:formula id="fd000060"><ce:label>(9)</ce:label><mml:math altimg="si136.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub></mml:math></ce:formula><ce:formula id="fd000065"><ce:label>(10)</ce:label><mml:math altimg="si137.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mo>â</mml:mo><mml:mi>C</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>L</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para><ce:para id="p000235" view="all">We can now compare the PRAM and TMM analysis and note that the speedup is <mml:math altimg="si138.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> as long as <mml:math altimg="si139.gif" display="inline" overflow="scroll"><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mo>/</mml:mo><mml:mi>L</mml:mi><mml:mo>â¥</mml:mo><mml:mn>1</mml:mn></mml:math>. We also know that <mml:math altimg="si140.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>Q</mml:mi><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>, and <mml:math altimg="si141.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math>, since each thread only needs constant memory. Therefore, we can conclude that the algorithm achieves linear speedup as long as <mml:math altimg="si142.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para></ce:section></ce:section><ce:section id="s000060" view="all"><ce:label>4.2</ce:label><ce:section-title id="st000075">Johnson's algorithm: Dijkstra's algorithm using binary heaps</ce:section-title><ce:para id="p000240" view="all">Johnson's algorithm <ce:cross-ref id="cf000250" refid="br000270">[54]</ce:cross-ref> is an all pairs shortest paths algorithm that uses Dijkstra's single source algorithm as the subroutine and calls it <mml:math altimg="si143.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> times, once from each source vertex. Dijkstra's algorithm is a greedy algorithm for calculating single source shortest paths. The pseudo-code for Dijkstra's algorithm is given in Algorithm 1 <ce:cross-ref id="cf000255" refid="br000275">[55]</ce:cross-ref>. The single source algorithm consists of <mml:math altimg="si144.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> insert operations, <mml:math altimg="si145.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi></mml:math> decrease-key operations and <mml:math altimg="si146.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> delete-min operations from a min-priority queue. The standard way of implementing Dijkstra's algorithm is to use a binary or a Fibonacci heap to store the array elements. We now consider a binary heap implementation so that each operation (insert, decrease-key, and delete-min) takes <mml:math altimg="si147.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> time. Note that Dijkstra's algorithm does not work when there are negative weight edges in the graph.</ce:para><ce:para id="p000245" view="all"><ce:display><ce:figure id="f000050"><ce:link locator="fx1"/></ce:figure></ce:display></ce:para><ce:section id="s000065" view="all"><ce:section-title id="st000080">PRAM algorithm and analysis</ce:section-title><ce:para id="p000250" view="all">A simple parallel implementation of Johnson's algorithm using Dijkstra's algorithm consists of doing each single-source shortest path calculation in parallel. The total work of a single-source computation is <mml:math altimg="si148.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. For simplicity, we assume that the graph is connected, giving us <mml:math altimg="si149.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. Therefore, the total work for all pairs shortest paths is <mml:math altimg="si150.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. The span is <mml:math altimg="si151.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> since each single source computation executes sequentially. The time and speedup using <mml:math altimg="si152.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors are <ce:display><ce:formula id="fd000070"><ce:formula id="fd000075"><ce:label>(11)</ce:label><mml:math altimg="si153.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000080"><ce:label>(12)</ce:label><mml:math altimg="si154.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para><ce:para id="p000255" view="all">Therefore, the PRAM algorithm gets linear speedup as long as <mml:math altimg="si155.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi><mml:mo>â¤</mml:mo><mml:mi>n</mml:mi></mml:math>.</ce:para></ce:section><ce:section id="s000070" view="all"><ce:section-title id="st000085">TMM algorithm and analysis</ce:section-title><ce:para id="p000260" view="all">The TMM algorithm is very similar to the PRAM algorithm where each thread computes a single source shortest path. Therefore, each thread requires a min-heap of size <mml:math altimg="si156.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math>. Since <mml:math altimg="si157.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> may be arbitrarily large compared to <mml:math altimg="si158.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mi mathvariant="script">T</mml:mi></mml:math> (the share of local memory for each thread), these heaps cannot fit in local memory and must be allocated on the slow global memory.</ce:para><ce:para id="p000265" view="all">The work and span are the same as the PRAM algorithm. We must now compute <mml:math altimg="si159.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi></mml:math>. Note that each time the thread does a heap operation, it must access global memory, since the heaps are stored in global memory. In addition, binary heap accesses are not predictable and regular, so the heap accesses from different threads cannot be coalesced. Therefore, the total number of memory operations is <mml:math altimg="si160.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.<ce:cross-ref id="cf000260" refid="fn000020"><ce:sup loc="post">4</ce:sup></ce:cross-ref><ce:footnote id="fn000020"><ce:label>4</ce:label><ce:note-para id="np000025" view="all">There are other accesses that are not heap accesses, but those are asymptotically fewer and can be ignored.</ce:note-para></ce:footnote></ce:para><ce:para id="p000270" view="all">Now we are ready to calculate the time on <mml:math altimg="si161.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors. <ce:display><ce:formula id="fd000085"><ce:formula id="fd000090"><ce:label>(13)</ce:label><mml:math altimg="si162.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000095"><ce:label>(14)</ce:label><mml:math altimg="si163.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para><ce:para id="p000275" view="all">Therefore, the speedup on <mml:math altimg="si164.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors is <ce:display><ce:formula id="fd000100"><ce:label>(15)</ce:label><mml:math altimg="si165.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>L</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000280" view="all">Note that this algorithm gets linear speedup only if <mml:math altimg="si166.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>/</mml:mo><mml:mi>L</mml:mi><mml:mo>â¥</mml:mo><mml:mn>1</mml:mn></mml:math>. Therefore, the number of threads this algorithm needs to get linear speedup is very large. We know that <mml:math altimg="si167.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>Q</mml:mi><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>, and <mml:math altimg="si168.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math> for this algorithm. This allows us to conclude that this algorithm achieves linear speedup only if <mml:math altimg="si169.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>, since each thread needs only constant memory. These conditions are much stricter than those imposed by the dynamic programming algorithm.</ce:para></ce:section></ce:section><ce:section id="s000075" view="all"><ce:label>4.3</ce:label><ce:section-title id="st000090">Johnson's algorithm: Dijkstra's algorithm using arrays</ce:section-title><ce:para id="p000285" view="all">This algorithm is similar to the previous algorithm in that it still uses <mml:math altimg="si170.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> single-source Dijkstra's algorithm calculations. However, instead of binary heaps, we use arrays to do delete-min and decrease-key operations.</ce:para><ce:section id="s000080" view="all"><ce:section-title id="st000095">PRAM algorithm and analysis</ce:section-title><ce:para id="p000290" view="all">The PRAM algorithm is very similar to the algorithm that uses binary heaps. Each single source shortest path is computed in parallel. However, in this algorithm, we simply store the current estimates of the shortest path of vertices in an array instead of a binary heap. Therefore, there are <mml:math altimg="si171.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> arrays of size <mml:math altimg="si172.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math>, one for each single source shortest path calculation. Each decrease-key now takes <mml:math altimg="si173.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math> time, since one can simply decrease the key using random access. Each delete-min, however, takes <mml:math altimg="si174.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> work, since one must look at the entire array to find the minimum element. Therefore, the work of the algorithm is <mml:math altimg="si175.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> and the span is <mml:math altimg="si176.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. We can improve the span by doing delete-min in parallel, since one can find the smallest element in an array in parallel using <mml:math altimg="si177.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> work and <mml:math altimg="si178.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> time using a parallel prefix computation. This brings the total span to <mml:math altimg="si179.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> while the work remains the same.</ce:para><ce:para id="p000295" view="all">The time and speedup using <mml:math altimg="si180.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors is <ce:display><ce:formula id="fd000105"><ce:formula id="fd000110"><ce:label>(16)</ce:label><mml:math altimg="si181.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000115"><ce:label>(17)</ce:label><mml:math altimg="si182.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000120"><ce:label>(18)</ce:label><mml:math altimg="si183.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para></ce:section><ce:section id="s000085" view="all"><ce:section-title id="st000100">TMM algorithm and analysis</ce:section-title><ce:para id="p000300" view="all">The TMM algorithm is similar to the PRAM algorithm, except that each core group is responsible for a single-source shortest path calculation. Therefore, all the threads on a single core group (<mml:math altimg="si184.gif" display="inline" overflow="scroll"><mml:mi>Q</mml:mi><mml:mi mathvariant="script">T</mml:mi></mml:math> in number) cooperate to calculate a single shortest path computation. Since we assume that <mml:math altimg="si185.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>&gt;</mml:mo><mml:mi>Z</mml:mi></mml:math>, the entire array does not fit in local memory and must be read with each delete-min operation. Therefore, the span of the delete-min operation changes. For each delete-min operation, elements are read into local memory in chunks of size <mml:math altimg="si186.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math>. For each chunk, the minimum is computed in parallel in <mml:math altimg="si187.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>lg</mml:mo><mml:mi>Z</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> time. Therefore, the span of each delete-min operation is <mml:math altimg="si188.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mi>Z</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>lg</mml:mo><mml:mi>Z</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. Therefore, the total span is <mml:math altimg="si189.gif" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Z</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. The work is the same as the PRAM work.</ce:para><ce:para id="p000305" view="all">We must now compute the number of memory operations, <mml:math altimg="si190.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi></mml:math>. There are <mml:math altimg="si191.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math> delete-min operations in total, and each reads the array of size <mml:math altimg="si192.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> coalesced. In addition, there are a total of <mml:math altimg="si193.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mi>n</mml:mi></mml:math> decrease key operations, but these reads cannot be coalesced. Therefore, <mml:math altimg="si194.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. <ce:display><ce:formula id="fd000125"><ce:formula id="fd000130"><ce:label>(19)</ce:label><mml:math altimg="si195.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000135"><ce:label>(20)</ce:label><mml:math altimg="si196.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000140"><ce:label>(21)</ce:label><mml:math altimg="si197.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para><ce:para id="p000310" view="all">Speedup is <ce:display><ce:formula id="fd000145"><ce:label>(22)</ce:label><mml:math altimg="si198.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>n</mml:mi><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mo>lg</mml:mo><mml:mi>Z</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>C</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>L</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000315" view="all">Again, in this algorithm, <mml:math altimg="si199.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>Q</mml:mi><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>, and <mml:math altimg="si200.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math> since each thread needs only constant memory. Therefore, the PRAM performance dominates if <mml:math altimg="si201.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>X</mml:mi><mml:mo>/</mml:mo><mml:mi>m</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para></ce:section></ce:section><ce:section id="s000090" view="all"><ce:label>4.4</ce:label><ce:section-title id="st000105"><mml:math altimg="si202.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math> iterations of Bellman-Ford algorithm</ce:section-title><ce:para id="p000320" view="all">This is another all pairs shortest paths algorithm that uses a single-source Bellman-Ford algorithm as a subroutine. The algorithm is given in Algorithm 2 <ce:cross-refs id="cs000070" refid="br000280 br000285">[56,57]</ce:cross-refs>.</ce:para><ce:para id="p000325" view="all"><ce:display><ce:figure id="f000055"><ce:link locator="fx2"/></ce:figure></ce:display></ce:para><ce:section id="s000095" view="all"><ce:section-title id="st000110">PRAM algorithm and analysis</ce:section-title><ce:para id="p000330" view="all">Again, one can do each single source computation in parallel. Each single source computation takes <mml:math altimg="si203.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> work, making the total work of all pairs shortest paths <mml:math altimg="si204.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow></mml:math> and the total span <mml:math altimg="si205.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. One can improve the span by relaxing all edges in one iteration in parallel making the span <mml:math altimg="si206.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. <ce:display><ce:formula id="fd000150"><ce:formula id="fd000155"><ce:label>(23)</ce:label><mml:math altimg="si207.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula><ce:formula id="fd000160"><ce:label>(24)</ce:label><mml:math altimg="si208.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para></ce:section><ce:section id="s000100" view="all"><ce:section-title id="st000115">TMM algorithm and analysis</ce:section-title><ce:para id="p000335" view="all">The TMM algorithm for this problem is more complicated and requires more data structure support. Each core group is responsible for one single-source shortest path calculation. For each single source calculation, we maintain three arrays, <mml:math altimg="si209.gif" display="inline" overflow="scroll"><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>B</mml:mi></mml:math> and <mml:math altimg="si210.gif" display="inline" overflow="scroll"><mml:mi>W</mml:mi></mml:math>, of size <mml:math altimg="si211.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi></mml:math>, and one array <mml:math altimg="si212.gif" display="inline" overflow="scroll"><mml:mi>D</mml:mi></mml:math> of size <mml:math altimg="si213.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math>. <mml:math altimg="si214.gif" display="inline" overflow="scroll"><mml:mi>D</mml:mi></mml:math> contains the current guess of the shortest path to vertex <mml:math altimg="si215.gif" display="inline" overflow="scroll"><mml:mi>i</mml:mi></mml:math>. <mml:math altimg="si216.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math> contains ending vertices of edges, sorted by vertex ID. Therefore <mml:math altimg="si217.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math> may contain multiple instances of the same vertex if that vertex has multiple incident edges. <mml:math altimg="si218.gif" display="inline" overflow="scroll"><mml:mi>A</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:math> contains the starting vertex of the edge that ends at <mml:math altimg="si219.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:math> and <mml:math altimg="si220.gif" display="inline" overflow="scroll"><mml:mi>W</mml:mi><mml:mrow><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo></mml:mrow></mml:math> contains the weight of that edge. Therefore, both <mml:math altimg="si221.gif" display="inline" overflow="scroll"><mml:mi>D</mml:mi></mml:math> and <mml:math altimg="si222.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math> are sorted.</ce:para><ce:para id="p000340" view="all">Each thread deals with one index in the array and relaxes that edge in each iteration. All threads relax edges in parallel in order of <mml:math altimg="si223.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math>. The total work and span are the same as the PRAM algorithm. We can now calculate the time and speedup assuming threads can read all the arrays coalesced, <mml:math altimg="si224.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> for connected graphs. <ce:display><ce:formula id="fd000165"><ce:formula id="fd000170"><ce:label>(25)</ce:label><mml:math altimg="si225.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>â</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>M</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:formula><ce:formula id="fd000175"><ce:label>(26)</ce:label><mml:math altimg="si226.gif" display="block" overflow="scroll"><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>max</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:formula></ce:display></ce:para><ce:para id="p000345" view="all">Therefore, the speedup on <mml:math altimg="si227.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> processors is <ce:display><ce:formula id="fd000180"><ce:label>(27)</ce:label><mml:math altimg="si228.gif" display="block" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>P</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>Î©</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>C</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:mrow><mml:mrow><mml:mi>L</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000350" view="all">In this case, we get linear speedup if <mml:math altimg="si229.gif" display="inline" overflow="scroll"><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mo>/</mml:mo><mml:mi>L</mml:mi><mml:mo>â¥</mml:mo><mml:mn>1</mml:mn></mml:math>. Subject to the limits on threads of <mml:math altimg="si230.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>Q</mml:mi><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math> and <mml:math altimg="si231.gif" display="inline" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:math> for constant local memory usage per thread, this requires <mml:math altimg="si232.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mi>X</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para></ce:section></ce:section></ce:section><ce:section id="s000105" view="all"><ce:label>5</ce:label><ce:section-title id="st000120">Comparison of the various algorithms</ce:section-title><ce:para id="p000355" view="all">As our analysis of shortest paths algorithms indicates, the TMM model allows us to take the unique properties of highly-threaded, many-core architectures into consideration while analyzing the algorithms. Therefore, the model provides more nuance in the analysis of these algorithms for the highly-threaded, many-core machines than the PRAM model. In this section, we will compare the running times of the various algorithms and see what interesting things this analysis tells us.</ce:para><ce:para id="p000360" view="all"><ce:cross-ref id="cf000265" refid="t000015">Table 3</ce:cross-ref><ce:float-anchor refid="t000015"/> indicates the running times of the various algorithms in both the PRAM model and the TMM model, as well as the conditions under which TMM results are the same as the PRAM results. We have ignored the span term, since the span is small relative to work in all of these algorithms. As we can see, if <mml:math altimg="si233.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math> is small, then highly-threaded, many-core machines provide PRAM performance. However, the cut-off value for <mml:math altimg="si234.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math> is different for different algorithms where the performance in the TMM model differs from the PRAM model is different for different algorithms. Therefore, the TMM model can be informative when comparing between algorithms.</ce:para><ce:para id="p000365" view="all">We will perform two types of comparison between these algorithms in this section. The first one considers the direct influence of machine parameters on asymptotic performance. Since machine parameters do not scale with problem size, in principle, machine parameters cannot change the asymptotic performance of algorithms in terms of problem size. That is, if the PRAM analysis indicates that some algorithm has a running time of <mml:math altimg="si235.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> and another one has the running time of <mml:math altimg="si236.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>, for large enough <mml:math altimg="si237.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi></mml:math>, the first algorithm is always <ce:italic>asymptotically</ce:italic> better since eventually <mml:math altimg="si238.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:math> will dominate whatever machine parameter advantage the second algorithm may have. Therefore, for this first comparison, we only compare algorithms which have the same asymptotic performance under the PRAM model.</ce:para><ce:para id="p000370" view="all">Second, we will also do a non-asymptotic comparison where we compare algorithms when the problem size is relatively small, but not very small. In particular, we look at the case when <mml:math altimg="si239.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>&lt;</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt></mml:math>. In this case, even algorithms that are asymptotically worse in the PRAM model can be better in the TMM model, for large latency <mml:math altimg="si240.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math>. In the next section, we will look at even smaller problem sizes where the effects are even more dramatic.</ce:para><ce:section id="s000110" view="all"><ce:label>5.1</ce:label><ce:section-title id="st000125">Influence of machine parameters</ce:section-title><ce:para id="p000375" view="all">As the table shows, the limits on machine parameters to get linear speedup are different for different algorithms. Therefore, even when two algorithms have the same PRAM performance, their performance on highly-threaded, many-core machines may vary significantly. Let us consider a few examples:</ce:para><ce:section id="s000115" view="all"><ce:label>5.1.1</ce:label><ce:section-title id="st000130">Dynamic programming vs. Johnson's algorithm using binary heaps when <mml:math altimg="si241.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:section-title><ce:para id="p000380" view="all">If <mml:math altimg="si242.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow></mml:math> (i.e., the graph is dense), the PRAM performance for both algorithms is the same. However when<mml:math altimg="si243.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>L</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math>, Johnson's algorithm has a significantly worse running time. Take the example of <mml:math altimg="si244.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>Z</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. The Johnson running time is <mml:math altimg="si245.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> while the running time of the dynamic programming algorithm is simply <mml:math altimg="si246.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para></ce:section><ce:section id="s000120" view="all"><ce:label>5.1.2</ce:label><ce:section-title id="st000135">Johnson's algorithm using binary heaps vs. Johnson's algorithm using arrays when <mml:math altimg="si247.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math></ce:section-title><ce:para id="p000385" view="all">If <mml:math altimg="si248.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> (i.e., a somewhat sparse graph), these two algorithms have the same PRAM performance, but if <mml:math altimg="si249.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>L</mml:mi><mml:mo>â¤</mml:mo><mml:mi>Z</mml:mi><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math>, then the array implementation is better. For <mml:math altimg="si250.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>=</mml:mo><mml:mi>Z</mml:mi><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi></mml:math>, the binary heap implementation has a running time of <mml:math altimg="si251.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mo>/</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>, while the array implementation has a running time of simply <mml:math altimg="si252.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>.</ce:para></ce:section></ce:section><ce:section id="s000125" view="all"><ce:label>5.2</ce:label><ce:section-title id="st000140">Influence of graph size</ce:section-title><ce:para id="p000390" view="all">The previous section shows the asymptotic power of the model; the results there hold for large sizes of graphs asymptotically. However, the TMM model can also help decide on what algorithm to use based on the size of the graph. In particular for certain sizes of graphs, algorithm <mml:math altimg="si253.gif" display="inline" overflow="scroll"><mml:mi>A</mml:mi></mml:math> can be better than algorithm <mml:math altimg="si254.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math> even if it is asymptotically worse in the PRAM model. Therefore, the TMM model can give us information that the PRAM model cannot.</ce:para><ce:para id="p000395" view="all">Consider the example of dynamic programming vs. Johnson's algorithm using arrays. In the PRAM model, the dynamic programming algorithm is unquestionably worse than Johnson's. However, if <mml:math altimg="si255.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>&lt;</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt></mml:math>, we may have a different conclusion. In this case, dynamic programming has runtime: <ce:display><ce:formula id="fd000185"><ce:label>(28)</ce:label><mml:math altimg="si256.gif" display="block" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mfrac><mml:mrow><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi></mml:mrow></mml:mfrac><mml:mo>&lt;</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:mfrac><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000400" view="all">While Johnson's algorithm has runtime: <ce:display><ce:formula id="fd000190"><ce:label>(29)</ce:label><mml:math altimg="si257.gif" display="block" overflow="scroll"><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>â</mml:mo><mml:mo>min</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mfrac><mml:mrow><mml:mi>m</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:mfrac><mml:mo>)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000405" view="all">If <mml:math altimg="si258.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>m</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>C</mml:mi></mml:math>, i.e. dense graphs, <mml:math altimg="si259.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>m</mml:mi><mml:mo>/</mml:mo><mml:mi>n</mml:mi></mml:math>. Combine <ce:cross-refs id="cs000075" refid="fd000185 fd000190">(28) and (29)</ce:cross-refs>, we have <ce:display><ce:formula id="fd000195"><ce:label>(30)</ce:label><mml:math altimg="si260.gif" display="block" overflow="scroll"><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mo>&lt;</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi></mml:mrow></mml:mfrac><mml:mtext>,</mml:mtext><mml:mspace width="1em" class="quad"/><mml:mtext>if </mml:mtext><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:mfrac><mml:mo>&lt;</mml:mo><mml:mi>C</mml:mi><mml:mtext>.</mml:mtext></mml:math></ce:formula></ce:display></ce:para><ce:para id="p000410" view="all">This indicates that when for small enough graphs where <mml:math altimg="si261.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>&lt;</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt></mml:math>, there is a dichotomy. For dense graphs <mml:math altimg="si262.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>m</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>C</mml:mi></mml:math>, the dynamic programming algorithm should be preferred, while for sparse graphs, Johnson's algorithm with arrays is better. We illustrate this performance dependence on sparsity with experiments in Section <ce:cross-ref id="cf000270" refid="s000145">7</ce:cross-ref>.</ce:para><ce:para id="p000415" view="all">We get a similar result when comparing the dynamic programming algorithm with Bellman-Ford when <mml:math altimg="si263.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. In spite of being worse in the PRAM world, the dynamic programming algorithm is better when <mml:math altimg="si264.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>&lt;</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt></mml:math>.</ce:para><ce:para id="p000420" view="all">Our model therefore allows us to do two things. First, for a particular machine, given two algorithms which are asymptotically similar, we can pick the more appropriate algorithm for that particular machine given its machine parameters. Second, if we also consider the problem size,then we can do more. For small problem sizes, the asymptotically worse algorithm may in fact be better because it interacts better with the machine. We will draw more insights of this type in the next section.</ce:para></ce:section></ce:section><ce:section id="s000130" view="all"><ce:label>6</ce:label><ce:section-title id="st000145">Effect of problem size</ce:section-title><ce:para id="p000425" view="all">In Section <ce:cross-ref id="cf000275" refid="s000105">5</ce:cross-ref>, we explored the asymptotic insights that can be drawn from the TMM model. However, the TMM model can also inform insights based on problem size. In particular, some algorithms can take advantage of smaller problems better than others, since they can use fast local memory more effectively. In this section, we explore the insights that the TMM model provides in these cases.</ce:para><ce:section id="s000135" view="all"><ce:label>6.1</ce:label><ce:section-title id="st000150">Vertices fit in local memory</ce:section-title><ce:para id="p000430" view="all">When <mml:math altimg="si265.gif" display="inline" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>Z</mml:mi></mml:math>, all the vertices fit in local memory. Note that this does not mean that the entire problem fits in local memory, since the number of edges can still be much larger than the number of vertices. In this scenario, the number of memory accesses by the first, second, and fourth algorithms is not affected at all. In the dynamic programming algorithm, we consider the array of size <mml:math altimg="si266.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math> and being able to fit a row into local memory does not reduce the number of memory transfers. In Johnson's algorithm using binary heaps, each thread does its own single source shortest path. Since the local memory <mml:math altimg="si267.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math> is shared among <mml:math altimg="si268.gif" display="inline" overflow="scroll"><mml:mi>Q</mml:mi><mml:mi mathvariant="script">T</mml:mi></mml:math> threads, each thread cannot hold its entire vertex array in local memory. In the Bellman-Ford algorithm, the cost is dominated by the cost of reading the edges. Therefore, the bounds do not change.</ce:para><ce:para id="p000435" view="all">For Johnson's algorithm using arrays, the cost is lower. Now each core group can store the vertex array and does not need to access it from slow memory. Therefore the bound on the number of memory operations changes to <mml:math altimg="si269.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> for connected graphs.</ce:para><ce:para id="p000440" view="all">For these small problem sizes, the TMM model can provide even more insight. As an example, compare the two versions of Johnson's algorithm, the one that uses arrays and the one that uses heaps. When <mml:math altimg="si270.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:msup><mml:mrow><mml:mo>lg</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>, the algorithm that uses heaps is better than the algorithm that uses arrays in the PRAM model. But in the TMM model, for large <mml:math altimg="si271.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi></mml:math>, the algorithm that uses heaps has the running time of <mml:math altimg="si272.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>, while the algorithm that uses arrays has the running time of <mml:math altimg="si273.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:msup><mml:mrow><mml:mo>lg</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>. Therefore, the algorithm that uses arrays is better. Note that asymptotic analysis is a little dubious when we are talking about small problem sizes; therefore, this analysis should be considered skeptically. However, the analysis is rigorous when we consider the circumstance that local memory size grows with problem size (i.e., <mml:math altimg="si274.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math> is asymptotic). Moreover, this type of analysis can still provide enough insight that it might guide implementation decisions under the more realistic circumstance of bounded (but potentially large) <mml:math altimg="si275.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math>.</ce:para></ce:section><ce:section id="s000140" view="all"><ce:label>6.2</ce:label><ce:section-title id="st000155">Edges fit in the combined local memories</ce:section-title><ce:para id="p000445" view="all">When <mml:math altimg="si276.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>P</mml:mi><mml:mi>Z</mml:mi><mml:mo>/</mml:mo><mml:mi>Q</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>, the edges fit in all the memories of the core groups combined. Again, the running time of the first,second, and third algorithms do not change, since they cannot take advantage of this property. However, the Bellman-Ford algorithm can take advantage of this property and each thread across all core groups is responsible for relaxing a single edge. Now a portion of the arrays <mml:math altimg="si277.gif" display="inline" overflow="scroll"><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>B</mml:mi></mml:math> and <mml:math altimg="si278.gif" display="inline" overflow="scroll"><mml:mi>W</mml:mi></mml:math> fit in each core group's local memory and they never have to be read again. Therefore, the number of memory operations reduces to <mml:math altimg="si279.gif" display="inline" overflow="scroll"><mml:mi>M</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mi>C</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>. And the run time under the TMM model reduces to <mml:math altimg="si280.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>L</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>. Again, compare Bellman-Ford algorithm with Johnson's algorithm using binary heaps. When <mml:math altimg="si281.gif" display="inline" overflow="scroll"><mml:mi>m</mml:mi><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math>, Johnson's algorithm is better than the Bellman-Ford algorithm in the PRAM model. However, in the TMM model, Johnson's has run time of <mml:math altimg="si282.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math>, while Bellman-Ford with a run time of <mml:math altimg="si283.gif" display="inline" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>L</mml:mi><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>/</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:math> flips to be the better one.</ce:para></ce:section></ce:section><ce:section id="s000145" view="all"><ce:label>7</ce:label><ce:section-title id="st000160">Empirical investigation</ce:section-title><ce:para id="p000450" view="all">In this section, we conduct experiments to understand the extent of the applicability of our model in explaining the performance of algorithms on a real machine. This evaluation is a proof-of-concept that the model successfully predicts performance on one example of a highly-threaded, many-core machine. It is not meant to be an exhaustive empirical study of the model's applicability for all instances of highly-threaded, many-core machines. We implemented two all-pairs shortest paths algorithms: the dynamic programming using matrix multiplication and Johnson's algorithm using arrays, on an NVIDIA GPU.</ce:para><ce:para id="p000455" view="all">In these experiments, we investigate the following aspects of the TMM model: <ce:list id="l000010"><ce:list-item id="li000030"><ce:label>â¢</ce:label><ce:para id="p000460" view="all"><ce:italic>Effect of the number of threads</ce:italic>: the fact that the TMM model incorporates the number of threads per processor in the model is the primary differentiator between the PRAM and TMM models. The TMM model predicts that as the number of threads increases the performance increases, up to a certain point. After this point, the number of threads does not matter, and the TMM model behaves the same as the PRAM model. In this set of experiments, we will use both the dynamic programming and Johnson's algorithms to demonstrate this dependence on the number of threads.</ce:para></ce:list-item><ce:list-item id="li000035"><ce:label>â¢</ce:label><ce:para id="p000465" view="all"><ce:italic>Effect of fast local memory size</ce:italic>: in some algorithms, including the dynamic programming via matrix multiplication, the size of the fast memory affects the performance of the algorithm in the TMM model. We investigate this dependence.</ce:para></ce:list-item><ce:list-item id="li000040"><ce:label>â¢</ce:label><ce:para id="p000470" view="all"><ce:italic>Comparison of the dynamic programming algorithm and Johnson's algorithm with arrays</ce:italic>: for Johnson's algorithm using arrays, the PRAM performance does not depend on the graph's density. However, the TMM model predicts that performance can depend on the graph's density, when the number of threads is insufficient for the performance to be equivalent to the PRAM model. Therefore, even though Johnson's algorithm is always faster than the dynamic programming algorithm according to the PRAM model (since its work is <mml:math altimg="si284.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup></mml:math> while the dynamic programming algorithm has work <mml:math altimg="si285.gif" display="inline" overflow="scroll"><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>lg</mml:mo><mml:mi>n</mml:mi></mml:math>), the TMM model predicts that when the number of threads is small, the dynamic programming algorithm may do better, especially for dense graphs. We demonstrate through experiments that, this is a true indicator of performance.</ce:para></ce:list-item></ce:list></ce:para><ce:section id="s000150" view="all"><ce:label>7.1</ce:label><ce:section-title id="st000165">Experimental Setup</ce:section-title><ce:para id="p000475" view="all">The experiments are carried out on an NVIDIA GTX 480, which has 15 multiprocessors, each with 32 cores. As a typical highly-threaded, many-core machine, it also features a 1.5 GB global memory and 16 kB/48 kB of configurable on-chip shared memory per multiprocessor, which can be accessed with latency significantly lower than the global memory.</ce:para><ce:para id="p000480" view="all">Runtimes are measured across various configurations of each problem, including graph size, thread count, shared memory size, and graph density. When plotted as execution time, the performance units are in seconds. In many cases, however, the trends we wish to see are more readily apparent when performance is shown in terms of speedup rather than execution time. This poses a problem, however, as it is arguably meaningless to attempt to realistically measure the single-core execution time of an application deployed on a modern GPU. We address this issue using the following technique: all speedup plots compare the measured, empirical execution time on <mml:math altimg="si286.gif" display="inline" overflow="scroll"><mml:mi>P</mml:mi></mml:math> cores to the theoretical, asymptotic execution time on 1 core using the PRAM model. As a result, the speedup axis does not represent a quantitatively meaningful scale, and the scale is labeled "arbitrary" on the graphs to reflect this fact; however, the shape of the curves are representative of the speedup achievable relative to a fixed serial execution time.</ce:para></ce:section><ce:section id="s000155" view="all"><ce:label>7.2</ce:label><ce:section-title id="st000170">Effect of the number of threads</ce:section-title><ce:para id="p000485" view="all">The TMM model indicates that when the number of threads is small, the performance of algorithms depends on the number of threads. With sufficient number of threads, the performance converges to the PRAM performance and only depends on the problem size and the number of processors. We verify this result using both the dynamic programming and Johnson's algorithms.</ce:para><ce:para id="p000490" view="all">For the dynamic programming algorithm, we generate random graphs with <mml:math altimg="si287.gif" display="inline" overflow="scroll"><mml:mrow><mml:mo>{</mml:mo><mml:mn>1</mml:mn><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mn>8</mml:mn><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mn>16</mml:mn><mml:mi>k</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math> vertices. To better utilize fast local memory, the problem is decomposed into sub-blocks, and we must also pick a block size. Since we only care about the effect of threads and not the effect of shared memory (to be considered in the next subsection), here we show the results with a block size of 64, as it allows us to generate the maximum number of threads. We increase the number of threads until we reach either the hardware limit or the limit imposed by the algorithm. <ce:cross-ref id="cf000280" refid="f000015">Fig. 3</ce:cross-ref><ce:float-anchor refid="f000015"/> shows the speedup while varying the number of threads per core. We see that the speedup increases approximately linearly with the number of threads per core (as predicted by Eq. <ce:cross-ref id="cf000285" refid="fd000065">(10)</ce:cross-ref>) and then flattens out. This indicates that for this experiment, 16 is an estimated threshold of threads/core where the TMM model switches to the "PRAM range" and the number of threads no longer matters. Note that the expression for this threshold does not depend on the graph size, as it is equal to <mml:math altimg="si288.gif" display="inline" overflow="scroll"><mml:mi>L</mml:mi><mml:mo>/</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi></mml:math>. Also note that the speedup (both in and out of the PRAM range) is not impacted by the size of the graph (again as predicted by Eq. <ce:cross-ref id="cf000290" refid="fd000065">(10)</ce:cross-ref>).</ce:para><ce:para id="p000495" view="all">We see a similar performance dependence on the number of threads in Johnson's algorithm. Here we ran experiments with 8k vertices and varied the number of edges (ranging between 32k and 32 M). The speedup graph is shown in <ce:cross-ref id="cf000295" refid="f000020">Fig. 4</ce:cross-ref><ce:float-anchor refid="f000020"/>. As we increase the number of threads, the speedup increases. We see two other interesting things, however. First, we never see the flattening of performance with increasing thread counts that is seen with the dynamic programming algorithm. Therefore, it appears that Johnson's algorithm requires more threads to reach the PRAM range where the performance no longer depends on the number of threads. This is also predicted by our model as the number of threads/core required by the dynamic programming algorithm to reach PRAM range is <mml:math altimg="si289.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¥</mml:mo><mml:mi>L</mml:mi><mml:mo>/</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt><mml:mi>C</mml:mi></mml:math> while the corresponding number of threads required by Johnson's is <mml:math altimg="si290.gif" display="inline" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â¥</mml:mo><mml:mi>L</mml:mi><mml:mo>/</mml:mo><mml:mi>C</mml:mi></mml:math>, clearly a larger threshold. Johnson's algorithm is not taking advantage of the fast local memory, and this factor influences the number of threads required to hide the latency to global memory. Second, we see that the performance depends on the number of edges. This is consistent with the fact that we are in the TMM range where the runtime is <mml:math altimg="si291.gif" display="inline" overflow="scroll"><mml:mrow><mml:mo>(</mml:mo><mml:mi>m</mml:mi><mml:mi>n</mml:mi><mml:mi>L</mml:mi><mml:mo>/</mml:mo><mml:mi mathvariant="script">T</mml:mi><mml:mi>P</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math> and not in the PRAM range where the runtime only depends on the number of vertices.</ce:para><ce:para id="p000500" view="all">The dependence on graph density is explored further in <ce:cross-ref id="cf000300" refid="f000025">Fig. 5</ce:cross-ref><ce:float-anchor refid="f000025"/>. Here, the runtime is plotted vs. number of graph edges for varying threads/core. The linear relationship predicted by the last term of Eq. <ce:cross-ref id="cf000305" refid="fd000140">(21)</ce:cross-ref> (for dense graphs) is illustrated clearly in the figure.</ce:para></ce:section><ce:section id="s000160" view="all"><ce:label>7.3</ce:label><ce:section-title id="st000175">Effect of fast local memory size</ce:section-title><ce:para id="p000505" view="all">In highly-threaded, many-core machines, access to local memory is faster than access to slow global memory. Among our shortest paths algorithms, only the dynamic programming algorithm makes use of the local memory and the running time depends on this fast memory size. In this experiment we verify the effect of this fast memory size on algorithm performance.</ce:para><ce:para id="p000510" view="all">We set the fast memory size on our machine and measure its effect. <ce:cross-ref id="cf000310" refid="f000030">Fig. 6</ce:cross-ref><ce:float-anchor refid="f000030"/> illustrates how this change has an impact on speedup across a range of threads/core. For a fixed <mml:math altimg="si292.gif" display="inline" overflow="scroll"><mml:mi>Z</mml:mi></mml:math> (fast memory size), the maximum sub-block size <mml:math altimg="si293.gif" display="inline" overflow="scroll"><mml:mi>B</mml:mi></mml:math> can be determined. Then, varying thread counts has the same effect as previously illustrated in <ce:cross-ref id="cf000315" refid="f000015">Fig. 3</ce:cross-ref>, increasing threads/core increases performance until the PRAM range is reached. But as we can see from the figure, different block sizes have different performance for the same number of threads/core. This effect is predicted by Eq. <ce:cross-ref id="cf000320" refid="fd000065">(10)</ce:cross-ref>. As we increase the size of local memory, the performance improves, since we can use bigger blocks.</ce:para><ce:para id="p000515" view="all">In order to isolate the effect of block size from the effects of other parameters, we also plot this data in a pair of different formats in <ce:cross-refs id="cs000080" refid="f000035 f000040">Figs. 7 and 8</ce:cross-refs><ce:float-anchor refid="f000035"/><ce:float-anchor refid="f000040"/>, in both cases limiting the number of threads/core to below the PRAM range (i.e., the range where speedup is linear in threads/core). The first curve shows the difference between the speedups for different block sizes. As the curve indicates, the delta speedup increases linearly with the number of threads/core, consistent with the model prediction of <mml:math altimg="si294.gif" display="inline" overflow="scroll"><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>B</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>B</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow><mml:mi mathvariant="script">T</mml:mi></mml:math>. The second curve shows the ratio of the performance of block size 64 to block size 32, indicating a flat line, since the thread term cancels out.</ce:para></ce:section><ce:section id="s000165" view="all"><ce:label>7.4</ce:label><ce:section-title id="st000180">Comparison between the dynamic programming and Johnson's algorithms</ce:section-title><ce:para id="p000520" view="all">It is interesting to compare the dynamic programming algorithm and Johnson's algorithm with arrays, since the PRAM and the TMM model differ in predicting the relative performance of these algorithms. The PRAM model predicts that Johnson's algorithm should always be better. However, from Section <ce:cross-ref id="cf000325" refid="s000125">5.2</ce:cross-ref>, for a small number of threads/core working on a dense graph, the TMM model predicts that dynamic programming may be better.</ce:para><ce:para id="p000525" view="all">For the graphs with 8k vertices that we explored earlier, <mml:math altimg="si295.gif" display="inline" overflow="scroll"><mml:mo>lg</mml:mo><mml:mi>n</mml:mi><mml:mo>&lt;</mml:mo><mml:msqrt><mml:mrow><mml:mi>Z</mml:mi></mml:mrow></mml:msqrt></mml:math>. Consequently, TMM predicts Johnson's algorithm is generally faster than dynamic programming for sparse graphs, but slower for relatively dense ones. <ce:cross-ref id="cf000330" refid="f000045">Fig. 9</ce:cross-ref><ce:float-anchor refid="f000045"/> demonstrates this effect concretely.</ce:para><ce:para id="p000530" view="all">In addition, for the dense graph, the figure also shows the intersection between the runtime curves of the two algorithms. At that point (32 threads/core), dynamic programming has already been in the PRAM range with stable performance since 16 threads/core, while Johnson's has not. Its runtime is still benefiting by increasing the threads/core. As a result, we predict that Johnson's runtime will flip to be the better one if given sufficient threads. The peak performance of Johnson's being better than that of dynamic programming is consistent with what the PRAM model predicts.</ce:para></ce:section></ce:section><ce:section id="s000170" view="all"><ce:label>8</ce:label><ce:section-title id="st000185">Conclusions</ce:section-title><ce:para id="p000535" view="all">In this paper, we present a memory access model, called the Threaded Many-core Memory (TMM) model, that is well suited for modern highly-threaded, many-core systems that employ many threads and fast context switching to hide memory latency. The model analyzes the significant factors that affect performance on many-core machines. In particular, it requires the work and depth (like PRAM algorithms), but also requires the analysis of the number of memory accesses. Using these three values, we can properly order algorithms from slow to fast for many different settings of machine parameters on highly-threaded, many-core machines. We analyzed 4 shortest paths algorithms in the TMM model and compared the analysis with the PRAM analysis. We find that algorithms with the same PRAM performance can have different TMM performance under certain machine parameter settings. In addition, for certain problem sizes which fit in local memory, algorithms which are faster on PRAM may be slower under the TMM model. Further, we implemented a pair of the algorithms and showed empirical performance is effectively predicted by the TMM model under a variety of circumstances. Therefore, TMM is a model well-suited to compare algorithms and decide which one to implement under particular environments. To our knowledge, this is the first attempt to formalize the analysis of algorithms for highly-threaded, many-core computers using a formal model and asymptotic analysis.</ce:para><ce:para id="p000540" view="all">There are many directions of future work. One obvious direction is to design more algorithms under the TMM model. Ideally, this model can help us come up with new algorithms for highly-threaded, many-core machines. Empirical validation of the TMM model across a wider number of physical machines and manufacturers is also worth doing. In addition, our current model only incorporates 2 levels of memory hierarchy. While in this paper we assume that it is global memory vs. memory local to core groups, in principle, it can be any two levels of fast and slow memory. We would like to extend it to multi-level hierarchies which are becoming increasingly common. One way to do this is to design a "parameter-oblivious" model where algorithms do not know the machine parameters. Other than the dynamic programming algorithm, all of the algorithms presented in this paper are, in fact, parameter-oblivious. And matrix multiplication in the dynamic programming can easily be made parameter-oblivious. In this case, the algorithms should perform well under all settings of parameters, allowing us to apply the model at any two levels and get the same results.</ce:para></ce:section></ce:sections><ce:acknowledgment id="ac000005" view="all"><ce:section-title id="st000190">Acknowledgments</ce:section-title><ce:para id="p000545" view="all">This work was supported by <ce:grant-sponsor id="gs000005" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">NSF</ce:grant-sponsor> grants <ce:grant-number refid="gs000005">CNS-0905368</ce:grant-number> and <ce:grant-number refid="gs000005">CNS-0931693</ce:grant-number> and <ce:grant-sponsor id="gs000010" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">Exegy, Inc</ce:grant-sponsor>.</ce:para></ce:acknowledgment></body><tail view="all"><ce:bibliography id="b000005" view="all"><ce:section-title id="st000195">References</ce:section-title><ce:bibliography-sec id="bs000005" view="all"><ce:bib-reference id="br000005"><ce:label>[1]</ce:label><sb:reference id="sbref1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.A.</ce:given-name><ce:surname>Alcantara</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Sharf</ce:surname></sb:author><sb:author><ce:given-name>F.</ce:given-name><ce:surname>Abbasinejad</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Sengupta</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Mitzenmacher</ce:surname></sb:author><sb:author><ce:given-name>J.D.</ce:given-name><ce:surname>Owens</ce:surname></sb:author><sb:author><ce:given-name>N.</ce:given-name><ce:surname>Amenta</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Real-time parallel hashing on the GPU</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>ACM Trans. Graph.</sb:maintitle></sb:title><sb:volume-nr>28</sb:volume-nr></sb:series><sb:issue-nr>5</sb:issue-nr><sb:date>2009</sb:date></sb:issue><sb:pages><sb:first-page>154:1</sb:first-page><sb:last-page>154:9</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000010"><ce:label>[2]</ce:label><ce:other-ref id="or000005"><ce:textref>N.K. Govindaraju, S. Larsen, J. Gray, D. Manocha, A memory model for scientific algorithms on graphics processors, in: Proc. of ACM/IEEE Conf. on Supercomputing, 2006.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000015"><ce:label>[3]</ce:label><ce:other-ref id="or000010"><ce:textref>L. Ma, R.D. Chamberlain, J.D. Buhler, M.A. Franklin, Bloom filter performance on graphics engines, in: Proc. of Int'l Conf. on Parallel Processing, 2011, pp. 522-531.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000020"><ce:label>[4]</ce:label><ce:other-ref id="or000015"><ce:textref>N. Satish, M. Harris, M. Garland, Designing efficient sorting algorithms for manycore GPUs, in: Proc. of IEEE Int'l Symp. on Parallel and Distributed Processing, 2009.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000025"><ce:label>[5]</ce:label><ce:other-ref id="or000020"><ce:textref>J.W. Choi, A. Singh, R.W. Vuduc, Model-driven autotuning of sparse matrix-vector multiply on GPUs, in: Proc. of 15th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, 2010.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000030"><ce:label>[6]</ce:label><ce:other-ref id="or000025"><ce:textref>V. Volkov, J.W. Demmel, Benchmarking GPUs to tune dense linear algebra, in: Proc. of ACM/IEEE Conf. on Supercomputing, 2008.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000035"><ce:label>[7]</ce:label><ce:other-ref id="or000030"><ce:textref>Y. Zhang, J. Cohen, J.D. Owens, Fast tridiagonal solvers on the GPU, in: Proc. of 15th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, 2010.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000040"><ce:label>[8]</ce:label><sb:reference id="sbref8"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>W.</ce:given-name><ce:surname>Liu</ce:surname></sb:author><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Schmidt</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Voss</ce:surname></sb:author><sb:author><ce:given-name>W.</ce:given-name><ce:surname>Muller-Wittig</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Streaming algorithms for biological sequence alignment on GPUs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Trans. Parallel Distrib. Syst.</sb:maintitle></sb:title></sb:series><sb:date>2007</sb:date></sb:issue><sb:pages><sb:first-page>1270</sb:first-page><sb:last-page>1281</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000045"><ce:label>[9]</ce:label><sb:reference id="sbref9"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>Y.</ce:given-name><ce:surname>Liu</ce:surname></sb:author><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Schmidt</ce:surname></sb:author><sb:author><ce:given-name>D.L.</ce:given-name><ce:surname>Maskell</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>CUDASW++2.0: enhanced Smith-Waterman protein database search on CUDA-enabled GPUs based on SIMT and virtualized SIMD abstractions</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>BMC Research Notes</sb:maintitle></sb:title></sb:series><sb:date>2010</sb:date></sb:issue><sb:pages><sb:first-page>93</sb:first-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000050"><ce:label>[10]</ce:label><ce:other-ref id="or000035"><ce:textref>S. Hong, S.K. Kim, T. Oguntebi, K. Olukotun, Accelerating CUDA graph algorithms at maximum warp, in: Proc. of 16th ACM Symp. on Principles and Practice of Parallel Programming, 2011.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000055"><ce:label>[11]</ce:label><ce:other-ref id="or000040"><ce:textref>G.J. Katz, J.T. Kider Jr., All-pairs shortest-paths for large graphs on the GPU, in: Proc of 23rd ACM SIGGRAPH/EUROGRAPHICS Symp. on Graphics Hardware, 2008.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000060"><ce:label>[12]</ce:label><ce:other-ref id="or000045"><ce:textref>K. Matsumoto, N. Nakasato, S.G. Sedukhin, Blocked all-pairs shortest paths algorithm for hybrid CPU-GPU system, in: Proc. of IEEE Int'l Conf. on High Performance Computing and Communications, 2011, pp. 145-152.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000065"><ce:label>[13]</ce:label><ce:other-ref id="or000050"><ce:textref>D. Merrill, M. Garland, A. Grimshaw, Scalable GPU graph traversal, in: Proc. of 17th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, 2012, pp. 117-128.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000070"><ce:label>[14]</ce:label><sb:reference id="sbref14"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Che</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Boyer</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Meng</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Tarjan</ce:surname></sb:author><sb:author><ce:given-name>J.W.</ce:given-name><ce:surname>Sheaffer</ce:surname></sb:author><sb:author><ce:given-name>K.</ce:given-name><ce:surname>Skadron</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A performance study of general-purpose applications on graphics processors using CUDA</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. Parallel Distrib. Comput.</sb:maintitle></sb:title><sb:volume-nr>68</sb:volume-nr></sb:series><sb:issue-nr>10</sb:issue-nr><sb:date>2008</sb:date></sb:issue><sb:pages><sb:first-page>1370</sb:first-page><sb:last-page>1380</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000075"><ce:label>[15]</ce:label><ce:other-ref id="or000055"><ce:textref>Y. Zhang, J. Owens, A quantitative performance analysis model for GPU architectures, in: Proc. of IEEE Int'l Symp. on High Performance Computer Architecture, 2011, pp. 382-393.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000080"><ce:label>[16]</ce:label><ce:other-ref id="or000060"><ce:textref>S.S. Baghsorkhi, M. Delahaye, S.J. Patel, W.D. Gropp, W.-M. Hwu, An adaptive performance modeling tool for GPU architectures, in: Proc. of 15th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, 2010, pp. 105-114.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000085"><ce:label>[17]</ce:label><ce:other-ref id="or000065"><ce:textref>S. Hong, H. Kim, An analytical model for a GPU architecture with memory-level and thread-level parallelism awareness, in: Proc. of 36th Int'l Symp. on Computer Architecture, 2009, pp. 152-163.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000090"><ce:label>[18]</ce:label><ce:other-ref id="or000070"><ce:textref>V.W. Lee, C. Kim, J. Chhugani, M. Deisher, D. Kim, A.D. Nguyen, N. Satish, M. Smelyanskiy, S. Chennupaty, P. Hammarlund, R. Singhal, P. Dubey, Debunking the 100X GPU vs. CPU myth: an evaluation of throughput computing on CPU and GPU, in: Proc. of 37th Int'l Symp. on Computer Architecture, 2010, pp. 451-460.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000095"><ce:label>[19]</ce:label><ce:other-ref id="or000075"><ce:textref>W. Liu, W. Muller-Wittig, B. Schmidt, Performance predictions for general-purpose computation on GPUs, in: Proc. of Int'l Conf. on Parallel Processing, 2007.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000100"><ce:label>[20]</ce:label><ce:other-ref id="or000080"><ce:textref>L. Ma, R.D. Chamberlain, A performance model for memory bandwidth constrained applications on graphics engines, in: Proc. of Int'l Conf. on Application-Specific Systems, Architectures and Processors, 2012.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000105"><ce:label>[21]</ce:label><sb:reference id="sbref21"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>A.V.</ce:given-name><ce:surname>Aho</ce:surname></sb:author><sb:author><ce:given-name>J.E.</ce:given-name><ce:surname>Hopcroft</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The Design and Analysis of Computer Algorithms</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:date>1974</sb:date><sb:publisher><sb:name>Addison-Wesley Longman Publishing Co., Inc.</sb:name><sb:location>Boston, MA, USA</sb:location></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000110"><ce:label>[22]</ce:label><sb:reference id="sbref22"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Aggarwal</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Vitter</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The input/output complexity of sorting and related problems</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Commun. ACM</sb:maintitle></sb:title><sb:volume-nr>31</sb:volume-nr></sb:series><sb:issue-nr>9</sb:issue-nr><sb:date>1988</sb:date></sb:issue><sb:pages><sb:first-page>1116</sb:first-page><sb:last-page>1127</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000115"><ce:label>[23]</ce:label><ce:other-ref id="or000085"><ce:textref>M. Frigo, C.E. Leiserson, H. Prokop, S. Ramachandran, Cache-oblivious algorithms, in: Proc. of 40th Symposium on Foundations of Computer Science, 1999, pp. 285-297.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000120"><ce:label>[24]</ce:label><ce:other-ref id="or000090"><ce:textref>H. Prokop, Cache-oblivious algorithms, Master's Thesis, MIT, 1999.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000125"><ce:label>[25]</ce:label><ce:other-ref id="or000095"><ce:textref>A. Aggarwal, B. Alpern, A. Chandra, M. Snir, A model for hierarchical memory, in: Proc. of 19th ACM Symposium on Theory of Computing, 1987, pp. 305-314.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000130"><ce:label>[26]</ce:label><ce:other-ref id="or000100"><ce:textref>B. Alpern, L. Carter, T. Selker, Visualizing computer memory architectures, in: Proc. of 1st Conf. on Visualization, 1990, pp. 107-113.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000135"><ce:label>[27]</ce:label><ce:other-ref id="or000105"><ce:textref>A. Aggarwal, A.K. Chandra, M. Snir, Hierarchical memory with block transfer, in: Proc. of 28th Symposium on Foundations of Computer Science, 1987, pp. 204-216.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000140"><ce:label>[28]</ce:label><sb:reference id="sbref28"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Alpern</ce:surname></sb:author><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Carter</ce:surname></sb:author><sb:author><ce:given-name>E.</ce:given-name><ce:surname>Feig</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Selker</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The uniform memory hierarchy model of computation</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Algorithmica</sb:maintitle></sb:title><sb:volume-nr>12</sb:volume-nr></sb:series><sb:issue-nr>2/3</sb:issue-nr><sb:date>1994</sb:date></sb:issue><sb:pages><sb:first-page>72</sb:first-page><sb:last-page>109</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000145"><ce:label>[29]</ce:label><sb:reference id="sbref29"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.S.</ce:given-name><ce:surname>Vitter</ce:surname></sb:author><sb:author><ce:given-name>M.H.</ce:given-name><ce:surname>Nodine</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Large-scale sorting in uniform memory hierarchies</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. Parallel Distrib. Comput.</sb:maintitle></sb:title><sb:volume-nr>17</sb:volume-nr></sb:series><sb:issue-nr>1-2</sb:issue-nr><sb:date>1993</sb:date></sb:issue><sb:pages><sb:first-page>107</sb:first-page><sb:last-page>114</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000150"><ce:label>[30]</ce:label><ce:other-ref id="or000110"><ce:textref>S. Fortune, J. Wyllie, Parallelism in random access machines, in: Proc. of 10th ACM Symp. on Theory of computing, 1978.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000155"><ce:label>[31]</ce:label><ce:other-ref id="or000115"><ce:textref>R.M. Karp, A survey of parallel algorithms for shared-memory machines, Tech. Rep., University of California at Berkeley, Berkeley, CA, USA, 1988.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000160"><ce:label>[32]</ce:label><sb:reference id="sbref32"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>U.</ce:given-name><ce:surname>Vishkin</ce:surname></sb:author><sb:author><ce:given-name>G.C.</ce:given-name><ce:surname>Caragea</ce:surname></sb:author><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Lee</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Models for advancing PRAM and other algorithms into parallel programs for a PRAM-on-chip platform</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Handbook of Parallel Computing: Models, Algorithms and Applications</sb:maintitle></sb:title><sb:date>2007</sb:date><sb:publisher><sb:name>CRC Press</sb:name></sb:publisher></sb:edited-book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000165"><ce:label>[33]</ce:label><ce:other-ref id="or000120"><ce:textref>D. Culler, R. Karp, D. Patterson, A. Sahay, K.E. Schauser, E. Santos, R. Subramonian, T. von Eicken, LogP: towards a realistic model of parallel computation, in: Proc. of 4th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, 1993.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000170"><ce:label>[34]</ce:label><sb:reference id="sbref34"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>L.G.</ce:given-name><ce:surname>Valiant</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A bridging model for parallel computation</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Commun. ACM</sb:maintitle></sb:title><sb:volume-nr>33</sb:volume-nr></sb:series><sb:issue-nr>8</sb:issue-nr><sb:date>1990</sb:date></sb:issue><sb:pages><sb:first-page>103</sb:first-page><sb:last-page>111</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000175"><ce:label>[35]</ce:label><sb:reference id="sbref35"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.S.</ce:given-name><ce:surname>Vitter</ce:surname></sb:author><sb:author><ce:given-name>E.A.M.</ce:given-name><ce:surname>Shriver</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Algorithms for parallel memory I: two-level memories</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Algorithmica</sb:maintitle></sb:title><sb:volume-nr>12</sb:volume-nr></sb:series><sb:date>1994</sb:date></sb:issue><sb:pages><sb:first-page>110</sb:first-page><sb:last-page>147</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000180"><ce:label>[36]</ce:label><ce:other-ref id="or000125"><ce:textref>L. Arge, M.T. Goodrich, M. Nelson, N. Sitchinava, Fundamental parallel algorithms for private-cache chip multiprocessors, in: Proc. of 20th Symp. on Parallelism in Algorithms and Architectures, 2008, pp. 197-206.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000185"><ce:label>[37]</ce:label><ce:other-ref id="or000130"><ce:textref>G.E. Blelloch, R.A. Chowdhury, P.B. Gibbons, V. Ramachandran, S. Chen, M. Kozuch, Provably good multicore cache performance for divide-and-conquer algorithms, in: Proc. of 19th ACM-SIAM Symp. Discrete Algorithms, 2008, pp. 501-510.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000190"><ce:label>[38]</ce:label><ce:other-ref id="or000135"><ce:textref>G.E. Blelloch, J.T. Fineman, P.B. Gibbons, H.V. Simhadri, Scheduling irregular parallel computations on hierarchical caches, in: Proc. of 23rd ACM Symp. on Parallelism in Algorithms and Architectures, 2011, pp. 355-366.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000195"><ce:label>[39]</ce:label><ce:other-ref id="or000140"><ce:textref>R.A. Chowdhury, F. Silvestri, B. Blakeley, V. Ramachandran, Oblivious algorithms for multicores and network of processors, in: Proc. of 24th IEEE Int'l Parallel and Distributed Processing Symp., 2010, pp. 1-12.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000200"><ce:label>[40]</ce:label><ce:other-ref id="or000145"><ce:textref>R. Cole, V. Ramachandran, Efficient resource oblivious algorithms for multicores, CoRR abs/1103.4071, 2011, v1.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000205"><ce:label>[41]</ce:label><ce:other-ref id="or000150"><ce:textref>R.A. Chowdhury, V. Ramachandran, The cache-oblivious Gaussian elimination paradigm: Theoretical framework, parallelization and experimental evaluation, in: Proc. of 19th ACM Symp. on Parallel Algorithms and Architectures, 2007, pp. 71-80.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000210"><ce:label>[42]</ce:label><ce:other-ref id="or000155"><ce:textref>R.A. Chowdhury, V. Ramachandran, Cache-efficient dynamic programming algorithms for multicores, in: Proc. of 20th Symp. on Parallelism in Algorithms and Architectures, 2008, pp. 207-216.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000215"><ce:label>[43]</ce:label><ce:other-ref id="or000160"><ce:textref>L. Ma, K. Agrawal, R. Chamberlain, A memory access model for highly-threaded many-core architectures, in: Proc. of IEEE 18th Int'l Conf. on Parallel and Distributed Systems, ICPADS, 2012, pp. 339-347.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000220"><ce:label>[44]</ce:label><ce:other-ref id="or000165"><ce:textref>M.A. Bender, J.T. Fineman, S. Gilbert, B.C. Kuszmaul, Concurrent cache-oblivious <mml:math altimg="si296.gif" display="inline" overflow="scroll"><mml:mi>b</mml:mi></mml:math>-trees, in: Proc. of 17th ACM Symposium on Parallelism in Algorithms and Architectures, 2005, pp. 228-237.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000225"><ce:label>[45]</ce:label><ce:other-ref id="or000170"><ce:textref>N.K. Govindaraju, S. Larsen, J. Gray, D. Manocha, A memory model for scientific algorithms on graphics processors, in: Proc. of ACM/IEEE Supercomputing Conf., 2006.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000230"><ce:label>[46]</ce:label><ce:other-ref id="or000175"><ce:textref>S. Ryoo, C.I. Rodrigues, S.S. Stone, S.S. Baghsorkhi, S.-Z. Ueng, J.A. Stratton, W.-M. Hwu, Program optimization space pruning for a multithreaded GPU, in: Proc. of 6th IEEE/ACM Int'l Symp. on Code Generation and Optimization, 2008, pp. 195-204.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000235"><ce:label>[47]</ce:label><ce:other-ref id="or000180"><ce:textref>K. Kothapalli, R. Mukherjee, M.S. Rehman, S. Patidar, P.J. Narayanan, K. Srinathan, A performance prediction model for the CUDA GPGPU platform, 2009, pp. 463-472.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000240"><ce:label>[48]</ce:label><ce:other-ref id="or000185"><ce:textref>J. Sim, A. Dasgupta, H. Kim, R. Vuduc, A performance analysis framework for identifying potential benefits in GPGPU applications, in: Proc. of 17th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, 2012, pp. 11-22.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000245"><ce:label>[49]</ce:label><ce:other-ref id="or000190"><ce:textref>Y. Kim, A. Shrivastava, CuMAPz: a tool to analyze memory access patterns in CUDA, in: Proc. of 48th Design Automation Conference, 2011, pp. 128-133.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000250"><ce:label>[50]</ce:label><ce:other-ref id="or000195"><ce:textref>A. Parakh, M. Balakrishnan, K. Paul, Performance estimation of GPUs with cache, in: Parallel and Distributed Processing Symposium Workshops Ph.D. Forum, IPDPSW, 2012, pp. 2384-2393.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000255"><ce:label>[51]</ce:label><ce:other-ref id="or000200"><ce:textref>NVIDIA, Cuda Programming Guide 5.0.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br000260"><ce:label>[52]</ce:label><sb:reference id="sbref52"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Alverson</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Callahan</ce:surname></sb:author><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Cummings</ce:surname></sb:author><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Koblenz</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Porterfield</ce:surname></sb:author><sb:author><ce:given-name>B.</ce:given-name><ce:surname>Smith</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The Tera computer system</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>Proc. of 4th International Conference on Supercomputing</sb:maintitle></sb:title><sb:conference>ICS'90</sb:conference><sb:date>1990</sb:date><sb:publisher><sb:name>ACM</sb:name><sb:location>New York, NY, USA</sb:location></sb:publisher></sb:edited-book><sb:pages><sb:first-page>1</sb:first-page><sb:last-page>6</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000265"><ce:label>[53]</ce:label><sb:reference id="sbref53"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>T.H.</ce:given-name><ce:surname>Cormen</ce:surname></sb:author><sb:author><ce:given-name>C.</ce:given-name><ce:surname>Stein</ce:surname></sb:author><sb:author><ce:given-name>R.L.</ce:given-name><ce:surname>Rivest</ce:surname></sb:author><sb:author><ce:given-name>C.E.</ce:given-name><ce:surname>Leiserson</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Introduction to Algorithms</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:edition>second ed.</sb:edition><sb:date>2001</sb:date><sb:publisher><sb:name>McGraw-Hill Higher Education</sb:name></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000270"><ce:label>[54]</ce:label><sb:reference id="sbref54"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.B.</ce:given-name><ce:surname>Johnson</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Efficient algorithms for shortest paths in sparse networks</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. ACM</sb:maintitle></sb:title><sb:volume-nr>24</sb:volume-nr></sb:series><sb:issue-nr>1</sb:issue-nr><sb:date>1977</sb:date></sb:issue><sb:pages><sb:first-page>1</sb:first-page><sb:last-page>13</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000275"><ce:label>[55]</ce:label><sb:reference id="sbref55"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>E.W.</ce:given-name><ce:surname>Dijkstra</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A note on two problems in connexion with graphs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Numer. Math.</sb:maintitle></sb:title><sb:volume-nr>1</sb:volume-nr></sb:series><sb:issue-nr>1</sb:issue-nr><sb:date>1959</sb:date></sb:issue><sb:pages><sb:first-page>269</sb:first-page><sb:last-page>271</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000280"><ce:label>[56]</ce:label><sb:reference id="sbref56"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Bellman</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>On a routing problem</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Quart. Appl. Math.</sb:maintitle></sb:title><sb:volume-nr>16</sb:volume-nr></sb:series><sb:date>1958</sb:date></sb:issue><sb:pages><sb:first-page>87</sb:first-page><sb:last-page>90</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br000285"><ce:label>[57]</ce:label><sb:reference id="sbref57"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Lestor</ce:surname></sb:author><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Ford</ce:surname></sb:author><sb:author><ce:given-name>D.R.</ce:given-name><ce:surname>Fulkerson</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Flows in Networks</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:date>1962</sb:date><sb:publisher><sb:name>Princeton University Press</sb:name><sb:location>Princeton, NJ, USA</sb:location></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference></ce:bibliography-sec></ce:bibliography><ce:biography id="bio1" view="all"><ce:link locator="pic1"/><ce:simple-para id="sp000075" view="all"><ce:bold>Lin Ma</ce:bold> is a Ph.D. Candidate of Computer Science and Engineering at Washington Univ. in St. Louis. His research interest includes parallel architecture and algorithms, performance evaluation and tuning model for multi-threading system, accelerating application-specific architectures, and high-performance streaming computing over architecturally diverse system of CPUs and GPUs.</ce:simple-para></ce:biography><ce:biography id="bio2" view="all"><ce:link locator="pic2"/><ce:simple-para id="sp000080" view="all"><ce:bold>Kunal Agrawal</ce:bold> is an Assistant Professor of Computer Science and Engineering at Washington Univ. in St. Louis, where she came after completing her Ph.D. under Charles Leiserson at MIT. Dr. Agrawal is interested in many aspects of parallel computing and works primarily on the design of provably good runtime systems for parallel programming environments. She has worked on various topics such as scheduling, resource allocation, transactional memory, cache-aware, and cache-oblivious streaming.</ce:simple-para></ce:biography><ce:biography id="bio3" view="all"><ce:link locator="pic3"/><ce:simple-para id="sp000085" view="all"><ce:bold>Roger D. Chamberlain</ce:bold> is a Professor of Computer Science and Engineering at Washington Univ. in St. Louis, where he serves as Associate Department Chair. Dr. Chamberlain's research interests include specialized computer architectures for a variety of applications (e.g., astrophysics and biology), high-performance parallel and distributed application development, energy-efficient computation, and high-capacity I/O systems. He teaches in the areas of digital systems, parallel processing, computer architecture, embedded systems, and reconfigurable logic.</ce:simple-para></ce:biography></tail></article></xocs:serial-item></xocs:doc>
