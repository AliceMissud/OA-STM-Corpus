<?xml version="1.0" encoding="UTF-8"?><!-- Normalized for easier text mining. --><xocs:doc xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.elsevier.com/xml/ja/dtd" xmlns:ja="http://www.elsevier.com/xml/ja/dtd" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:tb="http://www.elsevier.com/xml/common/table/dtd" xmlns:sb="http://www.elsevier.com/xml/common/struct-bib/dtd" xmlns:ce="http://www.elsevier.com/xml/common/dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:cals="http://www.elsevier.com/xml/common/cals/dtd" xsi:schemaLocation="http://www.elsevier.com/xml/xocs/dtd http://schema.elsevier.com/dtds/document/fulltext/xcr/xocs-article.xsd"><xocs:meta><xocs:content-family>serial</xocs:content-family><xocs:content-type>JL</xocs:content-type><xocs:cid>272574</xocs:cid><xocs:srctitle>Journal of Computer and System Sciences</xocs:srctitle><xocs:normalized-srctitle>JOURNALCOMPUTERSYSTEMSCIENCES</xocs:normalized-srctitle><xocs:orig-load-date>2014-01-15</xocs:orig-load-date><xocs:ew-transaction-id>2014-02-12T16:49:34</xocs:ew-transaction-id><xocs:eid>1-s2.0-S0022000014000026</xocs:eid><xocs:pii-formatted>S0022-0000(14)00002-6</xocs:pii-formatted><xocs:pii-unformatted>S0022000014000026</xocs:pii-unformatted><xocs:doi>10.1016/j.jcss.2014.01.001</xocs:doi><xocs:item-stage>S300</xocs:item-stage><xocs:item-version-number>S300.1</xocs:item-version-number><xocs:item-weight>FULL-TEXT</xocs:item-weight><xocs:hub-eid>1-s2.0-S0022000014X00024</xocs:hub-eid><xocs:timestamp>2014-02-12T15:47:38.435396-05:00</xocs:timestamp><xocs:issns><xocs:issn-primary-formatted>0022-0000</xocs:issn-primary-formatted><xocs:issn-primary-unformatted>00220000</xocs:issn-primary-unformatted></xocs:issns><xocs:sponsored-access-type>UNLIMITED</xocs:sponsored-access-type><xocs:funding-body-id>FWF</xocs:funding-body-id><xocs:crossmark>true</xocs:crossmark><xocs:vol-first>80</xocs:vol-first><xocs:iss-first>4</xocs:iss-first><xocs:vol-iss-suppl-text>Volume 80, Issue 4</xocs:vol-iss-suppl-text><xocs:sort-order>14</xocs:sort-order><xocs:first-fp>860</xocs:first-fp><xocs:last-lp>900</xocs:last-lp><xocs:pages><xocs:first-page>860</xocs:first-page><xocs:last-page>900</xocs:last-page></xocs:pages><xocs:cover-date-orig><xocs:start-date>201406</xocs:start-date></xocs:cover-date-orig><xocs:cover-date-text>June 2014</xocs:cover-date-text><xocs:cover-date-start>2014-06-01</xocs:cover-date-start><xocs:cover-date-end>2014-06-30</xocs:cover-date-end><xocs:cover-date-year>2014</xocs:cover-date-year><xocs:document-type>article</xocs:document-type><xocs:document-subtype>fla</xocs:document-subtype><xocs:copyright-line>Copyright Â© 2014 The Authors. Published by Elsevier Inc. All rights reserved.</xocs:copyright-line><xocs:normalized-article-title>RIGOROUSLYMODELINGSELFSTABILIZINGFAULTTOLERANTCIRCUITSULTRAROBUSTCLOCKINGSCHEMEFORSYSTEMSONCHIP</xocs:normalized-article-title><xocs:normalized-first-auth-surname>DOLEV</xocs:normalized-first-auth-surname><xocs:normalized-first-auth-initial>D</xocs:normalized-first-auth-initial><xocs:item-toc><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>1</xocs:item-toc-label><xocs:item-toc-section-title>Introduction &amp; related work</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>1.1</xocs:item-toc-label><xocs:item-toc-section-title>Contribution</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>1.2</xocs:item-toc-label><xocs:item-toc-section-title>Organization of the article</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2</xocs:item-toc-label><xocs:item-toc-section-title>On-chip clock synchronization</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1</xocs:item-toc-label><xocs:item-toc-section-title>Challenges</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.1</xocs:item-toc-label><xocs:item-toc-section-title>Inexact local clocks and unknown message delays</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.2</xocs:item-toc-label><xocs:item-toc-section-title>Transient faults</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.3</xocs:item-toc-label><xocs:item-toc-section-title>Permanent faults</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.4</xocs:item-toc-label><xocs:item-toc-section-title>Combining transient and permanent faults</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.5</xocs:item-toc-label><xocs:item-toc-section-title>Metastability</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.6</xocs:item-toc-label><xocs:item-toc-section-title>Operating frequency vs. clock precision</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.1.7</xocs:item-toc-label><xocs:item-toc-section-title>Scalability</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>2.2</xocs:item-toc-label><xocs:item-toc-section-title>Typical modules for clock synchronization protocols</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3</xocs:item-toc-label><xocs:item-toc-section-title>A formal modeling framework for self-stabilizing fault-tolerant circuits</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.1</xocs:item-toc-label><xocs:item-toc-section-title>Signals</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.2</xocs:item-toc-label><xocs:item-toc-section-title>Modules and executions</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title/><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Basic modules.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title/><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Compound modules.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.3</xocs:item-toc-label><xocs:item-toc-section-title>Forgetfulness</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.4</xocs:item-toc-label><xocs:item-toc-section-title>Self-stabilization</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>3.5</xocs:item-toc-label><xocs:item-toc-section-title>Persistent faults</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4</xocs:item-toc-label><xocs:item-toc-section-title>Formal specification of clock synchronization protocols</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4.1</xocs:item-toc-label><xocs:item-toc-section-title>Protocols and problem formulation</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>4.2</xocs:item-toc-label><xocs:item-toc-section-title>Practical implementability issues</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5</xocs:item-toc-label><xocs:item-toc-section-title>The FATAL<ce:sup loc="post">+</ce:sup> clock synchronization protocol</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.1</xocs:item-toc-label><xocs:item-toc-section-title>State machine representation</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.2</xocs:item-toc-label><xocs:item-toc-section-title>Overview of the algorithm</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.3</xocs:item-toc-label><xocs:item-toc-section-title>The quick cycle</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.4</xocs:item-toc-label><xocs:item-toc-section-title>Main state machine</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.5</xocs:item-toc-label><xocs:item-toc-section-title>Extension of the main state machine</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.6</xocs:item-toc-label><xocs:item-toc-section-title>Resynchronization state machine</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.7</xocs:item-toc-label><xocs:item-toc-section-title>Timer durations</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>5.8</xocs:item-toc-label><xocs:item-toc-section-title>Summary of results from theory</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6</xocs:item-toc-label><xocs:item-toc-section-title>Implementation</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.1</xocs:item-toc-label><xocs:item-toc-section-title>Metastability issues</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.2</xocs:item-toc-label><xocs:item-toc-section-title>State machine communication</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.2.1</xocs:item-toc-label><xocs:item-toc-section-title>Channels</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Correctness.</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Metastability.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.2.2</xocs:item-toc-label><xocs:item-toc-section-title>Memory flags</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Metastability.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.2.3</xocs:item-toc-label><xocs:item-toc-section-title>Threshold modules</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Correctness.</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Metastability.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.3</xocs:item-toc-label><xocs:item-toc-section-title>Hybrid state machines</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title/><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Metastability.</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Correctness.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.4</xocs:item-toc-label><xocs:item-toc-section-title>Clocks and watchdog timers</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.4.1</xocs:item-toc-label><xocs:item-toc-section-title>Pausable oscillator</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Correctness.</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Metastability.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.4.2</xocs:item-toc-label><xocs:item-toc-section-title>Watchdog timer design</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Metastability.</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-section-title>Correctness.</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>6.5</xocs:item-toc-label><xocs:item-toc-section-title>Computing the end-to-end delay bounds</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7</xocs:item-toc-label><xocs:item-toc-section-title>Experimental evaluation</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.1</xocs:item-toc-label><xocs:item-toc-section-title>Worst-case skew experiment</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.2</xocs:item-toc-label><xocs:item-toc-section-title>Metastability experiments</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.3</xocs:item-toc-label><xocs:item-toc-section-title>Stabilization time experiments</xocs:item-toc-section-title><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.3.1</xocs:item-toc-label><xocs:item-toc-section-title>Stabilization in the absence of faulty nodes</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.3.2</xocs:item-toc-label><xocs:item-toc-section-title>Stabilization with Byzantine nodes and deterministic timeouts</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>7.3.3</xocs:item-toc-label><xocs:item-toc-section-title>Stabilization with Byzantine nodes and probabilistic timeouts</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc-entry></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:sections"><xocs:item-toc-label>8</xocs:item-toc-label><xocs:item-toc-section-title>Conclusions</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:acknowledgment"><xocs:item-toc-section-title>Acknowledgments</xocs:item-toc-section-title></xocs:item-toc-entry><xocs:item-toc-entry ref-elem="ce:bibliography"><xocs:item-toc-section-title>References</xocs:item-toc-section-title></xocs:item-toc-entry></xocs:item-toc><xocs:references><xocs:ref-info refid="bib574C47474C4D533738s1"><xocs:ref-normalized-surname>WENSLEY</xocs:ref-normalized-surname><xocs:ref-pub-year>1978</xocs:ref-pub-year><xocs:ref-first-fp>1240</xocs:ref-first-fp><xocs:ref-last-lp>1255</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib495452533037s1"/><xocs:ref-info refid="bib4672693031s1"><xocs:ref-normalized-surname>FRIEDMAN</xocs:ref-normalized-surname><xocs:ref-pub-year>2001</xocs:ref-pub-year><xocs:ref-first-fp>665</xocs:ref-first-fp><xocs:ref-last-lp>692</xocs:ref-last-lp><xocs:ref-normalized-initial>E</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib50423933s1"><xocs:ref-normalized-surname>PEERCY</xocs:ref-normalized-surname><xocs:ref-pub-year>1993</xocs:ref-pub-year><xocs:ref-first-fp>745</xocs:ref-first-fp><xocs:ref-last-lp>758</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib4D796572733031s1"><xocs:ref-normalized-surname>MYERS</xocs:ref-normalized-surname><xocs:ref-pub-year>2001</xocs:ref-pub-year><xocs:ref-normalized-initial>C</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>ASYNCHRONOUSCIRCUITDESIGN</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="bib4368613834s1"><xocs:ref-normalized-surname>CHAPIRO</xocs:ref-normalized-surname><xocs:ref-pub-year>1984</xocs:ref-pub-year><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>GLOBALLYASYNCHRONOUSLOCALLYSYNCHRONOUSSYSTEMS</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="boref0070"/><xocs:ref-info refid="bib54474C3037s1"><xocs:ref-normalized-surname>TEEHAN</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>418</xocs:ref-first-fp><xocs:ref-last-lp>428</xocs:ref-last-lp><xocs:ref-normalized-initial>P</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib504D3036s1"><xocs:ref-normalized-surname>MARTIN</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>1089</xocs:ref-first-fp><xocs:ref-last-lp>1120</xocs:ref-last-lp><xocs:ref-normalized-initial>A</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="boref0100"/><xocs:ref-info refid="boref0110"/><xocs:ref-info refid="bib47433030s1"><xocs:ref-normalized-surname>GUTNIK</xocs:ref-normalized-surname><xocs:ref-pub-year>2000</xocs:ref-pub-year><xocs:ref-first-fp>1553</xocs:ref-first-fp><xocs:ref-last-lp>1560</xocs:ref-last-lp><xocs:ref-normalized-initial>V</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib646F6C65763134666174616Cs1"><xocs:ref-normalized-surname>DOLEV</xocs:ref-normalized-surname><xocs:ref-pub-year>2014</xocs:ref-pub-year><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib4448533836s1"><xocs:ref-normalized-surname>DOLEV</xocs:ref-normalized-surname><xocs:ref-pub-year>1986</xocs:ref-pub-year><xocs:ref-first-fp>230</xocs:ref-first-fp><xocs:ref-last-lp>250</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib5341413036s1"><xocs:ref-normalized-surname>SUNDARESAN</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>433</xocs:ref-first-fp><xocs:ref-last-lp>442</xocs:ref-last-lp><xocs:ref-normalized-initial>K</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib575330373A4443s1"><xocs:ref-normalized-surname>WIDDER</xocs:ref-normalized-surname><xocs:ref-pub-year>2007</xocs:ref-pub-year><xocs:ref-first-fp>115</xocs:ref-first-fp><xocs:ref-last-lp>140</xocs:ref-last-lp><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib436F6E3033s1"><xocs:ref-normalized-surname>CONSTANTINESCU</xocs:ref-normalized-surname><xocs:ref-pub-year>2003</xocs:ref-pub-year><xocs:ref-first-fp>14</xocs:ref-first-fp><xocs:ref-last-lp>19</xocs:ref-last-lp><xocs:ref-normalized-initial>C</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib4B48503034s1"><xocs:ref-normalized-surname>KARNIK</xocs:ref-normalized-surname><xocs:ref-pub-year>2004</xocs:ref-pub-year><xocs:ref-first-fp>128</xocs:ref-first-fp><xocs:ref-last-lp>143</xocs:ref-last-lp><xocs:ref-normalized-initial>T</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib4261753035s1"><xocs:ref-normalized-surname>BAUMANN</xocs:ref-normalized-surname><xocs:ref-pub-year>2005</xocs:ref-pub-year><xocs:ref-first-fp>305</xocs:ref-first-fp><xocs:ref-last-lp>316</xocs:ref-last-lp><xocs:ref-normalized-initial>R</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib474542433036s1"><xocs:ref-normalized-surname>GADLAGE</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>3466</xocs:ref-first-fp><xocs:ref-last-lp>3471</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="boref0210"/><xocs:ref-info refid="boref0220"/><xocs:ref-info refid="boref0230"/><xocs:ref-info refid="bib64696A6B737472613734s1"><xocs:ref-normalized-surname>DIJKSTRA</xocs:ref-normalized-surname><xocs:ref-pub-year>1974</xocs:ref-pub-year><xocs:ref-first-fp>643</xocs:ref-first-fp><xocs:ref-last-lp>644</xocs:ref-last-lp><xocs:ref-normalized-initial>E</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib50534C3830s1"><xocs:ref-normalized-surname>PEASE</xocs:ref-normalized-surname><xocs:ref-pub-year>1980</xocs:ref-pub-year><xocs:ref-first-fp>228</xocs:ref-first-fp><xocs:ref-last-lp>234</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib44443832s1"><xocs:ref-normalized-surname>DOLEV</xocs:ref-normalized-surname><xocs:ref-pub-year>1982</xocs:ref-pub-year><xocs:ref-first-fp>14</xocs:ref-first-fp><xocs:ref-last-lp>30</xocs:ref-last-lp><xocs:ref-normalized-initial>D</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="boref0270"/><xocs:ref-info refid="boref0280"/><xocs:ref-info refid="boref0290"/><xocs:ref-info refid="bib53543837s1"><xocs:ref-normalized-surname>SRIKANTH</xocs:ref-normalized-surname><xocs:ref-pub-year>1987</xocs:ref-pub-year><xocs:ref-first-fp>626</xocs:ref-first-fp><xocs:ref-last-lp>645</xocs:ref-last-lp><xocs:ref-normalized-initial>T</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib4646534B30363A444654s1"><xocs:ref-normalized-surname>FERRINGER</xocs:ref-normalized-surname><xocs:ref-pub-year>2006</xocs:ref-pub-year><xocs:ref-first-fp>563</xocs:ref-first-fp><xocs:ref-last-lp>571</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>IEEESYMPOSIUMDEFECTFAULTTOLERANCEINVLSISYSTEMSDFT</xocs:ref-normalized-srctitle><xocs:ref-normalized-article-title>VLSIIMPLEMENTATIONAFAULTTOLERANTDISTRIBUTEDCLOCKGENERATION</xocs:ref-normalized-article-title></xocs:ref-info><xocs:ref-info refid="bib6675656767657231327265636F6E63696C696E67s1"><xocs:ref-normalized-surname>FUGGER</xocs:ref-normalized-surname><xocs:ref-pub-year>2012</xocs:ref-pub-year><xocs:ref-first-fp>323</xocs:ref-first-fp><xocs:ref-last-lp>355</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="boref0330"/><xocs:ref-info refid="boref0340"/><xocs:ref-info refid="bib446F6C57656C535342595A43533034s1"><xocs:ref-normalized-surname>DOLEV</xocs:ref-normalized-surname><xocs:ref-pub-year>2004</xocs:ref-pub-year><xocs:ref-first-fp>780</xocs:ref-first-fp><xocs:ref-last-lp>799</xocs:ref-last-lp><xocs:ref-normalized-initial>S</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="boref0360"/><xocs:ref-info refid="boref0370"/><xocs:ref-info refid="boref0380"/><xocs:ref-info refid="boref0390"/><xocs:ref-info refid="boref0400"/><xocs:ref-info refid="boref0410"/><xocs:ref-info refid="bib46756531303A64697373s1"><xocs:ref-normalized-surname>FUGGER</xocs:ref-normalized-surname><xocs:ref-pub-year>2010</xocs:ref-pub-year><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>ANALYSISONCHIPFAULTTOLERANTDISTRIBUTEDALGORITHMS</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="bib4D533933s1"><xocs:ref-normalized-surname>MENDLER</xocs:ref-normalized-surname><xocs:ref-pub-year>1993</xocs:ref-pub-year><xocs:ref-first-fp>233</xocs:ref-first-fp><xocs:ref-last-lp>257</xocs:ref-last-lp><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib4D61723831s1"><xocs:ref-normalized-surname>MARINO</xocs:ref-normalized-surname><xocs:ref-pub-year>1981</xocs:ref-pub-year><xocs:ref-first-fp>107</xocs:ref-first-fp><xocs:ref-last-lp>115</xocs:ref-last-lp><xocs:ref-normalized-initial>L</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib5665723838s1"><xocs:ref-normalized-surname>VERHOEFF</xocs:ref-normalized-surname><xocs:ref-pub-year>1988</xocs:ref-pub-year><xocs:ref-first-fp>1</xocs:ref-first-fp><xocs:ref-last-lp>8</xocs:ref-last-lp><xocs:ref-normalized-initial>T</xocs:ref-normalized-initial></xocs:ref-info><xocs:ref-info refid="bib434B4B4C593032s1"><xocs:ref-normalized-surname>CORTADELLA</xocs:ref-normalized-surname><xocs:ref-pub-year>2002</xocs:ref-pub-year><xocs:ref-normalized-initial>J</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>LOGICSYNTHESISFORASYNCHRONOUSCONTROLLERSINTERFACES</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="bib506F7331323A6D6173746572s1"><xocs:ref-normalized-surname>POSCH</xocs:ref-normalized-surname><xocs:ref-pub-year>2012</xocs:ref-pub-year><xocs:ref-normalized-initial>M</xocs:ref-normalized-initial><xocs:ref-normalized-srctitle>SELBSTSTABILISIERENDEBYZANTINISCHFEHLERTOLERANTETAKTERZEUGUNGINFPGAS</xocs:ref-normalized-srctitle></xocs:ref-info><xocs:ref-info refid="boref0480"/><xocs:ref-info refid="boref0490"/></xocs:references><xocs:attachment-metadata-doc><xocs:attachment-set-type>item</xocs:attachment-set-type><xocs:pii-formatted>S0022-0000(14)00002-6</xocs:pii-formatted><xocs:pii-unformatted>S0022000014000026</xocs:pii-unformatted><xocs:eid>1-s2.0-S0022000014000026</xocs:eid><xocs:doi>10.1016/j.jcss.2014.01.001</xocs:doi><xocs:cid>272574</xocs:cid><xocs:timestamp>2014-02-12T15:47:38.435396-05:00</xocs:timestamp><xocs:path>/272574/1-s2.0-S0022000014X00024/1-s2.0-S0022000014000026/</xocs:path><xocs:cover-date-start>2014-06-01</xocs:cover-date-start><xocs:cover-date-end>2014-06-30</xocs:cover-date-end><xocs:sponsored-access-type>UNLIMITED</xocs:sponsored-access-type><xocs:funding-body-id>FWF</xocs:funding-body-id><xocs:attachments><xocs:web-pdf><xocs:attachment-eid>1-s2.0-S0022000014000026-main.pdf</xocs:attachment-eid><xocs:filename>main.pdf</xocs:filename><xocs:extension>pdf</xocs:extension><xocs:pdf-optimized>true</xocs:pdf-optimized><xocs:filesize>1943498</xocs:filesize><xocs:web-pdf-purpose>MAIN</xocs:web-pdf-purpose><xocs:web-pdf-page-count>41</xocs:web-pdf-page-count><xocs:web-pdf-images><xocs:web-pdf-image><xocs:attachment-eid>1-s2.0-S0022000014000026-main_1.png</xocs:attachment-eid><xocs:filename>main_1.png</xocs:filename><xocs:extension>png</xocs:extension><xocs:filesize>111617</xocs:filesize><xocs:pixel-height>849</xocs:pixel-height><xocs:pixel-width>656</xocs:pixel-width><xocs:attachment-type>IMAGE-WEB-PDF</xocs:attachment-type><xocs:pdf-page-num>1</xocs:pdf-page-num></xocs:web-pdf-image></xocs:web-pdf-images></xocs:web-pdf><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si99.gif</xocs:attachment-eid><xocs:file-basename>si99</xocs:file-basename><xocs:filename>si99.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>289</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si98.gif</xocs:attachment-eid><xocs:file-basename>si98</xocs:file-basename><xocs:filename>si98.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>168</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>28</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si97.gif</xocs:attachment-eid><xocs:file-basename>si97</xocs:file-basename><xocs:filename>si97.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>276</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>54</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si96.gif</xocs:attachment-eid><xocs:file-basename>si96</xocs:file-basename><xocs:filename>si96.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>163</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si95.gif</xocs:attachment-eid><xocs:file-basename>si95</xocs:file-basename><xocs:filename>si95.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si94.gif</xocs:attachment-eid><xocs:file-basename>si94</xocs:file-basename><xocs:filename>si94.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>310</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si93.gif</xocs:attachment-eid><xocs:file-basename>si93</xocs:file-basename><xocs:filename>si93.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si92.gif</xocs:attachment-eid><xocs:file-basename>si92</xocs:file-basename><xocs:filename>si92.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>370</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>89</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si91.gif</xocs:attachment-eid><xocs:file-basename>si91</xocs:file-basename><xocs:filename>si91.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>50</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si90.gif</xocs:attachment-eid><xocs:file-basename>si90</xocs:file-basename><xocs:filename>si90.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>163</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si9.gif</xocs:attachment-eid><xocs:file-basename>si9</xocs:file-basename><xocs:filename>si9.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>269</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>55</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si89.gif</xocs:attachment-eid><xocs:file-basename>si89</xocs:file-basename><xocs:filename>si89.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>186</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si88.gif</xocs:attachment-eid><xocs:file-basename>si88</xocs:file-basename><xocs:filename>si88.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>149</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si87.gif</xocs:attachment-eid><xocs:file-basename>si87</xocs:file-basename><xocs:filename>si87.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>206</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si86.gif</xocs:attachment-eid><xocs:file-basename>si86</xocs:file-basename><xocs:filename>si86.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>138</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si85.gif</xocs:attachment-eid><xocs:file-basename>si85</xocs:file-basename><xocs:filename>si85.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>189</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si84.gif</xocs:attachment-eid><xocs:file-basename>si84</xocs:file-basename><xocs:filename>si84.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>137</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si83.gif</xocs:attachment-eid><xocs:file-basename>si83</xocs:file-basename><xocs:filename>si83.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si82.gif</xocs:attachment-eid><xocs:file-basename>si82</xocs:file-basename><xocs:filename>si82.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>147</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si81.gif</xocs:attachment-eid><xocs:file-basename>si81</xocs:file-basename><xocs:filename>si81.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>201</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si80.gif</xocs:attachment-eid><xocs:file-basename>si80</xocs:file-basename><xocs:filename>si80.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>194</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si8.gif</xocs:attachment-eid><xocs:file-basename>si8</xocs:file-basename><xocs:filename>si8.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>53</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si79.gif</xocs:attachment-eid><xocs:file-basename>si79</xocs:file-basename><xocs:filename>si79.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>182</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si78.gif</xocs:attachment-eid><xocs:file-basename>si78</xocs:file-basename><xocs:filename>si78.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>290</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>72</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si77.gif</xocs:attachment-eid><xocs:file-basename>si77</xocs:file-basename><xocs:filename>si77.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>246</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>55</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si76.gif</xocs:attachment-eid><xocs:file-basename>si76</xocs:file-basename><xocs:filename>si76.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si75.gif</xocs:attachment-eid><xocs:file-basename>si75</xocs:file-basename><xocs:filename>si75.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>186</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si74.gif</xocs:attachment-eid><xocs:file-basename>si74</xocs:file-basename><xocs:filename>si74.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>169</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si73.gif</xocs:attachment-eid><xocs:file-basename>si73</xocs:file-basename><xocs:filename>si73.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si72.gif</xocs:attachment-eid><xocs:file-basename>si72</xocs:file-basename><xocs:filename>si72.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>186</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si71.gif</xocs:attachment-eid><xocs:file-basename>si71</xocs:file-basename><xocs:filename>si71.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>252</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si70.gif</xocs:attachment-eid><xocs:file-basename>si70</xocs:file-basename><xocs:filename>si70.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>174</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si7.gif</xocs:attachment-eid><xocs:file-basename>si7</xocs:file-basename><xocs:filename>si7.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>384</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>106</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si69.gif</xocs:attachment-eid><xocs:file-basename>si69</xocs:file-basename><xocs:filename>si69.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>258</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si68.gif</xocs:attachment-eid><xocs:file-basename>si68</xocs:file-basename><xocs:filename>si68.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>242</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>54</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si67.gif</xocs:attachment-eid><xocs:file-basename>si67</xocs:file-basename><xocs:filename>si67.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>201</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si66.gif</xocs:attachment-eid><xocs:file-basename>si66</xocs:file-basename><xocs:filename>si66.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>226</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>62</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si65.gif</xocs:attachment-eid><xocs:file-basename>si65</xocs:file-basename><xocs:filename>si65.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>191</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si64.gif</xocs:attachment-eid><xocs:file-basename>si64</xocs:file-basename><xocs:filename>si64.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>264</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si63.gif</xocs:attachment-eid><xocs:file-basename>si63</xocs:file-basename><xocs:filename>si63.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si62.gif</xocs:attachment-eid><xocs:file-basename>si62</xocs:file-basename><xocs:filename>si62.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>252</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si61.gif</xocs:attachment-eid><xocs:file-basename>si61</xocs:file-basename><xocs:filename>si61.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>191</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>28</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si60.gif</xocs:attachment-eid><xocs:file-basename>si60</xocs:file-basename><xocs:filename>si60.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>274</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si6.gif</xocs:attachment-eid><xocs:file-basename>si6</xocs:file-basename><xocs:filename>si6.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si59.gif</xocs:attachment-eid><xocs:file-basename>si59</xocs:file-basename><xocs:filename>si59.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>146</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si58.gif</xocs:attachment-eid><xocs:file-basename>si58</xocs:file-basename><xocs:filename>si58.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>146</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si57.gif</xocs:attachment-eid><xocs:file-basename>si57</xocs:file-basename><xocs:filename>si57.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>136</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si56.gif</xocs:attachment-eid><xocs:file-basename>si56</xocs:file-basename><xocs:filename>si56.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>134</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si55.gif</xocs:attachment-eid><xocs:file-basename>si55</xocs:file-basename><xocs:filename>si55.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>391</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>118</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si54.gif</xocs:attachment-eid><xocs:file-basename>si54</xocs:file-basename><xocs:filename>si54.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>51</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si53.gif</xocs:attachment-eid><xocs:file-basename>si53</xocs:file-basename><xocs:filename>si53.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>149</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si52.gif</xocs:attachment-eid><xocs:file-basename>si52</xocs:file-basename><xocs:filename>si52.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>391</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>118</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si51.gif</xocs:attachment-eid><xocs:file-basename>si51</xocs:file-basename><xocs:filename>si51.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>164</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si503.gif</xocs:attachment-eid><xocs:file-basename>si503</xocs:file-basename><xocs:filename>si503.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>222</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si502.gif</xocs:attachment-eid><xocs:file-basename>si502</xocs:file-basename><xocs:filename>si502.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>291</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si501.gif</xocs:attachment-eid><xocs:file-basename>si501</xocs:file-basename><xocs:filename>si501.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>341</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si500.gif</xocs:attachment-eid><xocs:file-basename>si500</xocs:file-basename><xocs:filename>si500.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>409</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>101</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si50.gif</xocs:attachment-eid><xocs:file-basename>si50</xocs:file-basename><xocs:filename>si50.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>236</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si5.gif</xocs:attachment-eid><xocs:file-basename>si5</xocs:file-basename><xocs:filename>si5.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>272</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>58</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si499.gif</xocs:attachment-eid><xocs:file-basename>si499</xocs:file-basename><xocs:filename>si499.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>329</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si498.gif</xocs:attachment-eid><xocs:file-basename>si498</xocs:file-basename><xocs:filename>si498.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>222</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si497.gif</xocs:attachment-eid><xocs:file-basename>si497</xocs:file-basename><xocs:filename>si497.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>197</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si496.gif</xocs:attachment-eid><xocs:file-basename>si496</xocs:file-basename><xocs:filename>si496.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>350</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>85</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si495.gif</xocs:attachment-eid><xocs:file-basename>si495</xocs:file-basename><xocs:filename>si495.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>269</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si494.gif</xocs:attachment-eid><xocs:file-basename>si494</xocs:file-basename><xocs:filename>si494.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>233</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si493.gif</xocs:attachment-eid><xocs:file-basename>si493</xocs:file-basename><xocs:filename>si493.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>164</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si492.gif</xocs:attachment-eid><xocs:file-basename>si492</xocs:file-basename><xocs:filename>si492.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>150</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si491.gif</xocs:attachment-eid><xocs:file-basename>si491</xocs:file-basename><xocs:filename>si491.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>204</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si490.gif</xocs:attachment-eid><xocs:file-basename>si490</xocs:file-basename><xocs:filename>si490.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>278</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>51</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si49.gif</xocs:attachment-eid><xocs:file-basename>si49</xocs:file-basename><xocs:filename>si49.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>51</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si489.gif</xocs:attachment-eid><xocs:file-basename>si489</xocs:file-basename><xocs:filename>si489.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>299</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>61</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si488.gif</xocs:attachment-eid><xocs:file-basename>si488</xocs:file-basename><xocs:filename>si488.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si487.gif</xocs:attachment-eid><xocs:file-basename>si487</xocs:file-basename><xocs:filename>si487.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>158</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si486.gif</xocs:attachment-eid><xocs:file-basename>si486</xocs:file-basename><xocs:filename>si486.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>325</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>88</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si485.gif</xocs:attachment-eid><xocs:file-basename>si485</xocs:file-basename><xocs:filename>si485.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>232</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>39</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si484.gif</xocs:attachment-eid><xocs:file-basename>si484</xocs:file-basename><xocs:filename>si484.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>196</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si483.gif</xocs:attachment-eid><xocs:file-basename>si483</xocs:file-basename><xocs:filename>si483.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>325</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>88</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si482.gif</xocs:attachment-eid><xocs:file-basename>si482</xocs:file-basename><xocs:filename>si482.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>186</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si481.gif</xocs:attachment-eid><xocs:file-basename>si481</xocs:file-basename><xocs:filename>si481.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>222</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si480.gif</xocs:attachment-eid><xocs:file-basename>si480</xocs:file-basename><xocs:filename>si480.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>294</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si48.gif</xocs:attachment-eid><xocs:file-basename>si48</xocs:file-basename><xocs:filename>si48.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>599</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>201</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si479.gif</xocs:attachment-eid><xocs:file-basename>si479</xocs:file-basename><xocs:filename>si479.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>213</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si478.gif</xocs:attachment-eid><xocs:file-basename>si478</xocs:file-basename><xocs:filename>si478.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>245</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si477.gif</xocs:attachment-eid><xocs:file-basename>si477</xocs:file-basename><xocs:filename>si477.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>275</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si476.gif</xocs:attachment-eid><xocs:file-basename>si476</xocs:file-basename><xocs:filename>si476.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>272</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>58</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si475.gif</xocs:attachment-eid><xocs:file-basename>si475</xocs:file-basename><xocs:filename>si475.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>199</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si474.gif</xocs:attachment-eid><xocs:file-basename>si474</xocs:file-basename><xocs:filename>si474.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>453</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>139</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si473.gif</xocs:attachment-eid><xocs:file-basename>si473</xocs:file-basename><xocs:filename>si473.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>177</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si472.gif</xocs:attachment-eid><xocs:file-basename>si472</xocs:file-basename><xocs:filename>si472.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si471.gif</xocs:attachment-eid><xocs:file-basename>si471</xocs:file-basename><xocs:filename>si471.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>242</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si470.gif</xocs:attachment-eid><xocs:file-basename>si470</xocs:file-basename><xocs:filename>si470.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>193</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si47.gif</xocs:attachment-eid><xocs:file-basename>si47</xocs:file-basename><xocs:filename>si47.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>573</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>177</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si469.gif</xocs:attachment-eid><xocs:file-basename>si469</xocs:file-basename><xocs:filename>si469.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>235</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si468.gif</xocs:attachment-eid><xocs:file-basename>si468</xocs:file-basename><xocs:filename>si468.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>58</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si467.gif</xocs:attachment-eid><xocs:file-basename>si467</xocs:file-basename><xocs:filename>si467.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>226</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>61</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si466.gif</xocs:attachment-eid><xocs:file-basename>si466</xocs:file-basename><xocs:filename>si466.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>249</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si465.gif</xocs:attachment-eid><xocs:file-basename>si465</xocs:file-basename><xocs:filename>si465.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si464.gif</xocs:attachment-eid><xocs:file-basename>si464</xocs:file-basename><xocs:filename>si464.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>69</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si463.gif</xocs:attachment-eid><xocs:file-basename>si463</xocs:file-basename><xocs:filename>si463.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>371</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>105</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si462.gif</xocs:attachment-eid><xocs:file-basename>si462</xocs:file-basename><xocs:filename>si462.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>220</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>49</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si461.gif</xocs:attachment-eid><xocs:file-basename>si461</xocs:file-basename><xocs:filename>si461.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>204</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si460.gif</xocs:attachment-eid><xocs:file-basename>si460</xocs:file-basename><xocs:filename>si460.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>283</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si46.gif</xocs:attachment-eid><xocs:file-basename>si46</xocs:file-basename><xocs:filename>si46.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>213</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si459.gif</xocs:attachment-eid><xocs:file-basename>si459</xocs:file-basename><xocs:filename>si459.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si458.gif</xocs:attachment-eid><xocs:file-basename>si458</xocs:file-basename><xocs:filename>si458.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si457.gif</xocs:attachment-eid><xocs:file-basename>si457</xocs:file-basename><xocs:filename>si457.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>182</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si456.gif</xocs:attachment-eid><xocs:file-basename>si456</xocs:file-basename><xocs:filename>si456.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>180</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si455.gif</xocs:attachment-eid><xocs:file-basename>si455</xocs:file-basename><xocs:filename>si455.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>304</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>70</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si454.gif</xocs:attachment-eid><xocs:file-basename>si454</xocs:file-basename><xocs:filename>si454.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>494</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>135</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si453.gif</xocs:attachment-eid><xocs:file-basename>si453</xocs:file-basename><xocs:filename>si453.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>216</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si452.gif</xocs:attachment-eid><xocs:file-basename>si452</xocs:file-basename><xocs:filename>si452.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>271</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>54</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si451.gif</xocs:attachment-eid><xocs:file-basename>si451</xocs:file-basename><xocs:filename>si451.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>747</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>255</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si450.gif</xocs:attachment-eid><xocs:file-basename>si450</xocs:file-basename><xocs:filename>si450.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>472</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>161</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si45.gif</xocs:attachment-eid><xocs:file-basename>si45</xocs:file-basename><xocs:filename>si45.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>256</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si449.gif</xocs:attachment-eid><xocs:file-basename>si449</xocs:file-basename><xocs:filename>si449.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>456</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>163</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si448.gif</xocs:attachment-eid><xocs:file-basename>si448</xocs:file-basename><xocs:filename>si448.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si447.gif</xocs:attachment-eid><xocs:file-basename>si447</xocs:file-basename><xocs:filename>si447.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>149</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si446.gif</xocs:attachment-eid><xocs:file-basename>si446</xocs:file-basename><xocs:filename>si446.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>381</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>118</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si445.gif</xocs:attachment-eid><xocs:file-basename>si445</xocs:file-basename><xocs:filename>si445.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>200</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si444.gif</xocs:attachment-eid><xocs:file-basename>si444</xocs:file-basename><xocs:filename>si444.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si443.gif</xocs:attachment-eid><xocs:file-basename>si443</xocs:file-basename><xocs:filename>si443.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>206</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si442.gif</xocs:attachment-eid><xocs:file-basename>si442</xocs:file-basename><xocs:filename>si442.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>168</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si441.gif</xocs:attachment-eid><xocs:file-basename>si441</xocs:file-basename><xocs:filename>si441.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>171</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si440.gif</xocs:attachment-eid><xocs:file-basename>si440</xocs:file-basename><xocs:filename>si440.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>171</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>18</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si44.gif</xocs:attachment-eid><xocs:file-basename>si44</xocs:file-basename><xocs:filename>si44.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>258</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si439.gif</xocs:attachment-eid><xocs:file-basename>si439</xocs:file-basename><xocs:filename>si439.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>284</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>42</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si438.gif</xocs:attachment-eid><xocs:file-basename>si438</xocs:file-basename><xocs:filename>si438.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>205</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si437.gif</xocs:attachment-eid><xocs:file-basename>si437</xocs:file-basename><xocs:filename>si437.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>205</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si436.gif</xocs:attachment-eid><xocs:file-basename>si436</xocs:file-basename><xocs:filename>si436.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>293</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si435.gif</xocs:attachment-eid><xocs:file-basename>si435</xocs:file-basename><xocs:filename>si435.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>153</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si434.gif</xocs:attachment-eid><xocs:file-basename>si434</xocs:file-basename><xocs:filename>si434.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>278</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>62</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si433.gif</xocs:attachment-eid><xocs:file-basename>si433</xocs:file-basename><xocs:filename>si433.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si432.gif</xocs:attachment-eid><xocs:file-basename>si432</xocs:file-basename><xocs:filename>si432.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>272</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si431.gif</xocs:attachment-eid><xocs:file-basename>si431</xocs:file-basename><xocs:filename>si431.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>205</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si430.gif</xocs:attachment-eid><xocs:file-basename>si430</xocs:file-basename><xocs:filename>si430.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>164</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si43.gif</xocs:attachment-eid><xocs:file-basename>si43</xocs:file-basename><xocs:filename>si43.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>197</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si429.gif</xocs:attachment-eid><xocs:file-basename>si429</xocs:file-basename><xocs:filename>si429.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>233</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>50</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si428.gif</xocs:attachment-eid><xocs:file-basename>si428</xocs:file-basename><xocs:filename>si428.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>313</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>87</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si427.gif</xocs:attachment-eid><xocs:file-basename>si427</xocs:file-basename><xocs:filename>si427.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>235</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si426.gif</xocs:attachment-eid><xocs:file-basename>si426</xocs:file-basename><xocs:filename>si426.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>901</xocs:filesize><xocs:pixel-height>19</xocs:pixel-height><xocs:pixel-width>303</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si425.gif</xocs:attachment-eid><xocs:file-basename>si425</xocs:file-basename><xocs:filename>si425.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>218</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si424.gif</xocs:attachment-eid><xocs:file-basename>si424</xocs:file-basename><xocs:filename>si424.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>353</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>86</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si423.gif</xocs:attachment-eid><xocs:file-basename>si423</xocs:file-basename><xocs:filename>si423.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>210</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>40</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si422.gif</xocs:attachment-eid><xocs:file-basename>si422</xocs:file-basename><xocs:filename>si422.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>151</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si421.gif</xocs:attachment-eid><xocs:file-basename>si421</xocs:file-basename><xocs:filename>si421.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>679</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>228</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si420.gif</xocs:attachment-eid><xocs:file-basename>si420</xocs:file-basename><xocs:filename>si420.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>219</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>78</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si419.gif</xocs:attachment-eid><xocs:file-basename>si419</xocs:file-basename><xocs:filename>si419.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>458</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>136</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si418.gif</xocs:attachment-eid><xocs:file-basename>si418</xocs:file-basename><xocs:filename>si418.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>519</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>167</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si417.gif</xocs:attachment-eid><xocs:file-basename>si417</xocs:file-basename><xocs:filename>si417.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si42.gif</xocs:attachment-eid><xocs:file-basename>si42</xocs:file-basename><xocs:filename>si42.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>248</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si416.gif</xocs:attachment-eid><xocs:file-basename>si416</xocs:file-basename><xocs:filename>si416.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>258</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>70</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si415.gif</xocs:attachment-eid><xocs:file-basename>si415</xocs:file-basename><xocs:filename>si415.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>326</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si414.gif</xocs:attachment-eid><xocs:file-basename>si414</xocs:file-basename><xocs:filename>si414.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>40</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si413.gif</xocs:attachment-eid><xocs:file-basename>si413</xocs:file-basename><xocs:filename>si413.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>302</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si412.gif</xocs:attachment-eid><xocs:file-basename>si412</xocs:file-basename><xocs:filename>si412.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1513</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>550</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si411.gif</xocs:attachment-eid><xocs:file-basename>si411</xocs:file-basename><xocs:filename>si411.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>401</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>129</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si410.gif</xocs:attachment-eid><xocs:file-basename>si410</xocs:file-basename><xocs:filename>si410.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>202</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si41.gif</xocs:attachment-eid><xocs:file-basename>si41</xocs:file-basename><xocs:filename>si41.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>176</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>28</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si409.gif</xocs:attachment-eid><xocs:file-basename>si409</xocs:file-basename><xocs:filename>si409.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si408.gif</xocs:attachment-eid><xocs:file-basename>si408</xocs:file-basename><xocs:filename>si408.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>270</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>78</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si407.gif</xocs:attachment-eid><xocs:file-basename>si407</xocs:file-basename><xocs:filename>si407.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1777</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>580</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si406.gif</xocs:attachment-eid><xocs:file-basename>si406</xocs:file-basename><xocs:filename>si406.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si405.gif</xocs:attachment-eid><xocs:file-basename>si405</xocs:file-basename><xocs:filename>si405.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>3788</xocs:filesize><xocs:pixel-height>68</xocs:pixel-height><xocs:pixel-width>582</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si404.gif</xocs:attachment-eid><xocs:file-basename>si404</xocs:file-basename><xocs:filename>si404.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1339</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>462</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si403.gif</xocs:attachment-eid><xocs:file-basename>si403</xocs:file-basename><xocs:filename>si403.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>894</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>282</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si402.gif</xocs:attachment-eid><xocs:file-basename>si402</xocs:file-basename><xocs:filename>si402.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>680</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>210</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si401.gif</xocs:attachment-eid><xocs:file-basename>si401</xocs:file-basename><xocs:filename>si401.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>453</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>131</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si400.gif</xocs:attachment-eid><xocs:file-basename>si400</xocs:file-basename><xocs:filename>si400.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>817</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>265</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si40.gif</xocs:attachment-eid><xocs:file-basename>si40</xocs:file-basename><xocs:filename>si40.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>286</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si4.gif</xocs:attachment-eid><xocs:file-basename>si4</xocs:file-basename><xocs:filename>si4.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>190</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si399.gif</xocs:attachment-eid><xocs:file-basename>si399</xocs:file-basename><xocs:filename>si399.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>809</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>265</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si398.gif</xocs:attachment-eid><xocs:file-basename>si398</xocs:file-basename><xocs:filename>si398.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>750</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>245</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si397.gif</xocs:attachment-eid><xocs:file-basename>si397</xocs:file-basename><xocs:filename>si397.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>450</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>131</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si396.gif</xocs:attachment-eid><xocs:file-basename>si396</xocs:file-basename><xocs:filename>si396.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>278</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si395.gif</xocs:attachment-eid><xocs:file-basename>si395</xocs:file-basename><xocs:filename>si395.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>682</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>209</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si394.gif</xocs:attachment-eid><xocs:file-basename>si394</xocs:file-basename><xocs:filename>si394.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>483</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>133</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si393.gif</xocs:attachment-eid><xocs:file-basename>si393</xocs:file-basename><xocs:filename>si393.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>662</xocs:filesize><xocs:pixel-height>20</xocs:pixel-height><xocs:pixel-width>202</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si392.gif</xocs:attachment-eid><xocs:file-basename>si392</xocs:file-basename><xocs:filename>si392.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si391.gif</xocs:attachment-eid><xocs:file-basename>si391</xocs:file-basename><xocs:filename>si391.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1356</xocs:filesize><xocs:pixel-height>21</xocs:pixel-height><xocs:pixel-width>487</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si390.gif</xocs:attachment-eid><xocs:file-basename>si390</xocs:file-basename><xocs:filename>si390.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>266</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>54</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si39.gif</xocs:attachment-eid><xocs:file-basename>si39</xocs:file-basename><xocs:filename>si39.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>164</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>18</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si389.gif</xocs:attachment-eid><xocs:file-basename>si389</xocs:file-basename><xocs:filename>si389.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>181</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si388.gif</xocs:attachment-eid><xocs:file-basename>si388</xocs:file-basename><xocs:filename>si388.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>214</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si387.gif</xocs:attachment-eid><xocs:file-basename>si387</xocs:file-basename><xocs:filename>si387.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>164</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si386.gif</xocs:attachment-eid><xocs:file-basename>si386</xocs:file-basename><xocs:filename>si386.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>291</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si385.gif</xocs:attachment-eid><xocs:file-basename>si385</xocs:file-basename><xocs:filename>si385.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>328</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>73</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si384.gif</xocs:attachment-eid><xocs:file-basename>si384</xocs:file-basename><xocs:filename>si384.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>300</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si383.gif</xocs:attachment-eid><xocs:file-basename>si383</xocs:file-basename><xocs:filename>si383.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>369</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>94</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si382.gif</xocs:attachment-eid><xocs:file-basename>si382</xocs:file-basename><xocs:filename>si382.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>305</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si381.gif</xocs:attachment-eid><xocs:file-basename>si381</xocs:file-basename><xocs:filename>si381.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>207</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si380.gif</xocs:attachment-eid><xocs:file-basename>si380</xocs:file-basename><xocs:filename>si380.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>154</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si379.gif</xocs:attachment-eid><xocs:file-basename>si379</xocs:file-basename><xocs:filename>si379.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>249</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si378.gif</xocs:attachment-eid><xocs:file-basename>si378</xocs:file-basename><xocs:filename>si378.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>151</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si377.gif</xocs:attachment-eid><xocs:file-basename>si377</xocs:file-basename><xocs:filename>si377.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>307</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>69</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si376.gif</xocs:attachment-eid><xocs:file-basename>si376</xocs:file-basename><xocs:filename>si376.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>153</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si375.gif</xocs:attachment-eid><xocs:file-basename>si375</xocs:file-basename><xocs:filename>si375.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>369</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>94</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si374.gif</xocs:attachment-eid><xocs:file-basename>si374</xocs:file-basename><xocs:filename>si374.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>293</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>78</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si373.gif</xocs:attachment-eid><xocs:file-basename>si373</xocs:file-basename><xocs:filename>si373.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>260</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>89</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si372.gif</xocs:attachment-eid><xocs:file-basename>si372</xocs:file-basename><xocs:filename>si372.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>333</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>73</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si371.gif</xocs:attachment-eid><xocs:file-basename>si371</xocs:file-basename><xocs:filename>si371.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>207</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si38.gif</xocs:attachment-eid><xocs:file-basename>si38</xocs:file-basename><xocs:filename>si38.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>162</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si370.gif</xocs:attachment-eid><xocs:file-basename>si370</xocs:file-basename><xocs:filename>si370.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>196</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si37.gif</xocs:attachment-eid><xocs:file-basename>si37</xocs:file-basename><xocs:filename>si37.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>159</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>17</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si369.gif</xocs:attachment-eid><xocs:file-basename>si369</xocs:file-basename><xocs:filename>si369.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>215</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si368.gif</xocs:attachment-eid><xocs:file-basename>si368</xocs:file-basename><xocs:filename>si368.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>210</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si367.gif</xocs:attachment-eid><xocs:file-basename>si367</xocs:file-basename><xocs:filename>si367.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>242</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>42</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si366.gif</xocs:attachment-eid><xocs:file-basename>si366</xocs:file-basename><xocs:filename>si366.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>247</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>47</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si365.gif</xocs:attachment-eid><xocs:file-basename>si365</xocs:file-basename><xocs:filename>si365.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>428</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>105</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si364.gif</xocs:attachment-eid><xocs:file-basename>si364</xocs:file-basename><xocs:filename>si364.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>223</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>54</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si363.gif</xocs:attachment-eid><xocs:file-basename>si363</xocs:file-basename><xocs:filename>si363.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>188</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si362.gif</xocs:attachment-eid><xocs:file-basename>si362</xocs:file-basename><xocs:filename>si362.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>296</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>81</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si361.gif</xocs:attachment-eid><xocs:file-basename>si361</xocs:file-basename><xocs:filename>si361.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>250</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si360.gif</xocs:attachment-eid><xocs:file-basename>si360</xocs:file-basename><xocs:filename>si360.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>193</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si36.gif</xocs:attachment-eid><xocs:file-basename>si36</xocs:file-basename><xocs:filename>si36.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>273</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>68</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si359.gif</xocs:attachment-eid><xocs:file-basename>si359</xocs:file-basename><xocs:filename>si359.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si358.gif</xocs:attachment-eid><xocs:file-basename>si358</xocs:file-basename><xocs:filename>si358.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>760</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>244</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si357.gif</xocs:attachment-eid><xocs:file-basename>si357</xocs:file-basename><xocs:filename>si357.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>144</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si356.gif</xocs:attachment-eid><xocs:file-basename>si356</xocs:file-basename><xocs:filename>si356.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>215</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>47</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si355.gif</xocs:attachment-eid><xocs:file-basename>si355</xocs:file-basename><xocs:filename>si355.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>276</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si354.gif</xocs:attachment-eid><xocs:file-basename>si354</xocs:file-basename><xocs:filename>si354.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si353.gif</xocs:attachment-eid><xocs:file-basename>si353</xocs:file-basename><xocs:filename>si353.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>214</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>47</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si352.gif</xocs:attachment-eid><xocs:file-basename>si352</xocs:file-basename><xocs:filename>si352.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>242</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>44</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si351.gif</xocs:attachment-eid><xocs:file-basename>si351</xocs:file-basename><xocs:filename>si351.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>256</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>61</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si350.gif</xocs:attachment-eid><xocs:file-basename>si350</xocs:file-basename><xocs:filename>si350.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>298</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>88</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si35.gif</xocs:attachment-eid><xocs:file-basename>si35</xocs:file-basename><xocs:filename>si35.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>157</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si349.gif</xocs:attachment-eid><xocs:file-basename>si349</xocs:file-basename><xocs:filename>si349.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>216</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>56</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si348.gif</xocs:attachment-eid><xocs:file-basename>si348</xocs:file-basename><xocs:filename>si348.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si347.gif</xocs:attachment-eid><xocs:file-basename>si347</xocs:file-basename><xocs:filename>si347.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>228</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si346.gif</xocs:attachment-eid><xocs:file-basename>si346</xocs:file-basename><xocs:filename>si346.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>305</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>72</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si345.gif</xocs:attachment-eid><xocs:file-basename>si345</xocs:file-basename><xocs:filename>si345.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>233</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si344.gif</xocs:attachment-eid><xocs:file-basename>si344</xocs:file-basename><xocs:filename>si344.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>206</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si343.gif</xocs:attachment-eid><xocs:file-basename>si343</xocs:file-basename><xocs:filename>si343.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si342.gif</xocs:attachment-eid><xocs:file-basename>si342</xocs:file-basename><xocs:filename>si342.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>200</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si341.gif</xocs:attachment-eid><xocs:file-basename>si341</xocs:file-basename><xocs:filename>si341.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si340.gif</xocs:attachment-eid><xocs:file-basename>si340</xocs:file-basename><xocs:filename>si340.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>314</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>70</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si34.gif</xocs:attachment-eid><xocs:file-basename>si34</xocs:file-basename><xocs:filename>si34.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>250</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>67</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si339.gif</xocs:attachment-eid><xocs:file-basename>si339</xocs:file-basename><xocs:filename>si339.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>202</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>28</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si338.gif</xocs:attachment-eid><xocs:file-basename>si338</xocs:file-basename><xocs:filename>si338.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>205</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si337.gif</xocs:attachment-eid><xocs:file-basename>si337</xocs:file-basename><xocs:filename>si337.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>285</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si336.gif</xocs:attachment-eid><xocs:file-basename>si336</xocs:file-basename><xocs:filename>si336.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>206</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si335.gif</xocs:attachment-eid><xocs:file-basename>si335</xocs:file-basename><xocs:filename>si335.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>498</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>164</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si334.gif</xocs:attachment-eid><xocs:file-basename>si334</xocs:file-basename><xocs:filename>si334.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>279</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si333.gif</xocs:attachment-eid><xocs:file-basename>si333</xocs:file-basename><xocs:filename>si333.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>695</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>299</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si332.gif</xocs:attachment-eid><xocs:file-basename>si332</xocs:file-basename><xocs:filename>si332.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>175</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si331.gif</xocs:attachment-eid><xocs:file-basename>si331</xocs:file-basename><xocs:filename>si331.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si330.gif</xocs:attachment-eid><xocs:file-basename>si330</xocs:file-basename><xocs:filename>si330.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>395</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>111</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si33.gif</xocs:attachment-eid><xocs:file-basename>si33</xocs:file-basename><xocs:filename>si33.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si329.gif</xocs:attachment-eid><xocs:file-basename>si329</xocs:file-basename><xocs:filename>si329.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>219</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>44</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si328.gif</xocs:attachment-eid><xocs:file-basename>si328</xocs:file-basename><xocs:filename>si328.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>215</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si327.gif</xocs:attachment-eid><xocs:file-basename>si327</xocs:file-basename><xocs:filename>si327.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>194</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si326.gif</xocs:attachment-eid><xocs:file-basename>si326</xocs:file-basename><xocs:filename>si326.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>136</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>11</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si325.gif</xocs:attachment-eid><xocs:file-basename>si325</xocs:file-basename><xocs:filename>si325.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>147</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si324.gif</xocs:attachment-eid><xocs:file-basename>si324</xocs:file-basename><xocs:filename>si324.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>209</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si323.gif</xocs:attachment-eid><xocs:file-basename>si323</xocs:file-basename><xocs:filename>si323.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>150</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>18</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si322.gif</xocs:attachment-eid><xocs:file-basename>si322</xocs:file-basename><xocs:filename>si322.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>285</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si321.gif</xocs:attachment-eid><xocs:file-basename>si321</xocs:file-basename><xocs:filename>si321.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>282</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si320.gif</xocs:attachment-eid><xocs:file-basename>si320</xocs:file-basename><xocs:filename>si320.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>195</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si32.gif</xocs:attachment-eid><xocs:file-basename>si32</xocs:file-basename><xocs:filename>si32.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>302</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>93</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si319.gif</xocs:attachment-eid><xocs:file-basename>si319</xocs:file-basename><xocs:filename>si319.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>265</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si318.gif</xocs:attachment-eid><xocs:file-basename>si318</xocs:file-basename><xocs:filename>si318.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>164</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si317.gif</xocs:attachment-eid><xocs:file-basename>si317</xocs:file-basename><xocs:filename>si317.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>245</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si316.gif</xocs:attachment-eid><xocs:file-basename>si316</xocs:file-basename><xocs:filename>si316.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>165</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si315.gif</xocs:attachment-eid><xocs:file-basename>si315</xocs:file-basename><xocs:filename>si315.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>355</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>100</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si314.gif</xocs:attachment-eid><xocs:file-basename>si314</xocs:file-basename><xocs:filename>si314.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>199</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si313.gif</xocs:attachment-eid><xocs:file-basename>si313</xocs:file-basename><xocs:filename>si313.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>212</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si312.gif</xocs:attachment-eid><xocs:file-basename>si312</xocs:file-basename><xocs:filename>si312.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>390</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>96</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si311.gif</xocs:attachment-eid><xocs:file-basename>si311</xocs:file-basename><xocs:filename>si311.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>268</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>63</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si310.gif</xocs:attachment-eid><xocs:file-basename>si310</xocs:file-basename><xocs:filename>si310.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>219</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si31.gif</xocs:attachment-eid><xocs:file-basename>si31</xocs:file-basename><xocs:filename>si31.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>492</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>174</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si309.gif</xocs:attachment-eid><xocs:file-basename>si309</xocs:file-basename><xocs:filename>si309.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>213</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si308.gif</xocs:attachment-eid><xocs:file-basename>si308</xocs:file-basename><xocs:filename>si308.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>363</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>104</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si307.gif</xocs:attachment-eid><xocs:file-basename>si307</xocs:file-basename><xocs:filename>si307.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>293</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>63</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si306.gif</xocs:attachment-eid><xocs:file-basename>si306</xocs:file-basename><xocs:filename>si306.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>320</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si305.gif</xocs:attachment-eid><xocs:file-basename>si305</xocs:file-basename><xocs:filename>si305.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>289</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>78</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si304.gif</xocs:attachment-eid><xocs:file-basename>si304</xocs:file-basename><xocs:filename>si304.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>370</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si303.gif</xocs:attachment-eid><xocs:file-basename>si303</xocs:file-basename><xocs:filename>si303.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>423</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>112</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si302.gif</xocs:attachment-eid><xocs:file-basename>si302</xocs:file-basename><xocs:filename>si302.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>343</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>112</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si301.gif</xocs:attachment-eid><xocs:file-basename>si301</xocs:file-basename><xocs:filename>si301.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>217</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si300.gif</xocs:attachment-eid><xocs:file-basename>si300</xocs:file-basename><xocs:filename>si300.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>262</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>64</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si30.gif</xocs:attachment-eid><xocs:file-basename>si30</xocs:file-basename><xocs:filename>si30.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>438</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>130</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si3.gif</xocs:attachment-eid><xocs:file-basename>si3</xocs:file-basename><xocs:filename>si3.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>214</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si299.gif</xocs:attachment-eid><xocs:file-basename>si299</xocs:file-basename><xocs:filename>si299.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>291</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si298.gif</xocs:attachment-eid><xocs:file-basename>si298</xocs:file-basename><xocs:filename>si298.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>318</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>79</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si297.gif</xocs:attachment-eid><xocs:file-basename>si297</xocs:file-basename><xocs:filename>si297.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>333</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>81</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si296.gif</xocs:attachment-eid><xocs:file-basename>si296</xocs:file-basename><xocs:filename>si296.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>186</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si295.gif</xocs:attachment-eid><xocs:file-basename>si295</xocs:file-basename><xocs:filename>si295.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>390</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>99</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si294.gif</xocs:attachment-eid><xocs:file-basename>si294</xocs:file-basename><xocs:filename>si294.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>211</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>32</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si293.gif</xocs:attachment-eid><xocs:file-basename>si293</xocs:file-basename><xocs:filename>si293.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>259</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si292.gif</xocs:attachment-eid><xocs:file-basename>si292</xocs:file-basename><xocs:filename>si292.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>232</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si291.gif</xocs:attachment-eid><xocs:file-basename>si291</xocs:file-basename><xocs:filename>si291.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>232</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si290.gif</xocs:attachment-eid><xocs:file-basename>si290</xocs:file-basename><xocs:filename>si290.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>171</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si289.gif</xocs:attachment-eid><xocs:file-basename>si289</xocs:file-basename><xocs:filename>si289.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>235</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>49</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si288.gif</xocs:attachment-eid><xocs:file-basename>si288</xocs:file-basename><xocs:filename>si288.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si287.gif</xocs:attachment-eid><xocs:file-basename>si287</xocs:file-basename><xocs:filename>si287.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>177</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si286.gif</xocs:attachment-eid><xocs:file-basename>si286</xocs:file-basename><xocs:filename>si286.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>233</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si285.gif</xocs:attachment-eid><xocs:file-basename>si285</xocs:file-basename><xocs:filename>si285.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>210</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si284.gif</xocs:attachment-eid><xocs:file-basename>si284</xocs:file-basename><xocs:filename>si284.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>433</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>131</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si283.gif</xocs:attachment-eid><xocs:file-basename>si283</xocs:file-basename><xocs:filename>si283.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>313</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>72</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si282.gif</xocs:attachment-eid><xocs:file-basename>si282</xocs:file-basename><xocs:filename>si282.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>274</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si281.gif</xocs:attachment-eid><xocs:file-basename>si281</xocs:file-basename><xocs:filename>si281.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>194</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si280.gif</xocs:attachment-eid><xocs:file-basename>si280</xocs:file-basename><xocs:filename>si280.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>352</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>97</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si29.gif</xocs:attachment-eid><xocs:file-basename>si29</xocs:file-basename><xocs:filename>si29.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>270</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>58</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si28.gif</xocs:attachment-eid><xocs:file-basename>si28</xocs:file-basename><xocs:filename>si28.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>379</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>99</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si279.gif</xocs:attachment-eid><xocs:file-basename>si279</xocs:file-basename><xocs:filename>si279.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>291</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>65</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si278.gif</xocs:attachment-eid><xocs:file-basename>si278</xocs:file-basename><xocs:filename>si278.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>454</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>131</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si277.gif</xocs:attachment-eid><xocs:file-basename>si277</xocs:file-basename><xocs:filename>si277.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>482</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>124</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si276.gif</xocs:attachment-eid><xocs:file-basename>si276</xocs:file-basename><xocs:filename>si276.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>365</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>98</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si275.gif</xocs:attachment-eid><xocs:file-basename>si275</xocs:file-basename><xocs:filename>si275.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>443</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>131</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si274.gif</xocs:attachment-eid><xocs:file-basename>si274</xocs:file-basename><xocs:filename>si274.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>222</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si273.gif</xocs:attachment-eid><xocs:file-basename>si273</xocs:file-basename><xocs:filename>si273.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>212</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si272.gif</xocs:attachment-eid><xocs:file-basename>si272</xocs:file-basename><xocs:filename>si272.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>209</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si271.gif</xocs:attachment-eid><xocs:file-basename>si271</xocs:file-basename><xocs:filename>si271.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>141</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>12</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si270.gif</xocs:attachment-eid><xocs:file-basename>si270</xocs:file-basename><xocs:filename>si270.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>313</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si27.gif</xocs:attachment-eid><xocs:file-basename>si27</xocs:file-basename><xocs:filename>si27.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>248</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>55</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si269.gif</xocs:attachment-eid><xocs:file-basename>si269</xocs:file-basename><xocs:filename>si269.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>369</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>104</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si268.gif</xocs:attachment-eid><xocs:file-basename>si268</xocs:file-basename><xocs:filename>si268.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>208</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>38</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si267.gif</xocs:attachment-eid><xocs:file-basename>si267</xocs:file-basename><xocs:filename>si267.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>410</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>116</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si266.gif</xocs:attachment-eid><xocs:file-basename>si266</xocs:file-basename><xocs:filename>si266.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>228</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si265.gif</xocs:attachment-eid><xocs:file-basename>si265</xocs:file-basename><xocs:filename>si265.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>384</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>102</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si264.gif</xocs:attachment-eid><xocs:file-basename>si264</xocs:file-basename><xocs:filename>si264.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>212</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si263.gif</xocs:attachment-eid><xocs:file-basename>si263</xocs:file-basename><xocs:filename>si263.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>263</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>57</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si262.gif</xocs:attachment-eid><xocs:file-basename>si262</xocs:file-basename><xocs:filename>si262.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>172</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si261.gif</xocs:attachment-eid><xocs:file-basename>si261</xocs:file-basename><xocs:filename>si261.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>219</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si260.gif</xocs:attachment-eid><xocs:file-basename>si260</xocs:file-basename><xocs:filename>si260.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si26.gif</xocs:attachment-eid><xocs:file-basename>si26</xocs:file-basename><xocs:filename>si26.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>284</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si259.gif</xocs:attachment-eid><xocs:file-basename>si259</xocs:file-basename><xocs:filename>si259.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>219</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si258.gif</xocs:attachment-eid><xocs:file-basename>si258</xocs:file-basename><xocs:filename>si258.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>354</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>91</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si257.gif</xocs:attachment-eid><xocs:file-basename>si257</xocs:file-basename><xocs:filename>si257.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>261</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>58</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si256.gif</xocs:attachment-eid><xocs:file-basename>si256</xocs:file-basename><xocs:filename>si256.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>227</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>62</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si255.gif</xocs:attachment-eid><xocs:file-basename>si255</xocs:file-basename><xocs:filename>si255.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>190</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>28</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si254.gif</xocs:attachment-eid><xocs:file-basename>si254</xocs:file-basename><xocs:filename>si254.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>354</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>91</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si253.gif</xocs:attachment-eid><xocs:file-basename>si253</xocs:file-basename><xocs:filename>si253.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>558</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>178</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si252.gif</xocs:attachment-eid><xocs:file-basename>si252</xocs:file-basename><xocs:filename>si252.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>362</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si251.gif</xocs:attachment-eid><xocs:file-basename>si251</xocs:file-basename><xocs:filename>si251.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>300</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>63</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si250.gif</xocs:attachment-eid><xocs:file-basename>si250</xocs:file-basename><xocs:filename>si250.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>270</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si25.gif</xocs:attachment-eid><xocs:file-basename>si25</xocs:file-basename><xocs:filename>si25.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>181</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si249.gif</xocs:attachment-eid><xocs:file-basename>si249</xocs:file-basename><xocs:filename>si249.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>270</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si248.gif</xocs:attachment-eid><xocs:file-basename>si248</xocs:file-basename><xocs:filename>si248.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>248</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>55</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si247.gif</xocs:attachment-eid><xocs:file-basename>si247</xocs:file-basename><xocs:filename>si247.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si246.gif</xocs:attachment-eid><xocs:file-basename>si246</xocs:file-basename><xocs:filename>si246.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>418</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>135</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si245.gif</xocs:attachment-eid><xocs:file-basename>si245</xocs:file-basename><xocs:filename>si245.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>410</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>116</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si244.gif</xocs:attachment-eid><xocs:file-basename>si244</xocs:file-basename><xocs:filename>si244.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>236</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>62</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si243.gif</xocs:attachment-eid><xocs:file-basename>si243</xocs:file-basename><xocs:filename>si243.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>389</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>102</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si242.gif</xocs:attachment-eid><xocs:file-basename>si242</xocs:file-basename><xocs:filename>si242.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>209</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si241.gif</xocs:attachment-eid><xocs:file-basename>si241</xocs:file-basename><xocs:filename>si241.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>283</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si240.gif</xocs:attachment-eid><xocs:file-basename>si240</xocs:file-basename><xocs:filename>si240.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>248</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>55</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si24.gif</xocs:attachment-eid><xocs:file-basename>si24</xocs:file-basename><xocs:filename>si24.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>220</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si239.gif</xocs:attachment-eid><xocs:file-basename>si239</xocs:file-basename><xocs:filename>si239.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>147</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si238.gif</xocs:attachment-eid><xocs:file-basename>si238</xocs:file-basename><xocs:filename>si238.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>174</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si237.gif</xocs:attachment-eid><xocs:file-basename>si237</xocs:file-basename><xocs:filename>si237.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si236.gif</xocs:attachment-eid><xocs:file-basename>si236</xocs:file-basename><xocs:filename>si236.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>53</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si235.gif</xocs:attachment-eid><xocs:file-basename>si235</xocs:file-basename><xocs:filename>si235.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>210</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si234.gif</xocs:attachment-eid><xocs:file-basename>si234</xocs:file-basename><xocs:filename>si234.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>266</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>42</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si233.gif</xocs:attachment-eid><xocs:file-basename>si233</xocs:file-basename><xocs:filename>si233.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>242</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>47</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si232.gif</xocs:attachment-eid><xocs:file-basename>si232</xocs:file-basename><xocs:filename>si232.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>143</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si231.gif</xocs:attachment-eid><xocs:file-basename>si231</xocs:file-basename><xocs:filename>si231.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>237</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>39</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si230.gif</xocs:attachment-eid><xocs:file-basename>si230</xocs:file-basename><xocs:filename>si230.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>445</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>110</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si23.gif</xocs:attachment-eid><xocs:file-basename>si23</xocs:file-basename><xocs:filename>si23.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>266</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>67</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si229.gif</xocs:attachment-eid><xocs:file-basename>si229</xocs:file-basename><xocs:filename>si229.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>258</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si228.gif</xocs:attachment-eid><xocs:file-basename>si228</xocs:file-basename><xocs:filename>si228.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>210</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si227.gif</xocs:attachment-eid><xocs:file-basename>si227</xocs:file-basename><xocs:filename>si227.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>347</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>112</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si226.gif</xocs:attachment-eid><xocs:file-basename>si226</xocs:file-basename><xocs:filename>si226.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>249</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si225.gif</xocs:attachment-eid><xocs:file-basename>si225</xocs:file-basename><xocs:filename>si225.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>499</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>120</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si224.gif</xocs:attachment-eid><xocs:file-basename>si224</xocs:file-basename><xocs:filename>si224.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si223.gif</xocs:attachment-eid><xocs:file-basename>si223</xocs:file-basename><xocs:filename>si223.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>263</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>72</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si222.gif</xocs:attachment-eid><xocs:file-basename>si222</xocs:file-basename><xocs:filename>si222.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>286</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si221.gif</xocs:attachment-eid><xocs:file-basename>si221</xocs:file-basename><xocs:filename>si221.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>249</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si220.gif</xocs:attachment-eid><xocs:file-basename>si220</xocs:file-basename><xocs:filename>si220.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>24</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si219.gif</xocs:attachment-eid><xocs:file-basename>si219</xocs:file-basename><xocs:filename>si219.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>186</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si218.gif</xocs:attachment-eid><xocs:file-basename>si218</xocs:file-basename><xocs:filename>si218.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>456</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>120</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si217.gif</xocs:attachment-eid><xocs:file-basename>si217</xocs:file-basename><xocs:filename>si217.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>168</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si216.gif</xocs:attachment-eid><xocs:file-basename>si216</xocs:file-basename><xocs:filename>si216.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>500</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>179</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si215.gif</xocs:attachment-eid><xocs:file-basename>si215</xocs:file-basename><xocs:filename>si215.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>338</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>91</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si214.gif</xocs:attachment-eid><xocs:file-basename>si214</xocs:file-basename><xocs:filename>si214.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>629</xocs:filesize><xocs:pixel-height>17</xocs:pixel-height><xocs:pixel-width>234</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si213.gif</xocs:attachment-eid><xocs:file-basename>si213</xocs:file-basename><xocs:filename>si213.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>477</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>188</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si212.gif</xocs:attachment-eid><xocs:file-basename>si212</xocs:file-basename><xocs:filename>si212.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>391</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si211.gif</xocs:attachment-eid><xocs:file-basename>si211</xocs:file-basename><xocs:filename>si211.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si22.gif</xocs:attachment-eid><xocs:file-basename>si22</xocs:file-basename><xocs:filename>si22.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>220</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si210.gif</xocs:attachment-eid><xocs:file-basename>si210</xocs:file-basename><xocs:filename>si210.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>284</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>70</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si21.gif</xocs:attachment-eid><xocs:file-basename>si21</xocs:file-basename><xocs:filename>si21.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>224</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>43</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si209.gif</xocs:attachment-eid><xocs:file-basename>si209</xocs:file-basename><xocs:filename>si209.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>168</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si208.gif</xocs:attachment-eid><xocs:file-basename>si208</xocs:file-basename><xocs:filename>si208.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>31</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si207.gif</xocs:attachment-eid><xocs:file-basename>si207</xocs:file-basename><xocs:filename>si207.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>162</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si206.gif</xocs:attachment-eid><xocs:file-basename>si206</xocs:file-basename><xocs:filename>si206.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>257</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>54</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si205.gif</xocs:attachment-eid><xocs:file-basename>si205</xocs:file-basename><xocs:filename>si205.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>500</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>179</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si204.gif</xocs:attachment-eid><xocs:file-basename>si204</xocs:file-basename><xocs:filename>si204.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>162</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si203.gif</xocs:attachment-eid><xocs:file-basename>si203</xocs:file-basename><xocs:filename>si203.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>150</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si202.gif</xocs:attachment-eid><xocs:file-basename>si202</xocs:file-basename><xocs:filename>si202.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>310</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si201.gif</xocs:attachment-eid><xocs:file-basename>si201</xocs:file-basename><xocs:filename>si201.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>190</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>29</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si200.gif</xocs:attachment-eid><xocs:file-basename>si200</xocs:file-basename><xocs:filename>si200.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>438</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>123</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si20.gif</xocs:attachment-eid><xocs:file-basename>si20</xocs:file-basename><xocs:filename>si20.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>21</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si2.gif</xocs:attachment-eid><xocs:file-basename>si2</xocs:file-basename><xocs:filename>si2.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>179</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si199.gif</xocs:attachment-eid><xocs:file-basename>si199</xocs:file-basename><xocs:filename>si199.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>999</xocs:filesize><xocs:pixel-height>46</xocs:pixel-height><xocs:pixel-width>220</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si198.gif</xocs:attachment-eid><xocs:file-basename>si198</xocs:file-basename><xocs:filename>si198.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>154</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si197.gif</xocs:attachment-eid><xocs:file-basename>si197</xocs:file-basename><xocs:filename>si197.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si196.gif</xocs:attachment-eid><xocs:file-basename>si196</xocs:file-basename><xocs:filename>si196.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>835</xocs:filesize><xocs:pixel-height>46</xocs:pixel-height><xocs:pixel-width>167</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si195.gif</xocs:attachment-eid><xocs:file-basename>si195</xocs:file-basename><xocs:filename>si195.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>156</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>16</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si194.gif</xocs:attachment-eid><xocs:file-basename>si194</xocs:file-basename><xocs:filename>si194.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>149</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>14</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si193.gif</xocs:attachment-eid><xocs:file-basename>si193</xocs:file-basename><xocs:filename>si193.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>304</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si192.gif</xocs:attachment-eid><xocs:file-basename>si192</xocs:file-basename><xocs:filename>si192.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>209</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>30</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si191.gif</xocs:attachment-eid><xocs:file-basename>si191</xocs:file-basename><xocs:filename>si191.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>145</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si190.gif</xocs:attachment-eid><xocs:file-basename>si190</xocs:file-basename><xocs:filename>si190.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>242</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si19.gif</xocs:attachment-eid><xocs:file-basename>si19</xocs:file-basename><xocs:filename>si19.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>150</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>13</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si189.gif</xocs:attachment-eid><xocs:file-basename>si189</xocs:file-basename><xocs:filename>si189.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>225</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>52</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si188.gif</xocs:attachment-eid><xocs:file-basename>si188</xocs:file-basename><xocs:filename>si188.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>245</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>44</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si187.gif</xocs:attachment-eid><xocs:file-basename>si187</xocs:file-basename><xocs:filename>si187.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>268</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>71</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si186.gif</xocs:attachment-eid><xocs:file-basename>si186</xocs:file-basename><xocs:filename>si186.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>189</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si185.gif</xocs:attachment-eid><xocs:file-basename>si185</xocs:file-basename><xocs:filename>si185.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>245</xocs:filesize><xocs:pixel-height>18</xocs:pixel-height><xocs:pixel-width>44</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si184.gif</xocs:attachment-eid><xocs:file-basename>si184</xocs:file-basename><xocs:filename>si184.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>188</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si183.gif</xocs:attachment-eid><xocs:file-basename>si183</xocs:file-basename><xocs:filename>si183.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>243</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>41</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si182.gif</xocs:attachment-eid><xocs:file-basename>si182</xocs:file-basename><xocs:filename>si182.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>180</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>23</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si181.gif</xocs:attachment-eid><xocs:file-basename>si181</xocs:file-basename><xocs:filename>si181.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>275</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si180.gif</xocs:attachment-eid><xocs:file-basename>si180</xocs:file-basename><xocs:filename>si180.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>389</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>137</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si18.gif</xocs:attachment-eid><xocs:file-basename>si18</xocs:file-basename><xocs:filename>si18.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>174</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si179.gif</xocs:attachment-eid><xocs:file-basename>si179</xocs:file-basename><xocs:filename>si179.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>280</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>73</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si178.gif</xocs:attachment-eid><xocs:file-basename>si178</xocs:file-basename><xocs:filename>si178.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>223</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>40</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si177.gif</xocs:attachment-eid><xocs:file-basename>si177</xocs:file-basename><xocs:filename>si177.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>453</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>128</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si176.gif</xocs:attachment-eid><xocs:file-basename>si176</xocs:file-basename><xocs:filename>si176.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>333</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>90</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si175.gif</xocs:attachment-eid><xocs:file-basename>si175</xocs:file-basename><xocs:filename>si175.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>230</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>39</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si174.gif</xocs:attachment-eid><xocs:file-basename>si174</xocs:file-basename><xocs:filename>si174.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>236</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>40</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si173.gif</xocs:attachment-eid><xocs:file-basename>si173</xocs:file-basename><xocs:filename>si173.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>294</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>87</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si172.gif</xocs:attachment-eid><xocs:file-basename>si172</xocs:file-basename><xocs:filename>si172.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>276</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>72</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si171.gif</xocs:attachment-eid><xocs:file-basename>si171</xocs:file-basename><xocs:filename>si171.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>351</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>98</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si170.gif</xocs:attachment-eid><xocs:file-basename>si170</xocs:file-basename><xocs:filename>si170.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>268</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>79</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si17.gif</xocs:attachment-eid><xocs:file-basename>si17</xocs:file-basename><xocs:filename>si17.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>211</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si169.gif</xocs:attachment-eid><xocs:file-basename>si169</xocs:file-basename><xocs:filename>si169.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>319</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si168.gif</xocs:attachment-eid><xocs:file-basename>si168</xocs:file-basename><xocs:filename>si168.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>282</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si167.gif</xocs:attachment-eid><xocs:file-basename>si167</xocs:file-basename><xocs:filename>si167.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>331</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si166.gif</xocs:attachment-eid><xocs:file-basename>si166</xocs:file-basename><xocs:filename>si166.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>293</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si165.gif</xocs:attachment-eid><xocs:file-basename>si165</xocs:file-basename><xocs:filename>si165.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>276</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si164.gif</xocs:attachment-eid><xocs:file-basename>si164</xocs:file-basename><xocs:filename>si164.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>326</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>92</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si163.gif</xocs:attachment-eid><xocs:file-basename>si163</xocs:file-basename><xocs:filename>si163.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>265</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>77</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si162.gif</xocs:attachment-eid><xocs:file-basename>si162</xocs:file-basename><xocs:filename>si162.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>326</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>98</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si161.gif</xocs:attachment-eid><xocs:file-basename>si161</xocs:file-basename><xocs:filename>si161.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>693</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>310</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si160.gif</xocs:attachment-eid><xocs:file-basename>si160</xocs:file-basename><xocs:filename>si160.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>304</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si16.gif</xocs:attachment-eid><xocs:file-basename>si16</xocs:file-basename><xocs:filename>si16.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>519</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>186</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si159.gif</xocs:attachment-eid><xocs:file-basename>si159</xocs:file-basename><xocs:filename>si159.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>296</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>67</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si158.gif</xocs:attachment-eid><xocs:file-basename>si158</xocs:file-basename><xocs:filename>si158.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>219</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si157.gif</xocs:attachment-eid><xocs:file-basename>si157</xocs:file-basename><xocs:filename>si157.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>297</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>79</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si156.gif</xocs:attachment-eid><xocs:file-basename>si156</xocs:file-basename><xocs:filename>si156.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>230</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>49</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si155.gif</xocs:attachment-eid><xocs:file-basename>si155</xocs:file-basename><xocs:filename>si155.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>497</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>147</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si154.gif</xocs:attachment-eid><xocs:file-basename>si154</xocs:file-basename><xocs:filename>si154.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>333</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>73</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si153.gif</xocs:attachment-eid><xocs:file-basename>si153</xocs:file-basename><xocs:filename>si153.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>266</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>60</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si152.gif</xocs:attachment-eid><xocs:file-basename>si152</xocs:file-basename><xocs:filename>si152.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>218</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>45</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si151.gif</xocs:attachment-eid><xocs:file-basename>si151</xocs:file-basename><xocs:filename>si151.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>276</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>72</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si150.gif</xocs:attachment-eid><xocs:file-basename>si150</xocs:file-basename><xocs:filename>si150.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>231</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si15.gif</xocs:attachment-eid><xocs:file-basename>si15</xocs:file-basename><xocs:filename>si15.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>11</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si149.gif</xocs:attachment-eid><xocs:file-basename>si149</xocs:file-basename><xocs:filename>si149.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>221</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>37</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si148.gif</xocs:attachment-eid><xocs:file-basename>si148</xocs:file-basename><xocs:filename>si148.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>214</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si147.gif</xocs:attachment-eid><xocs:file-basename>si147</xocs:file-basename><xocs:filename>si147.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>183</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>27</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si146.gif</xocs:attachment-eid><xocs:file-basename>si146</xocs:file-basename><xocs:filename>si146.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>177</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si145.gif</xocs:attachment-eid><xocs:file-basename>si145</xocs:file-basename><xocs:filename>si145.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>628</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>220</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si144.gif</xocs:attachment-eid><xocs:file-basename>si144</xocs:file-basename><xocs:filename>si144.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>179</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si143.gif</xocs:attachment-eid><xocs:file-basename>si143</xocs:file-basename><xocs:filename>si143.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>244</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si142.gif</xocs:attachment-eid><xocs:file-basename>si142</xocs:file-basename><xocs:filename>si142.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>301</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>59</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si141.gif</xocs:attachment-eid><xocs:file-basename>si141</xocs:file-basename><xocs:filename>si141.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>237</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>39</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si140.gif</xocs:attachment-eid><xocs:file-basename>si140</xocs:file-basename><xocs:filename>si140.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>424</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>104</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si14.gif</xocs:attachment-eid><xocs:file-basename>si14</xocs:file-basename><xocs:filename>si14.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>264</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>70</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si139.gif</xocs:attachment-eid><xocs:file-basename>si139</xocs:file-basename><xocs:filename>si139.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>201</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>35</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si138.gif</xocs:attachment-eid><xocs:file-basename>si138</xocs:file-basename><xocs:filename>si138.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>244</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>36</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si137.gif</xocs:attachment-eid><xocs:file-basename>si137</xocs:file-basename><xocs:filename>si137.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>227</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>34</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si136.gif</xocs:attachment-eid><xocs:file-basename>si136</xocs:file-basename><xocs:filename>si136.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>231</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>42</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si135.gif</xocs:attachment-eid><xocs:file-basename>si135</xocs:file-basename><xocs:filename>si135.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>231</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>42</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si134.gif</xocs:attachment-eid><xocs:file-basename>si134</xocs:file-basename><xocs:filename>si134.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>179</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si133.gif</xocs:attachment-eid><xocs:file-basename>si133</xocs:file-basename><xocs:filename>si133.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>255</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>69</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si132.gif</xocs:attachment-eid><xocs:file-basename>si132</xocs:file-basename><xocs:filename>si132.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>217</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>48</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si131.gif</xocs:attachment-eid><xocs:file-basename>si131</xocs:file-basename><xocs:filename>si131.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>354</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>111</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si130.gif</xocs:attachment-eid><xocs:file-basename>si130</xocs:file-basename><xocs:filename>si130.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>256</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>68</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si13.gif</xocs:attachment-eid><xocs:file-basename>si13</xocs:file-basename><xocs:filename>si13.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>292</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si129.gif</xocs:attachment-eid><xocs:file-basename>si129</xocs:file-basename><xocs:filename>si129.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>292</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>85</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si128.gif</xocs:attachment-eid><xocs:file-basename>si128</xocs:file-basename><xocs:filename>si128.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si127.gif</xocs:attachment-eid><xocs:file-basename>si127</xocs:file-basename><xocs:filename>si127.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>341</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>76</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si126.gif</xocs:attachment-eid><xocs:file-basename>si126</xocs:file-basename><xocs:filename>si126.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>189</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si125.gif</xocs:attachment-eid><xocs:file-basename>si125</xocs:file-basename><xocs:filename>si125.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>378</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>89</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si124.gif</xocs:attachment-eid><xocs:file-basename>si124</xocs:file-basename><xocs:filename>si124.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>393</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>89</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si123.gif</xocs:attachment-eid><xocs:file-basename>si123</xocs:file-basename><xocs:filename>si123.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si122.gif</xocs:attachment-eid><xocs:file-basename>si122</xocs:file-basename><xocs:filename>si122.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>370</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>89</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si121.gif</xocs:attachment-eid><xocs:file-basename>si121</xocs:file-basename><xocs:filename>si121.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>178</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si120.gif</xocs:attachment-eid><xocs:file-basename>si120</xocs:file-basename><xocs:filename>si120.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>277</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>50</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si12.gif</xocs:attachment-eid><xocs:file-basename>si12</xocs:file-basename><xocs:filename>si12.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>238</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>63</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si119.gif</xocs:attachment-eid><xocs:file-basename>si119</xocs:file-basename><xocs:filename>si119.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>351</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si118.gif</xocs:attachment-eid><xocs:file-basename>si118</xocs:file-basename><xocs:filename>si118.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>331</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>66</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si117.gif</xocs:attachment-eid><xocs:file-basename>si117</xocs:file-basename><xocs:filename>si117.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>351</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>80</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si116.gif</xocs:attachment-eid><xocs:file-basename>si116</xocs:file-basename><xocs:filename>si116.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>189</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>25</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si115.gif</xocs:attachment-eid><xocs:file-basename>si115</xocs:file-basename><xocs:filename>si115.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>173</xocs:filesize><xocs:pixel-height>16</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si114.gif</xocs:attachment-eid><xocs:file-basename>si114</xocs:file-basename><xocs:filename>si114.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>370</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>89</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si113.gif</xocs:attachment-eid><xocs:file-basename>si113</xocs:file-basename><xocs:filename>si113.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>405</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>107</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si112.gif</xocs:attachment-eid><xocs:file-basename>si112</xocs:file-basename><xocs:filename>si112.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>405</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>107</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si111.gif</xocs:attachment-eid><xocs:file-basename>si111</xocs:file-basename><xocs:filename>si111.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>179</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>26</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si110.gif</xocs:attachment-eid><xocs:file-basename>si110</xocs:file-basename><xocs:filename>si110.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>168</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>20</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si11.gif</xocs:attachment-eid><xocs:file-basename>si11</xocs:file-basename><xocs:filename>si11.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>185</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si109.gif</xocs:attachment-eid><xocs:file-basename>si109</xocs:file-basename><xocs:filename>si109.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>163</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>19</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si108.gif</xocs:attachment-eid><xocs:file-basename>si108</xocs:file-basename><xocs:filename>si108.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>132</xocs:filesize><xocs:pixel-height>9</xocs:pixel-height><xocs:pixel-width>15</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si107.gif</xocs:attachment-eid><xocs:file-basename>si107</xocs:file-basename><xocs:filename>si107.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>284</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si106.gif</xocs:attachment-eid><xocs:file-basename>si106</xocs:file-basename><xocs:filename>si106.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>292</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>85</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si105.gif</xocs:attachment-eid><xocs:file-basename>si105</xocs:file-basename><xocs:filename>si105.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>310</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>90</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si104.gif</xocs:attachment-eid><xocs:file-basename>si104</xocs:file-basename><xocs:filename>si104.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>256</xocs:filesize><xocs:pixel-height>13</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si103.gif</xocs:attachment-eid><xocs:file-basename>si103</xocs:file-basename><xocs:filename>si103.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>213</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>46</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si102.gif</xocs:attachment-eid><xocs:file-basename>si102</xocs:file-basename><xocs:filename>si102.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>286</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>74</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si101.gif</xocs:attachment-eid><xocs:file-basename>si101</xocs:file-basename><xocs:filename>si101.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>168</xocs:filesize><xocs:pixel-height>12</xocs:pixel-height><xocs:pixel-width>18</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si100.gif</xocs:attachment-eid><xocs:file-basename>si100</xocs:file-basename><xocs:filename>si100.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>192</xocs:filesize><xocs:pixel-height>10</xocs:pixel-height><xocs:pixel-width>33</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si10.gif</xocs:attachment-eid><xocs:file-basename>si10</xocs:file-basename><xocs:filename>si10.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>573</xocs:filesize><xocs:pixel-height>15</xocs:pixel-height><xocs:pixel-width>177</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-si1.gif</xocs:attachment-eid><xocs:file-basename>si1</xocs:file-basename><xocs:filename>si1.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>238</xocs:filesize><xocs:pixel-height>14</xocs:pixel-height><xocs:pixel-width>49</xocs:pixel-width><xocs:attachment-type>ALTIMG</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr022.jpg</xocs:attachment-eid><xocs:file-basename>gr022</xocs:file-basename><xocs:filename>gr022.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>24068</xocs:filesize><xocs:pixel-height>124</xocs:pixel-height><xocs:pixel-width>663</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr019.jpg</xocs:attachment-eid><xocs:file-basename>gr019</xocs:file-basename><xocs:filename>gr019.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>14251</xocs:filesize><xocs:pixel-height>270</xocs:pixel-height><xocs:pixel-width>357</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr018.jpg</xocs:attachment-eid><xocs:file-basename>gr018</xocs:file-basename><xocs:filename>gr018.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>10931</xocs:filesize><xocs:pixel-height>285</xocs:pixel-height><xocs:pixel-width>345</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr017.jpg</xocs:attachment-eid><xocs:file-basename>gr017</xocs:file-basename><xocs:filename>gr017.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>45338</xocs:filesize><xocs:pixel-height>343</xocs:pixel-height><xocs:pixel-width>663</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr015.jpg</xocs:attachment-eid><xocs:file-basename>gr015</xocs:file-basename><xocs:filename>gr015.jpg</xocs:filename><xocs:extension>jpg</xocs:extension><xocs:filesize>76273</xocs:filesize><xocs:pixel-height>353</xocs:pixel-height><xocs:pixel-width>663</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr021.gif</xocs:attachment-eid><xocs:file-basename>gr021</xocs:file-basename><xocs:filename>gr021.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>6325</xocs:filesize><xocs:pixel-height>207</xocs:pixel-height><xocs:pixel-width>462</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr020.gif</xocs:attachment-eid><xocs:file-basename>gr020</xocs:file-basename><xocs:filename>gr020.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>5905</xocs:filesize><xocs:pixel-height>207</xocs:pixel-height><xocs:pixel-width>465</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr016.gif</xocs:attachment-eid><xocs:file-basename>gr016</xocs:file-basename><xocs:filename>gr016.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>6122</xocs:filesize><xocs:pixel-height>209</xocs:pixel-height><xocs:pixel-width>469</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr014.gif</xocs:attachment-eid><xocs:file-basename>gr014</xocs:file-basename><xocs:filename>gr014.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>8363</xocs:filesize><xocs:pixel-height>297</xocs:pixel-height><xocs:pixel-width>425</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr013.gif</xocs:attachment-eid><xocs:file-basename>gr013</xocs:file-basename><xocs:filename>gr013.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>2600</xocs:filesize><xocs:pixel-height>66</xocs:pixel-height><xocs:pixel-width>374</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr012.gif</xocs:attachment-eid><xocs:file-basename>gr012</xocs:file-basename><xocs:filename>gr012.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>3720</xocs:filesize><xocs:pixel-height>103</xocs:pixel-height><xocs:pixel-width>271</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr011.gif</xocs:attachment-eid><xocs:file-basename>gr011</xocs:file-basename><xocs:filename>gr011.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>22017</xocs:filesize><xocs:pixel-height>541</xocs:pixel-height><xocs:pixel-width>501</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr010.gif</xocs:attachment-eid><xocs:file-basename>gr010</xocs:file-basename><xocs:filename>gr010.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>12026</xocs:filesize><xocs:pixel-height>354</xocs:pixel-height><xocs:pixel-width>486</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr009.gif</xocs:attachment-eid><xocs:file-basename>gr009</xocs:file-basename><xocs:filename>gr009.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>4340</xocs:filesize><xocs:pixel-height>196</xocs:pixel-height><xocs:pixel-width>288</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr008.gif</xocs:attachment-eid><xocs:file-basename>gr008</xocs:file-basename><xocs:filename>gr008.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>18194</xocs:filesize><xocs:pixel-height>370</xocs:pixel-height><xocs:pixel-width>505</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr007.gif</xocs:attachment-eid><xocs:file-basename>gr007</xocs:file-basename><xocs:filename>gr007.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>8649</xocs:filesize><xocs:pixel-height>285</xocs:pixel-height><xocs:pixel-width>386</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr006.gif</xocs:attachment-eid><xocs:file-basename>gr006</xocs:file-basename><xocs:filename>gr006.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>5187</xocs:filesize><xocs:pixel-height>208</xocs:pixel-height><xocs:pixel-width>352</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr005.gif</xocs:attachment-eid><xocs:file-basename>gr005</xocs:file-basename><xocs:filename>gr005.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>16972</xocs:filesize><xocs:pixel-height>487</xocs:pixel-height><xocs:pixel-width>484</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr004.gif</xocs:attachment-eid><xocs:file-basename>gr004</xocs:file-basename><xocs:filename>gr004.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1308</xocs:filesize><xocs:pixel-height>73</xocs:pixel-height><xocs:pixel-width>140</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr003.gif</xocs:attachment-eid><xocs:file-basename>gr003</xocs:file-basename><xocs:filename>gr003.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>1869</xocs:filesize><xocs:pixel-height>62</xocs:pixel-height><xocs:pixel-width>255</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr002.gif</xocs:attachment-eid><xocs:file-basename>gr002</xocs:file-basename><xocs:filename>gr002.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>4669</xocs:filesize><xocs:pixel-height>209</xocs:pixel-height><xocs:pixel-width>471</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr001.gif</xocs:attachment-eid><xocs:file-basename>gr001</xocs:file-basename><xocs:filename>gr001.gif</xocs:filename><xocs:extension>gif</xocs:extension><xocs:filesize>4538</xocs:filesize><xocs:pixel-height>207</xocs:pixel-height><xocs:pixel-width>381</xocs:pixel-width><xocs:attachment-type>IMAGE-DOWNSAMPLED</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr021.sml</xocs:attachment-eid><xocs:file-basename>gr021</xocs:file-basename><xocs:filename>gr021.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2334</xocs:filesize><xocs:pixel-height>98</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr020.sml</xocs:attachment-eid><xocs:file-basename>gr020</xocs:file-basename><xocs:filename>gr020.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2208</xocs:filesize><xocs:pixel-height>97</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr016.sml</xocs:attachment-eid><xocs:file-basename>gr016</xocs:file-basename><xocs:filename>gr016.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2147</xocs:filesize><xocs:pixel-height>98</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr014.sml</xocs:attachment-eid><xocs:file-basename>gr014</xocs:file-basename><xocs:filename>gr014.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3306</xocs:filesize><xocs:pixel-height>153</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr013.sml</xocs:attachment-eid><xocs:file-basename>gr013</xocs:file-basename><xocs:filename>gr013.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>1308</xocs:filesize><xocs:pixel-height>39</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr012.sml</xocs:attachment-eid><xocs:file-basename>gr012</xocs:file-basename><xocs:filename>gr012.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2791</xocs:filesize><xocs:pixel-height>83</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr011.sml</xocs:attachment-eid><xocs:file-basename>gr011</xocs:file-basename><xocs:filename>gr011.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3737</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>152</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr010.sml</xocs:attachment-eid><xocs:file-basename>gr010</xocs:file-basename><xocs:filename>gr010.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3574</xocs:filesize><xocs:pixel-height>159</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr009.sml</xocs:attachment-eid><xocs:file-basename>gr009</xocs:file-basename><xocs:filename>gr009.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2892</xocs:filesize><xocs:pixel-height>149</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr008.sml</xocs:attachment-eid><xocs:file-basename>gr008</xocs:file-basename><xocs:filename>gr008.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4952</xocs:filesize><xocs:pixel-height>161</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr007.sml</xocs:attachment-eid><xocs:file-basename>gr007</xocs:file-basename><xocs:filename>gr007.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3687</xocs:filesize><xocs:pixel-height>162</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr006.sml</xocs:attachment-eid><xocs:file-basename>gr006</xocs:file-basename><xocs:filename>gr006.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2657</xocs:filesize><xocs:pixel-height>130</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr005.sml</xocs:attachment-eid><xocs:file-basename>gr005</xocs:file-basename><xocs:filename>gr005.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3422</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>163</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr004.sml</xocs:attachment-eid><xocs:file-basename>gr004</xocs:file-basename><xocs:filename>gr004.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2255</xocs:filesize><xocs:pixel-height>113</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr003.sml</xocs:attachment-eid><xocs:file-basename>gr003</xocs:file-basename><xocs:filename>gr003.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>1533</xocs:filesize><xocs:pixel-height>54</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr002.sml</xocs:attachment-eid><xocs:file-basename>gr002</xocs:file-basename><xocs:filename>gr002.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>1670</xocs:filesize><xocs:pixel-height>97</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr001.sml</xocs:attachment-eid><xocs:file-basename>gr001</xocs:file-basename><xocs:filename>gr001.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2009</xocs:filesize><xocs:pixel-height>119</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr022.sml</xocs:attachment-eid><xocs:file-basename>gr022</xocs:file-basename><xocs:filename>gr022.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>2984</xocs:filesize><xocs:pixel-height>41</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr019.sml</xocs:attachment-eid><xocs:file-basename>gr019</xocs:file-basename><xocs:filename>gr019.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>4657</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>216</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr018.sml</xocs:attachment-eid><xocs:file-basename>gr018</xocs:file-basename><xocs:filename>gr018.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>3555</xocs:filesize><xocs:pixel-height>164</xocs:pixel-height><xocs:pixel-width>198</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr017.sml</xocs:attachment-eid><xocs:file-basename>gr017</xocs:file-basename><xocs:filename>gr017.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>5917</xocs:filesize><xocs:pixel-height>113</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment><xocs:attachment><xocs:attachment-eid>1-s2.0-S0022000014000026-gr015.sml</xocs:attachment-eid><xocs:file-basename>gr015</xocs:file-basename><xocs:filename>gr015.sml</xocs:filename><xocs:extension>sml</xocs:extension><xocs:filesize>5692</xocs:filesize><xocs:pixel-height>116</xocs:pixel-height><xocs:pixel-width>219</xocs:pixel-width><xocs:attachment-type>IMAGE-THUMBNAIL</xocs:attachment-type></xocs:attachment></xocs:attachments></xocs:attachment-metadata-doc><xocs:refkeys><xocs:refkey3>DOLEVX2014X860</xocs:refkey3><xocs:refkey4lp>DOLEVX2014X860X900</xocs:refkey4lp><xocs:refkey4ai>DOLEVX2014X860XD</xocs:refkey4ai><xocs:refkey5>DOLEVX2014X860X900XD</xocs:refkey5></xocs:refkeys><xocs:open-access><xocs:oa-article-status is-open-access="1" is-open-archive="0">Full</xocs:oa-article-status><xocs:oa-access-effective-date>2014-01-09T07:15:01Z</xocs:oa-access-effective-date><xocs:oa-sponsor><xocs:oa-sponsor-type>FundingBody</xocs:oa-sponsor-type><xocs:oa-sponsor-name>Austrian Science Fund (FWF)</xocs:oa-sponsor-name></xocs:oa-sponsor><xocs:oa-user-license>http://creativecommons.org/licenses/by/3.0/</xocs:oa-user-license></xocs:open-access></xocs:meta><xocs:serial-item><article xmlns:sa="http://www.elsevier.com/xml/common/struct-aff/dtd" docsubtype="fla" xml:lang="en" version="5.2"><item-info><jid>YJCSS</jid><aid>2745</aid><ce:pii>S0022-0000(14)00002-6</ce:pii><ce:doi>10.1016/j.jcss.2014.01.001</ce:doi><ce:copyright type="other" year="2014">The Authors</ce:copyright></item-info><ce:floats><ce:figure id="fg0010"><ce:label>Fig. 1</ce:label><ce:caption id="cp0010"><ce:simple-para id="sp0010" view="all">A simple synchronization algorithm tolerating <ce:italic>f</ce:italic> arbitrarily failing nodes granted that <ce:italic>n</ce:italic><ce:hsp sp="0.2"/>â©¾<ce:hsp sp="0.2"/>3<ce:italic>f</ce:italic><ce:hsp sp="0.2"/>+<ce:hsp sp="0.2"/>1.</ce:simple-para></ce:caption><ce:link locator="gr001"/></ce:figure><ce:figure id="fg0020"><ce:label>Fig. 2</ce:label><ce:caption id="cp0020"><ce:simple-para id="sp0020" view="all">Part of a non-stabilizing execution of the algorithm shown in <ce:cross-ref refid="fg0010" id="crf0010">Fig. 1</ce:cross-ref>. Two iterations of the scheme described in the text are shown; after three are complete, the entire pattern is repeated.</ce:simple-para></ce:caption><ce:link locator="gr002"/></ce:figure><ce:figure id="fg0030"><ce:label>Fig. 3</ce:label><ce:caption id="cp0030"><ce:simple-para id="sp0030" view="all">Compound module InvChain.</ce:simple-para></ce:caption><ce:link locator="gr003"/></ce:figure><ce:figure id="fg0040"><ce:label>Fig. 4</ce:label><ce:caption id="cp0040"><ce:simple-para id="sp0040" view="all">Compound module Osc.</ce:simple-para></ce:caption><ce:link locator="gr004"/></ce:figure><ce:figure id="fg0050"><ce:label>Fig. 5</ce:label><ce:caption id="cp0050"><ce:simple-para id="sp0050" view="all">Submodules of node <ce:italic>i</ce:italic> and their interconnection.</ce:simple-para></ce:caption><ce:link locator="gr005"/></ce:figure><ce:figure id="fg0060"><ce:label>Fig. 6</ce:label><ce:caption id="cp0060"><ce:simple-para id="sp0060" view="all">The quick cycle of the FATAL<ce:sup loc="post">+</ce:sup> protocol. Note that we omitted the controls of the logical clock <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> that operates modulo <mml:math altimg="si369.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>b</mml:mi></mml:mrow></mml:msup></mml:math>, where <mml:math altimg="si370.gif" overflow="scroll"><mml:mi>b</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math> is the number of bits of the clock. <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> is a simple counter that is increased whenever node <ce:italic>i</ce:italic> switches to state <mml:math altimg="si366.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> and is reset to 0 when node <ce:italic>i</ce:italic> triggers a pulse, i.e., when the main state machine switches to state <ce:italic>accept</ce:italic>.</ce:simple-para></ce:caption><ce:link locator="gr006"/></ce:figure><ce:figure id="fg0070"><ce:label>Fig. 7</ce:label><ce:caption id="cp0070"><ce:simple-para id="sp0070" view="all">Basic cycle of node <ce:italic>i</ce:italic> once the algorithm has stabilized.</ce:simple-para></ce:caption><ce:link locator="gr007"/></ce:figure><ce:figure id="fg0080"><ce:label>Fig. 8</ce:label><ce:caption id="cp0080"><ce:simple-para id="sp0080" view="all">Overview of the main state machine of node <ce:italic>i</ce:italic>.</ce:simple-para></ce:caption><ce:link locator="gr008"/></ce:figure><ce:figure id="fg0090"><ce:label>Fig. 9</ce:label><ce:caption id="cp0090"><ce:simple-para id="sp0090" view="all">Extension of node <ce:italic>i</ce:italic>'s core routine. Note that the state transition module has access to the full state of node <ce:italic>i</ce:italic>'s resynchronization state machine, even though <ce:italic>i</ce:italic> communicates less information to remote nodes <ce:italic>j</ce:italic><ce:hsp sp="0.2"/>â <ce:hsp sp="0.2"/><ce:italic>i</ce:italic> (see Section <ce:cross-ref refid="se0330" id="crf0020">5.6</ce:cross-ref>). Hence the conditions "in <ce:italic>resync</ce:italic>" and "not in <ce:italic>resync</ce:italic>" can be evaluated.</ce:simple-para></ce:caption><ce:link locator="gr009"/></ce:figure><ce:figure id="fg0100"><ce:label>Fig. 10</ce:label><ce:caption id="cp0100"><ce:simple-para id="sp0100" view="all">Resynchronization state machine at node <ce:italic>i</ce:italic>. The states <ce:italic>supp</ce:italic><ce:hsp sp="0.2"/><ce:italic>j</ce:italic> and <ce:italic>supp</ce:italic><ce:hsp sp="0.2"/><ce:italic>k</ce:italic> are representative for <ce:italic>n</ce:italic> states <ce:italic>supp</ce:italic><ce:hsp sp="0.2"/>1,â¦,<ce:italic>supp</ce:italic><ce:hsp sp="0.2"/><ce:italic>n</ce:italic> corresponding to the <ce:italic>n</ce:italic> nodes of the system; all these states are built in the same way with symmetric transition conditions.</ce:simple-para></ce:caption><ce:link locator="gr010"/></ce:figure><ce:figure id="fg0110"><ce:label>Fig. 11</ce:label><ce:caption id="cp0110"><ce:simple-para id="sp0110" view="all">Sender and single receiver (including memory flags) for the ASM of the main algorithm.</ce:simple-para></ce:caption><ce:link locator="gr011"/></ce:figure><ce:figure id="fg0120"><ce:label>Fig. 12</ce:label><ce:caption id="cp0120"><ce:simple-para id="sp0120" view="all">Example state transition, including the corresponding TSM.</ce:simple-para></ce:caption><ce:link locator="gr012"/></ce:figure><ce:figure id="fg0130"><ce:label>Fig. 13</ce:label><ce:caption id="cp0130"><ce:simple-para id="sp0130" view="all">Pausable ring oscillator implementing the TSM clock.</ce:simple-para></ce:caption><ce:link locator="gr013"/></ce:figure><ce:figure id="fg0140"><ce:label>Fig. 14</ce:label><ce:caption id="cp0140"><ce:simple-para id="sp0140" view="all">Implementation principle of a watchdog timer.</ce:simple-para></ce:caption><ce:link locator="gr014"/></ce:figure><ce:figure id="fg0150"><ce:label>Fig. 15</ce:label><ce:caption id="cp0150"><ce:simple-para id="sp0150" view="all">FATAL and FATAL<ce:sup loc="post">+</ce:sup> clocks: <ce:monospace>MainAlgState[i]</ce:monospace>=1 iff <ce:italic>i</ce:italic> is in <ce:italic>accept</ce:italic>, and <ce:monospace>FATAL</ce:monospace><ce:hsp sp="0.2"/>+<ce:hsp sp="0.2"/><ce:monospace>CLK[i]</ce:monospace> is <ce:italic>i</ce:italic>'s FATAL+ signal.</ce:simple-para></ce:caption><ce:link locator="gr015"/></ce:figure><ce:figure id="fg0160"><ce:label>Fig. 16</ce:label><ce:caption id="cp0160"><ce:simple-para id="sp0160" view="all">Worst-case skew scenario for a FATAL system of <ce:italic>n</ce:italic>=8 nodes with <ce:italic>f</ce:italic>=2 faulty nodes.</ce:simple-para></ce:caption><ce:link locator="gr016"/></ce:figure><ce:figure id="fg0170"><ce:label>Fig. 17</ce:label><ce:caption id="cp0170"><ce:simple-para id="sp0170" view="all">Logic analyzer screenshot from worst-case skew experiment for a FATAL system with <ce:italic>f</ce:italic>=2 faulty nodes (6 and 7): <ce:monospace>MainAlgState[i]</ce:monospace>=1 iff <ce:italic>i</ce:italic> is in <ce:italic>accept</ce:italic>, and <ce:monospace>FATAL</ce:monospace><ce:hsp sp="0.2"/>+<ce:hsp sp="0.2"/><ce:monospace>CLK[i]</ce:monospace> is <ce:italic>i</ce:italic>'s FATAL+ signal. The nodes in <ce:italic>C</ce:italic> (4 and 5) switch to <ce:italic>accept</ce:italic> earlier than those in <ce:italic>A</ce:italic> (0 and 1) because the clock driving their TSM is faster.</ce:simple-para></ce:caption><ce:link locator="gr017"/></ce:figure><ce:figure id="fg0180"><ce:label>Fig. 18</ce:label><ce:caption id="cp0180"><ce:simple-para id="sp0180" view="all">Head of distribution of stabilization times (in s) for over 250 000 randomly initialized 8-node instances.</ce:simple-para></ce:caption><ce:link locator="gr018"/></ce:figure><ce:figure id="fg0190"><ce:label>Fig. 19</ce:label><ce:caption id="cp0190"><ce:simple-para id="sp0190" view="all">Tail of distribution of stabilization times (in s) for over 250 000 randomly initialized 8-node instances.</ce:simple-para></ce:caption><ce:link locator="gr019"/></ce:figure><ce:figure id="fg0200"><ce:label>Fig. 20</ce:label><ce:caption id="cp0200"><ce:simple-para id="sp0200" view="all">Synchronization by the Resynchronization Algorithm with 4 nodes in the absence of faulty nodes.</ce:simple-para></ce:caption><ce:link locator="gr020"/></ce:figure><ce:figure id="fg0210"><ce:label>Fig. 21</ce:label><ce:caption id="cp0210"><ce:simple-para id="sp0210" view="all">Execution of the Resynchronization Algorithm with 4 nodes and equal timeouts in presence of a Byzantine faulty node (node 4).</ce:simple-para></ce:caption><ce:link locator="gr021"/></ce:figure><ce:figure id="fg0220"><ce:label>Fig. 22</ce:label><ce:caption id="cp0220"><ce:simple-para id="sp0220" view="all">Logic analyzer screenshot of an execution of the Resynchronization Algorithm of a 4 node FATAL system with equal <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> timeouts and a Byzantine node: <ce:monospace>InResync Node</ce:monospace> <ce:italic>i</ce:italic>=1 iff <ce:italic>i</ce:italic> is in <ce:italic>resync</ce:italic>, and <ce:monospace>Init Node</ce:monospace> <ce:italic>i</ce:italic>=1 iff <ce:italic>i</ce:italic> is in <ce:italic>init</ce:italic>.</ce:simple-para></ce:caption><ce:link locator="gr022"/></ce:figure></ce:floats><head><ce:article-footnote><ce:label>â</ce:label><ce:note-para id="np0020" view="all">This work has been supported in part by the <ce:grant-sponsor id="gsp0010" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">Austrian Science Foundation (FWF)</ce:grant-sponsor> project FATAL (<ce:grant-number refid="gsp0010">P21694</ce:grant-number>) and SIC (<ce:grant-number refid="gsp0010">P26436</ce:grant-number>), by the <ce:grant-sponsor id="gsp0020" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">Israeli Centers of Research Excellence</ce:grant-sponsor> (I-CORE) program (Center No. <ce:grant-number refid="gsp0020">4/11</ce:grant-number>), by the <ce:grant-sponsor id="gsp0030" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">ISG (Israeli Smart Grid) Consortium</ce:grant-sponsor>, administered by the office of the Chief Scientist of the Israeli Ministry of Industry and Trade and Labor, and by grant <ce:grant-number refid="gsp0040">3/9778</ce:grant-number> of the <ce:grant-sponsor id="gsp0040" xlink:type="simple" xlink:role="http://www.elsevier.com/xml/linking-roles/grant-sponsor">Israeli Ministry of Science and Technology</ce:grant-sponsor>.</ce:note-para></ce:article-footnote><ce:title id="ti0010">Rigorously modeling self-stabilizing fault-tolerant circuits: An ultra-robust clocking scheme for systems-on-chip</ce:title><ce:author-group id="ag0010"><ce:author id="au0010"><ce:given-name>Danny</ce:given-name><ce:surname>Dolev</ce:surname><ce:cross-ref refid="aff0010" id="crf0030"><ce:sup loc="post">a</ce:sup></ce:cross-ref><ce:cross-ref refid="fn0010" id="crf0040"><ce:sup loc="post">1</ce:sup></ce:cross-ref><ce:e-address id="ea0010" type="email">dolev@cs.huji.ac.il</ce:e-address></ce:author><ce:author id="au0020"><ce:given-name>Matthias</ce:given-name><ce:surname>FÃ¼gger</ce:surname><ce:cross-ref refid="aff0020" id="crf0050"><ce:sup loc="post">b</ce:sup></ce:cross-ref><ce:e-address id="ea0020" type="email">fuegger@ecs.tuwien.ac.at</ce:e-address></ce:author><ce:author id="au0030"><ce:given-name>Markus</ce:given-name><ce:surname>Posch</ce:surname><ce:cross-ref refid="aff0020" id="crf0060"><ce:sup loc="post">b</ce:sup></ce:cross-ref><ce:e-address id="ea0030" type="email">markus.posch@gmx.at</ce:e-address></ce:author><ce:author id="au0040"><ce:given-name>Ulrich</ce:given-name><ce:surname>Schmid</ce:surname><ce:cross-ref refid="aff0020" id="crf0070"><ce:sup loc="post">b</ce:sup></ce:cross-ref><ce:e-address id="ea0040" type="email">s@ecs.tuwien.ac.at</ce:e-address></ce:author><ce:author id="au0050"><ce:given-name>Andreas</ce:given-name><ce:surname>Steininger</ce:surname><ce:cross-ref refid="aff0020" id="crf0080"><ce:sup loc="post">b</ce:sup></ce:cross-ref><ce:e-address id="ea0050" type="email">steininger@ecs.tuwien.ac.at</ce:e-address></ce:author><ce:author id="au0060"><ce:given-name>Christoph</ce:given-name><ce:surname>Lenzen</ce:surname><ce:cross-ref refid="aff0030" id="crf0090"><ce:sup loc="post">c</ce:sup></ce:cross-ref><ce:cross-ref refid="cr0010" id="crf0100"><ce:sup loc="post">â</ce:sup></ce:cross-ref><ce:cross-ref refid="fn0020" id="crf0110"><ce:sup loc="post">2</ce:sup></ce:cross-ref><ce:e-address id="ea0060" type="email">clenzen@csail.mit.edu</ce:e-address></ce:author><ce:affiliation id="aff0010"><ce:label>a</ce:label><ce:textfn>School of Engineering and Computer Science, The Hebrew University of Jerusalem, Edmond Safra Campus, 91904 Jerusalem, Israel</ce:textfn><sa:affiliation><sa:organization>School of Engineering and Computer Science</sa:organization><sa:organization>The Hebrew University of Jerusalem</sa:organization><sa:address-line>Edmond Safra Campus</sa:address-line><sa:city>Jerusalem</sa:city><sa:postal-code>91904</sa:postal-code><sa:country>Israel</sa:country></sa:affiliation></ce:affiliation><ce:affiliation id="aff0020"><ce:label>b</ce:label><ce:textfn>Department of Computer Engineering, Vienna University of Technology, Treitlstrasse 3, 1040 Vienna, Austria</ce:textfn><sa:affiliation><sa:organization>Department of Computer Engineering</sa:organization><sa:organization>Vienna University of Technology</sa:organization><sa:address-line>Treitlstrasse 3</sa:address-line><sa:city>Vienna</sa:city><sa:postal-code>1040</sa:postal-code><sa:country>Austria</sa:country></sa:affiliation></ce:affiliation><ce:affiliation id="aff0030"><ce:label>c</ce:label><ce:textfn>Computer Science and Artificial Intelligence Laboratory, Massachusetts Institute of Technology, 32 Vassar Street, 02139 Cambridge, MA, USA</ce:textfn><sa:affiliation><sa:organization>Computer Science and Artificial Intelligence Laboratory</sa:organization><sa:organization>Massachusetts Institute of Technology</sa:organization><sa:address-line>32 Vassar Street</sa:address-line><sa:city>Cambridge</sa:city><sa:state>MA</sa:state><sa:postal-code>02139</sa:postal-code><sa:country>USA</sa:country></sa:affiliation></ce:affiliation><ce:correspondence id="cr0010"><ce:label>â</ce:label><ce:text>Corresponding author.</ce:text></ce:correspondence><ce:footnote id="fn0010"><ce:label>1</ce:label><ce:note-para id="np0030" view="all">Danny Dolev is incumbent of the Berthold Badler Chair.</ce:note-para></ce:footnote><ce:footnote id="fn0020"><ce:label>2</ce:label><ce:note-para id="np0040" view="all">Christoph Lenzen has been supported by the Swiss National Science Foundation (SNF), the Swiss Society of Friends of the Weizmann Institute of Science, and the German Research Association (DFG, reference number Le 3107/1-1) for this work.</ce:note-para></ce:footnote></ce:author-group><ce:date-received day="23" month="1" year="2013"/><ce:date-revised day="18" month="10" year="2013"/><ce:date-accepted day="6" month="1" year="2014"/><ce:abstract id="ab0010" view="all" class="author"><ce:section-title id="st0010">Abstract</ce:section-title><ce:abstract-sec id="as0010" view="all"><ce:simple-para id="sp0230" view="all">We present the first implementation of a distributed clock generation scheme for Systems-on-Chip that recovers from an unbounded number of arbitrary transient faults despite a large number of arbitrary permanent faults. We devise self-stabilizing hardware building blocks and a hybrid synchronous/asynchronous state machine enabling metastability-free transitions of the algorithm's states. We provide a comprehensive modeling approach that permits to prove, given correctness of the constructed low-level building blocks, the high-level properties of the synchronization algorithm (which have been established in a more abstract model). We believe this approach to be of interest in its own right, since this is the first technique permitting to mathematically verify, at manageable complexity, high-level properties of a fault-prone system in terms of its very basic components. We evaluate a prototype implementation, which has been designed in VHDL, using the Petrify tool in conjunction with some extensions, and synthesized for an Altera Cyclone FPGA.</ce:simple-para></ce:abstract-sec></ce:abstract><ce:abstract class="author-highlights" id="ab0020" view="all"><ce:section-title id="st0020">Highlights</ce:section-title><ce:abstract-sec id="as0020" view="all"><ce:simple-para id="sp0240" view="all"><ce:list id="ls0010"><ce:list-item id="li0010"><ce:label>â¢</ce:label><ce:para id="pr0010" view="all">We introduce a novel modeling framework for fault-tolerant VLSI circuits.</ce:para></ce:list-item><ce:list-item id="li0020"><ce:label>â¢</ce:label><ce:para id="pr0020" view="all">We cast a self-stabilizing clocking scheme from a companion article in this model.</ce:para></ce:list-item><ce:list-item id="li0030"><ce:label>â¢</ce:label><ce:para id="pr0030" view="all">We discuss the implications of theory and model for the resulting implementation.</ce:para></ce:list-item><ce:list-item id="li0040"><ce:label>â¢</ce:label><ce:para id="pr0040" view="all">We present the measures taken to avoid metastable upsets despite faults.</ce:para></ce:list-item><ce:list-item id="li0050"><ce:label>â¢</ce:label><ce:para id="pr0050" view="all">We provide experimental data from a prototype FPGA implementation of the algorithm.</ce:para></ce:list-item></ce:list></ce:simple-para></ce:abstract-sec></ce:abstract><ce:keywords id="kws0010" view="all" class="keyword"><ce:section-title id="st0030">Keywords</ce:section-title><ce:keyword id="kw0010"><ce:text>Modeling framework</ce:text></ce:keyword><ce:keyword id="kw0020"><ce:text>Clock synchronization</ce:text></ce:keyword><ce:keyword id="kw0030"><ce:text>Hardware implementation</ce:text></ce:keyword><ce:keyword id="kw0040"><ce:text>Experiments</ce:text></ce:keyword><ce:keyword id="kw0050"><ce:text>Metastability</ce:text></ce:keyword><ce:keyword id="kw0060"><ce:text>Dependability</ce:text></ce:keyword><ce:keyword id="kw0070"><ce:text>Theoretical analysis</ce:text></ce:keyword><ce:keyword id="kw0080"><ce:text>Hybrid state machines</ce:text></ce:keyword><ce:keyword id="kw0090"><ce:text>Byzantine fault-tolerance</ce:text></ce:keyword><ce:keyword id="kw0100"><ce:text>Self-stabilization</ce:text></ce:keyword></ce:keywords></head><body view="all"><ce:sections><ce:section id="se0010" role="introduction" view="all"><ce:label>1</ce:label><ce:section-title id="st0040">Introduction &amp; related work</ce:section-title><ce:para id="pr0060" view="all">In the past, computers have essentially been viewed as monolithic, synchronous, fault-free systems. If at all, fault-tolerance has been introduced (i) to deal with limited, specific failures (e.g. errors in communication or data read from storage, which are usually handled via error-correcting codes), and (ii) at the level of distributed systems comprised of multiple machines that are fault-prone or subject to attacks (e.g. data centers or peer-to-peer applications, which use some form of replication). Except for critical systems and extreme operational conditions (e.g. medical or aerospace applications <ce:cross-ref refid="br0010" id="crf0120">[1]</ce:cross-ref>), there has been little motivation to build systems that are robust on all levels from scratch, a process that involves redesigning-or even reinventing-the very basics of how computations are organized and performed.</ce:para><ce:para id="pr0070" view="all">Due to the tremendous advances of <ce:italic>Very Large Scale Integration</ce:italic> (VLSI) technology, this situation has changed. Enabled by ever decreasing feature sizes and supply voltages, modern circuits nowadays accommodate billions of transistors running at GHz speeds <ce:cross-ref refid="br0020" id="crf0130">[2]</ce:cross-ref>. As a consequence, the assumption of chip-global (not to speak of system-global) synchrony <ce:cross-ref refid="br0030" id="crf0140">[3]</ce:cross-ref> and no (or restricted) faults gradually became outdated <ce:cross-ref refid="br0040" id="crf0150">[4]</ce:cross-ref>. Improved process technology and architectural-level fault-tolerance measures are common nowadays, and the lack of global synchrony has been tackled by accepting a certain level of asynchrony between different parts of the system.</ce:para><ce:para id="pr0080" view="all">In the most extreme form of this approach, computations are completely unsynchronized at all levels <ce:cross-ref refid="br0050" id="crf0160">[5]</ce:cross-ref>, which requires to synchronize all dependent activities (like sending and receiving of data) explicitly via handshaking. In contrast, <ce:italic>Globally Asynchronous Locally Synchronous (GALS)</ce:italic> systems <ce:cross-ref refid="br0060" id="crf0170">[6]</ce:cross-ref> make use of local clock sources to drive synchronous computations within each <ce:italic>clock domain</ce:italic>. Note that, in the wider sense, most multiprocessors fall into this category, as there is usually no single common clock that drives all processors. GALS systems again can be divided into two general classes: One that operates asynchronously at the inter-domain level, and the other consisting of <ce:italic>multi-synchronous</ce:italic> systems <ce:cross-refs refid="br0070 br0080" id="crs0010">[7,8]</ce:cross-refs> that provide some, albeit reduced, degree of synchronization among clock domains. The former class suffers from the drawback that, for inter-domain communication, either strong synchronizers or stoppable clocks must be foreseen <ce:cross-ref refid="br0090" id="crf0180">[9]</ce:cross-ref>. After all, every bit of the sender's data must have stabilized at the receiver before the clock edge used for reading the data occurs. This is avoided in multi-synchronous systems, where high-speed inter-domain communication via FIFO buffers can be implemented due to the available global synchronization <ce:cross-ref refid="br0100" id="crf0190">[10]</ce:cross-ref>. Since the latter abstraction is also very useful for other purposes, multi-synchronous GALS is preferable from the viewpoint of a system-level designer.</ce:para><ce:para id="pr0090" view="all">Naturally, establishing inter-domain synchronization comes at additional costs. While it is not too difficult to achieve and maintain in the absence of faults <ce:cross-refs refid="br0110 br0120" id="crs0020">[11,12]</ce:cross-refs>, the issue becomes highly challenging once faults of clocking system components enter the picture.</ce:para><ce:section id="se0020" view="all"><ce:label>1.1</ce:label><ce:section-title id="st0050">Contribution</ce:section-title><ce:para id="pr0100" view="all">We present an FPGA prototype implementation of a distributed clock generation scheme for SoC that self-stabilizes in the presence of up to <mml:math altimg="si1.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn></mml:math> faulty nodes. It incorporates the pulse algorithm from <ce:cross-ref refid="br0130" id="crf0200">[13]</ce:cross-ref> that tolerates arbitrary clock drifts and allows for deterministic recovery and (re)joining in constant time if <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> nodes are synchronized; it stabilizes within time <mml:math altimg="si3.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> with probability <mml:math altimg="si4.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mi>n</mml:mi></mml:mrow></mml:msup></mml:math> from any arbitrary state. An additional algorithmic layer that interacts weakly with the former provides bounded high-frequency clocks atop of it. Nodes executing the compound algorithm broadcast a mere constant number of bits in constant time. The formal proofs of the properties of the pulse synchronization algorithm and the derived high-frequency clocks are given in <ce:cross-ref refid="br0130" id="crf0210">[13]</ce:cross-ref>.</ce:para><ce:para id="pr0110" view="all">Deriving an implementation from the specification of the algorithm in <ce:cross-ref refid="br0130" id="crf0220">[13]</ce:cross-ref> proved to be challenging, as the high-level theoretical model and formulation of the algorithm in <ce:cross-ref refid="br0130" id="crf0230">[13]</ce:cross-ref> abstracts away many details. Firstly, it assumes a number of basic self-stabilizing modules above the level of gates and wires to be given. We devise and discuss self-stabilizing implementations of these building blocks meeting the specifications required by the high-level algorithm. Secondly, the algorithm's description is in terms of state machines performing transitions that are non-trivial in the sense that they do not consist of switching a single binary signal or memory bit. This requires careful consideration of metastability issues, since these state transitions are triggered by information from different clock domains. In order to resolve this issue, we introduce a generic <ce:italic>Hybrid State Transition Machine (HSTM)</ce:italic> that asynchronously starts a local synchronous execution of a state transition satisfying the model specification from <ce:cross-ref refid="br0130" id="crf0240">[13]</ce:cross-ref>. Related to this matter, we thirdly discuss in detail how the algorithm and its implementation make a best effort to guard against metastable upsets. Here, we try to get the best out of the design decisions and rely on synchronizers only where absolutely necessary.</ce:para><ce:para id="pr0120" view="all">These non-trivial implementation issues and the complex interactions between the basic building blocks raise the question under which circumstances the high-level properties of the algorithm shown in <ce:cross-ref refid="br0130" id="crf0250">[13]</ce:cross-ref> indeed hold for the presented implementation. To answer this question, we devised a model that is able to capture the behavior of the constructed modules, including faults, resilience to faults, and self-stabilization, in a hierarchical fashion. By specifying the desired behavior of modules in terms of the feasible output generated in response to their inputs, we can also <ce:italic>reason</ce:italic> about the behavior of (implementations of) modules in a hierarchical manner. This property is crucial, as it permits to determine conditions under which our implementation indeed satisfies the requirements by the abstract model used in <ce:cross-ref refid="br0130" id="crf0260">[13]</ce:cross-ref>, and then soundly conclude that if these conditions are met, all statements made in <ce:cross-ref refid="br0130" id="crf0270">[13]</ce:cross-ref> apply to our implementation. Since our approach is highly generic and permits to adjust the granularity of the description in order to focus on specific aspects of the system, we believe it to be of general and independent interest in the context of devising fault-tolerant systems.</ce:para><ce:para id="pr0130" view="all">In order to verify the predictions from theory,<ce:cross-ref refid="fn0030" id="crf0280"><ce:sup loc="post">3</ce:sup></ce:cross-ref><ce:footnote id="fn0030"><ce:label>3</ce:label><ce:note-para id="np0050" view="all">Or, to be scientifically accurate, we rather successfully failed at falsifying them. Our implementation primarily serves as a proof of concept, as clearly an FPGA implementation can merely hint at the properties of an ASIC.</ce:note-para></ce:footnote> we carried out several experiments incorporating drifting clocks, varying delays, and both transient and permanent faults. This necessitated the development of a testbed that can be efficiently controlled and set up for executing a large number of test runs quickly. In our 8-node prototype implementation, the compound algorithm generates 8-bit clocks that in all runs stabilized within <mml:math altimg="si5.gif" overflow="scroll"><mml:mn>1.9</mml:mn><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math> time (where <ce:italic>d</ce:italic> is the maximal end-to-end communication delay). In our testbed, which runs at roughly 100 kHz, this amounts to less than 12 s. For a system running at GHz speed, this translates to about a millisecond. We also observed that the deterministic stabilization mechanism designed for more benign conditions operates as expected, recovering nodes by about two orders of magnitude faster.</ce:para></ce:section><ce:section id="se0030" view="all"><ce:label>1.2</ce:label><ce:section-title id="st0060">Organization of the article</ce:section-title><ce:para id="pr0140" view="all">In the next section, we summarize the obstacles and design goals that need to be considered for clock synchronization in our setting; we also introduce the basic building blocks assumed in <ce:cross-ref refid="br0130" id="crf0290">[13]</ce:cross-ref>, which perform typical operations used by fault-tolerant synchronization algorithms. Section <ce:cross-ref refid="se0140" id="crf0300">3</ce:cross-ref> introduces the formal model, alongside illustrating examples and proofs of some basic properties. Subsequently, in Section <ce:cross-ref refid="se0240" id="crf0310">4</ce:cross-ref> we cast the modules informally discussed earlier in our formal framework, and interpret nodes, protocols, and the synchronization problem as modules as well. In Section <ce:cross-ref refid="se0270" id="crf0320">5</ce:cross-ref>, we move on to the description of the algorithm from <ce:cross-ref refid="br0130" id="crf0330">[13]</ce:cross-ref> in terms of this framework. We provide high-level intution on the purpose of its various components and summarize the main statements proved in <ce:cross-ref refid="br0130" id="crf0340">[13]</ce:cross-ref>. Section <ce:cross-ref refid="se0360" id="crf0350">6</ce:cross-ref> follows up with presenting our implementations of the basic modules specified in Section <ce:cross-ref refid="se0130" id="crf0360">2.2</ce:cross-ref>, including the HSTM. In this context, we will also cover our efforts to minimize the probability for metastable upsets. In Section <ce:cross-ref refid="se0580" id="crf0370">7</ce:cross-ref> we describe the testbed setup, the experiments, and their results. Finally, in Section <ce:cross-ref refid="se0650" id="crf0380">8</ce:cross-ref> we evaluate to what extent our design goals are met and give an outlook on future work.</ce:para></ce:section></ce:section><ce:section id="se0040" view="all"><ce:label>2</ce:label><ce:section-title id="st0070">On-chip clock synchronization</ce:section-title><ce:para id="pr0150" view="all">Our goal is to design a scalable hardware clock generation scheme that is resilient to arbitrary transient and permanent faults and carefully minimizes the risk of metastability. We will now discuss our objectives in more detail and explain why tackling them in conjunction proves to be much harder than achieving them individually.</ce:para><ce:para id="pr0160" view="all">In accordance with standard notions, in the following we will refer to clock domains as <ce:italic>nodes</ce:italic>, as they represent the smallest "independent" algorithmic building block we use. This is to be understood in the sense that we consider a node faulty if any one of its components is faulty, and non-faulty otherwise (irrespectively of whether other nodes behave correctly or not). Denoting by <mml:math altimg="si6.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> the set <mml:math altimg="si7.gif" overflow="scroll"><mml:mo stretchy="false">{</mml:mo><mml:mi>k</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mi>i</mml:mi><mml:mo>â©½</mml:mo><mml:mi>k</mml:mi><mml:mo>â©½</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math>, ultimately, each correct node <mml:math altimg="si8.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> must at all times <ce:italic>t</ce:italic> output a (discrete) <ce:italic>logical clock</ce:italic> <mml:math altimg="si9.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math> that fulfills certain properties despite the aforementioned obstacles; most obviously, we strive for minimizing <mml:math altimg="si10.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">}</mml:mo></mml:math>.</ce:para><ce:section id="se0050" view="all"><ce:label>2.1</ce:label><ce:section-title id="st0080">Challenges</ce:section-title><ce:section id="se0060" view="all"><ce:label>2.1.1</ce:label><ce:section-title id="st0090">Inexact local clocks and unknown message delays</ce:section-title><ce:para id="pr0170" view="all">When synchronizing clocks, one needs to face that clocks are not perfect and that it cannot be exactly determined how much time it takes to communicate a clock reading. These fundamental uncertainties entail that synchronization can never be perfectly accurate and must be an ongoing process <ce:cross-ref refid="br0140" id="crf0390">[14]</ce:cross-ref>. We formalize these notions as follows.</ce:para><ce:para id="pr0180" view="all">Each node <mml:math altimg="si8.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> can make use of <ce:italic>local clocks</ce:italic> that are inexact and therefore drift (i.e., do not progress at the same rate). Since we are only concerned with synchronizing clock domains with each other, we do not care about Newtonian time. Instead, we describe the system in terms of a <ce:italic>reference time</ce:italic> satisfying that any correctly operating clock progresses at a speed between 1 and some constant <ce:italic>Ï</ce:italic> with respect to the reference time <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. A (local) clock <mml:math altimg="si12.gif" overflow="scroll"><mml:mi>C</mml:mi><mml:mo>:</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> that is <ce:italic>correct</ce:italic> during a period of reference time <mml:math altimg="si13.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> guarantees that â<ce:italic>t</ce:italic>, <mml:math altimg="si14.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math>, <mml:math altimg="si15.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>: <mml:math altimg="si16.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo>â©½</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â©½</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> (in particular, <ce:italic>C</ce:italic> is continuous and strictly increasing during <mml:math altimg="si17.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math>).<ce:cross-ref refid="fn0040" id="crf0400"><ce:sup loc="post">4</ce:sup></ce:cross-ref><ce:footnote id="fn0040"><ce:label>4</ce:label><ce:note-para id="np0060" view="all">We use real-valued, unbounded clocks here to simplify the presentation. It will later become clear that the algorithm can indeed operate with discrete bounded clocks, as it does not need to access absolute clock values, but rather approximately measures bounded differences in time.</ce:note-para></ce:footnote> In contrast to many "traditional" synchronization settings, we would like to tolerate quite large relative clock drifts <mml:math altimg="si18.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:math> of up to about 20%, as accurate and stable oscillators are not available in a System-on-Chip (SoC) at low costs. Tolerating such large drifts permits to utilize very simple ring oscillators even under heavily varying conditions (temperature, supply voltage, etc.) <ce:cross-ref refid="br0150" id="crf0410">[15]</ce:cross-ref>.</ce:para><ce:para id="pr0190" view="all">Node <ce:italic>i</ce:italic> communicates with node <ce:italic>j</ce:italic> via an <ce:italic>abstract</ce:italic> FIFO <ce:italic>channel</ce:italic> that (if correct) continuously makes <ce:italic>i</ce:italic>'s state available to <ce:italic>j</ce:italic>, albeit delayed by an unknown value between 0 and the <ce:italic>maximal delay d</ce:italic>. We denote the input port of the channel from node <ce:italic>i</ce:italic> to node <ce:italic>j</ce:italic> by <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and its output port by <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. Node <ce:italic>i</ce:italic> also loops back its own state to itself on a channel. The time required for computations that are triggered by some communicated information is accounted for by <ce:italic>d</ce:italic> as well, i.e., <ce:italic>d</ce:italic> is an end-to-end delay.<ce:cross-ref refid="fn0050" id="crf0420"><ce:sup loc="post">5</ce:sup></ce:cross-ref><ce:footnote id="fn0050"><ce:label>5</ce:label><ce:note-para id="np0070" view="all">This is the reason why we speak of an abstract channel. We will later introduce the (physical) channels that essentially represent the wires on the chip; the maximal delay <ce:italic>d</ce:italic> is then the sum of the maximal delay of the physical channels and the computing elements of the nodes.</ce:note-para></ce:footnote> For the sake of a straightforward presentation, throughout this article we assume that all channels from node <ce:italic>i</ce:italic> to some node <ce:italic>j</ce:italic> are part of node <ce:italic>i</ce:italic>, i.e., faults of the channel are mapped to the sender node. We remark, however, that a more detailed treatment (as e.g. in <ce:cross-ref refid="br0160" id="crf0430">[16]</ce:cross-ref>) can be beneficial and is supported by the modeling framework underlying this work.</ce:para></ce:section><ce:section id="se0070" view="all"><ce:label>2.1.2</ce:label><ce:section-title id="st0100">Transient faults</ce:section-title><ce:para id="pr0200" view="all">Increasing soft error rates of modern VLSI circuits <ce:cross-ref refid="br0170" id="crf0440">[17]</ce:cross-ref>, originating in ionizing radiation <ce:cross-refs refid="br0180 br0190 br0200 br0210" id="crs0030">[18-21]</ce:cross-refs>, cross-talk, and ground bouncing <ce:cross-refs refid="br0220 br0230" id="crs0040">[22,23]</ce:cross-refs>, make it vital to allow for recovery from transient faults. The most extreme transient fault scenario is that the entire system undergoes a period of an unbounded number of arbitrary faults.<ce:cross-ref refid="fn0060" id="crf0450"><ce:sup loc="post">6</ce:sup></ce:cross-ref><ce:footnote id="fn0060"><ce:label>6</ce:label><ce:note-para id="np0080" view="all">The only restriction is that transient faults do not affect the non-volatile memory (and in particular not the algorithm itself), as this would induce a permanent fault.</ce:note-para></ce:footnote> Algorithms that are capable of re-establishing regular operation after transient faults cease are called <ce:italic>self-stabilizing</ce:italic> <ce:cross-ref refid="br0240" id="crf0460">[24]</ce:cross-ref>. This requirement is equivalent to stating that, if the system is fault-free, the algorithm converges to a valid state from an arbitrary initial configuration within a bounded time; we refer to this period as <ce:italic>stabilization time</ce:italic>. Due to this equivalency, self-stabilizing algorithms have the additional advantage of requiring no initialization, i.e., a self-stabilizing clocking system does not need to be booted with any initial synchrony.</ce:para><ce:para id="pr0210" view="all">For self-stabilizing algorithms, stabilization time is obviously an important quality measure. As the fundamental time unit of the system is <ce:italic>d</ce:italic>, i.e., the time span it takes to effectively communicate and process any piece of information with certainty, guarantees on the stabilization time are clearly always some multiple of <ce:italic>d</ce:italic>; the respective prefactor typically is a function of the number of nodes <ce:italic>n</ce:italic>, the number of sustainable or actual permanent faults, and the clock drift <ce:italic>Ï</ce:italic>. In our context, the stabilization time is not only of relevance to whether waiting for stabilization is bearable in terms of the down-time of the system; it is important to understand that a failure of the synchronization layer will quickly result in incoherencies of operations on higher layers, entailing the threat of data loss or corruption, potentially without any possibility of future recovery.</ce:para><ce:para id="pr0220" view="all">Because of the need of maintaining accurate synchronization in the presence of drifting clocks, quite a few clock synchronization algorithms are self-stabilizing. In fact, conventional clock trees <ce:cross-ref refid="br0030" id="crf0470">[3]</ce:cross-ref> are trivially self-stabilizing-after all, they simply disseminate the signal of a single oscillator throughout a chip. However, they cannot cope with any <ce:italic>permanent</ce:italic> fault of the clock source or the network distributing the clock. Similarly, one could easily make a system comprising several clock sources self-stabilizing, by picking one master clock and letting all other clocks synchronize to it. Again, this simplistic approach will fail if the master or its outgoing communication channels become faulty.</ce:para></ce:section><ce:section id="se0080" view="all"><ce:label>2.1.3</ce:label><ce:section-title id="st0110">Permanent faults</ce:section-title><ce:para id="pr0230" view="all">Sustaining functionality in the presence of permanent faults necessitates redundancy. More precisely, it is known that tolerating <ce:italic>f</ce:italic> worst-case faults (traditionally called Byzantine faults in this context) is impossible if <mml:math altimg="si21.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>â©½</mml:mo><mml:mn>3</mml:mn><mml:mi>f</mml:mi></mml:math> (without cryptographic assumptions) <ce:cross-refs refid="br0140 br0250" id="crs0050">[14,25]</ce:cross-refs>.<ce:cross-ref refid="fn0070" id="crf0480"><ce:sup loc="post">7</ce:sup></ce:cross-ref><ce:footnote id="fn0070"><ce:label>7</ce:label><ce:note-para id="np0090" view="all">Allowing cryptography would still necessitate <mml:math altimg="si22.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>2</mml:mn><mml:mi>f</mml:mi></mml:math> <ce:cross-refs refid="br0260 br0270" id="crs0060">[26,27]</ce:cross-refs>; we hence discard this option due to the additional complexity incurred.</ce:note-para></ce:footnote> Hence, natural questions are whether assuming worst-case failures is too demanding and whether the fault model could be relaxed in order to circumvent the lower bound. Unfortunately, examining the lower bound reveals that it originates in the ability of a faulty node to communicate conflicting information to different receivers. This behavior can easily emerge from a faulty output stage in a circuit: If an analog voltage level in between the range for a valid "1" and that for a valid "0" is evaluated (for example due to a timing fault, a glitch on a signal line, or a defective driver output) by more than one receiver, some might read a "1" while others read a "0". Note that this is a fundamental problem, as mapping the continuous range of possible voltages to discrete binary values entails that there is always a critical threshold close to which it is impossible to ensure that all receivers observe the same binary value. It is still an option to argue about the <ce:italic>spatial distribution</ce:italic> of (permanent) faults within the system, though, as we discuss in Section <ce:cross-ref refid="se0650" id="crf0490">8</ce:cross-ref>. However, in this article, we consider the worst case, which also motivates the choice of full connectivity<ce:cross-ref refid="fn0080" id="crf0500"><ce:sup loc="post">8</ce:sup></ce:cross-ref><ce:footnote id="fn0080"><ce:label>8</ce:label><ce:note-para id="np0100" view="all">We are aware that this constitutes a serious scalability issue; again we refer to the discussion in Section <ce:cross-ref refid="se0650" id="crf0510">8</ce:cross-ref>.</ce:note-para></ce:footnote> between the nodes due to a respective impossibility result <ce:cross-refs refid="br0260 br0270" id="crs0070">[26,27]</ce:cross-refs>.</ce:para><ce:para id="pr0240" view="all">This lower bound entails that, due to their low connectivity, most existing distributed clock generation schemes <ce:cross-refs refid="br0110 br0120 br0280 br0290" id="crs0080">[11,12,28,29]</ce:cross-refs> cannot cope with a reasonable number of worst-case faults. Nonetheless, dealing with up to <ce:italic>f</ce:italic> faults in a fully connected system of <mml:math altimg="si23.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>3</mml:mn><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> nodes is-at least from a high-level perspective-still fairly easy, provided that we can rely on synchronization already being established. To illustrate this, consider the simple state machine of a node given in <ce:cross-ref refid="fg0010" id="crf0520">Fig. 1</ce:cross-ref><ce:float-anchor refid="fg0010"/>.</ce:para><ce:para id="pr0250" view="all">In the figure, the node's states are depicted in circles and the feasible state transitions are indicated by arrows. A node switches, for example, from state <ce:italic>ready</ce:italic> to state <ce:italic>propose</ce:italic> if the condition next to the arrow is satisfied. In this example, this means that either <mml:math altimg="si24.gif" overflow="scroll"><mml:mn>3</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math> time has passed on its local clock since it switched to state <ce:italic>ready</ce:italic> or its incoming channels (including its loop-back channel) showed at least <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> other nodes in state <ce:italic>propose</ce:italic> since it switched to state <ce:italic>ready</ce:italic>. This behavior is realized by each node <mml:math altimg="si8.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> having (binary) memory flags <mml:math altimg="si26.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="italic">propose</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> for each node <mml:math altimg="si27.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>: Node <ce:italic>i</ce:italic>'s flag <mml:math altimg="si26.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="italic">propose</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> is set to 1 at a time <ce:italic>t</ce:italic> iff <mml:math altimg="si28.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mi mathvariant="italic">propose</mml:mi></mml:mrow></mml:math> and the flag was in state 0 before. The flag is reset to 0 on node <ce:italic>i</ce:italic>'s state transition to <ce:italic>ready</ce:italic> (in the figure indicated by the rectangular box on the respective arrow). Deciding whether the transition condition is satisfied at time <ce:italic>t</ce:italic> thus boils down to checking whether the timeout condition is satisfied or at least <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> of the <ce:italic>propose</ce:italic> memory flags are in state 1.</ce:para><ce:para id="pr0260" view="all">Now assume that each node runs a copy of this state machine, and at least <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> non-faulty nodes enter state <ce:italic>increase</ce:italic> during some time window <mml:math altimg="si29.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. As local clocks run at speeds between 1 and <ce:italic>Ï</ce:italic>, all nodes will switch to state <ce:italic>ready</ce:italic> during <mml:math altimg="si30.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Hence, at the time when a node switches to <ce:italic>ready</ce:italic>, the delayed state information on the channels will not show non-faulty nodes in state <ce:italic>propose</ce:italic> any more. Therefore, no non-faulty node will switch to <ce:italic>propose</ce:italic> again due to memorizing <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> nodes (at least one of which must be non-faulty) in state <ce:italic>propose</ce:italic> before the first non-faulty node switches to <ce:italic>propose</ce:italic>. Thus, the latter must happen because <mml:math altimg="si24.gif" overflow="scroll"><mml:mn>3</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math> local time passed on a local clock, which takes at least until time <mml:math altimg="si31.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi><mml:mo>&gt;</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi></mml:math>. By this time, all nodes will have switched to <ce:italic>ready</ce:italic>. This implies that at the time when the first node switches to <ce:italic>increase</ce:italic> again (which eventually happens because all <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> non-faulty nodes switch to <ce:italic>propose</ce:italic>), all nodes will already have switched to <ce:italic>ready</ce:italic>. Given that <mml:math altimg="si23.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>3</mml:mn><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math>, we have that <mml:math altimg="si32.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>f</mml:mi><mml:mo>â©¾</mml:mo><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math>, i.e., if at <ce:italic>some</ce:italic> non-faulty node <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> channels show state <ce:italic>propose</ce:italic>, <ce:italic>any</ce:italic> node will observe <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> channels in this state (though due to delayed communication maybe not at exactly the same instance in time). This implies that at most <ce:italic>d</ce:italic> time after the first node switched to <ce:italic>increase</ce:italic> again, all non-faulty nodes have switched to <ce:italic>propose</ce:italic>. Another <ce:italic>d</ce:italic> time later, all <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> non-faulty nodes will have become aware of this and have switched to <ce:italic>increase</ce:italic>, i.e., within a time window of 2<ce:italic>d</ce:italic>. Repeating this reasoning inductively and assuming that the nodes increase their logical clocks (that initially are 0) by 1 whenever they switch to <ce:italic>increase</ce:italic>, well-synchronized logical clocks are obtained: The maximum difference in time between any two correct nodes performing their <ce:italic>k</ce:italic>th clock tick, the <ce:italic>skew</ce:italic>, is at most 2<ce:italic>d</ce:italic> for the above algorithm.</ce:para><ce:para id="pr0270" view="all">A variation of this simple technique <ce:cross-ref refid="br0300" id="crf0530">[30]</ce:cross-ref> is known for long and a closely related approach called DARTS has been implemented in hardware <ce:cross-refs refid="br0310 br0320" id="crs0090">[31,32]</ce:cross-refs>. However, all these algorithms are not self-stabilizing. In fact, even if clocks would not drift, the delay <ce:italic>d</ce:italic> was arbitrarily small, and there was only a single faulty node (i.e., even if we allow for <mml:math altimg="si33.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>1</mml:mn></mml:math>, only one node is actually faulty), they still would not stabilize.</ce:para><ce:para id="pr0280" view="all">To see this for the algorithm given in <ce:cross-ref refid="fg0010" id="crf0540">Fig. 1</ce:cross-ref>, first consider the following execution with <mml:math altimg="si34.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math>, part of which is depicted in <ce:cross-ref refid="fg0020" id="crf0550">Fig. 2</ce:cross-ref><ce:float-anchor refid="fg0020"/>. The correct nodes are split evenly, into three subsets <mml:math altimg="si35.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si36.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">}</mml:mo></mml:math>, of size <ce:italic>f</ce:italic>. Set <mml:math altimg="si37.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> initially is in state <ce:italic>ready</ce:italic>, with all memory flags corresponding to nodes in <mml:math altimg="si38.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> in state 1 and all other flags in state 0. The nodes in <mml:math altimg="si39.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si38.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> are in state <ce:italic>increase</ce:italic>, with the timers of nodes in <mml:math altimg="si39.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> having progressed halfway towards expiring and the timers in <mml:math altimg="si38.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> just started (i.e., these nodes just left <ce:italic>propose</ce:italic>), and their <ce:italic>propose</ce:italic> signals are memorized by nodes in <mml:math altimg="si37.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>. Just when the nodes in <mml:math altimg="si39.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> are about to switch to <ce:italic>ready</ce:italic>, the faulty node sends <ce:italic>propose</ce:italic> signals to the nodes in <mml:math altimg="si37.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>, causing them to switch to <ce:italic>propose</ce:italic>. They will send <ce:italic>propose</ce:italic> signals, once receiving them memorize <mml:math altimg="si40.gif" overflow="scroll"><mml:mn>2</mml:mn><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>=</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> nodes in state <ce:italic>propose</ce:italic>, and thus proceed to state <ce:italic>increase</ce:italic>. However, the nodes in <mml:math altimg="si39.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> will still observe the <ce:italic>propose</ce:italic> signals of the nodes in <mml:math altimg="si37.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> <ce:italic>after</ce:italic> resetting their memory flags upon switching to <ce:italic>ready</ce:italic>. Thus, we end up in the same situation, except that <mml:math altimg="si35.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> (indices modulo 3) takes the role of <mml:math altimg="si41.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>. Repetition yields an execution that never stabilizes and has 3 sets of grossly desynchronized nodes that are not faulty. This execution can be generalized to <mml:math altimg="si42.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mi>k</mml:mi><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> for integers <mml:math altimg="si43.gif" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>3</mml:mn></mml:math>: we split the correct nodes in <ce:italic>k</ce:italic> sets of size <ce:italic>f</ce:italic> and make them proceed equidistantly spread in time through the cycle. The difference is that now more than one group will linger in states <ce:italic>ready</ce:italic> or <ce:italic>propose</ce:italic> upon arrival of the next; the crucial point is that the single faulty node retains control over when groups proceed to state <ce:italic>increase</ce:italic>. The cases <mml:math altimg="si44.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mi>k</mml:mi><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>2</mml:mn></mml:math> and <mml:math altimg="si45.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mi>k</mml:mi><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn></mml:math> require more involved constructions; it should be intuitive, though, that with 2 actually failing nodes the above construction can be modified to operate with one or two of the sets containing <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> nodes.</ce:para></ce:section><ce:section id="se0090" view="all"><ce:label>2.1.4</ce:label><ce:section-title id="st0120">Combining transient and permanent faults</ce:section-title><ce:para id="pr0290" view="all">Combining self-stabilization and resilience to permanent faults results in much more robust systems. Both properties synergize in that, as long as at all times there is some sufficiently large set (not necessarily the same!) of nodes that is non-faulty, an arbitrary number of transient faults is transparently masked, i.e., the system remains operational even though over time each individual component may repeatedly undergo transient failures and recover from them. This drastically increases the mean time until overall system failure: In a system that is not resilient to permanent faults, any fault will result in an immediate breakdown of guaranteed properties, whereas a system that is not self-stabilizing will fail (and might not recover without an external reboot) once the sum of faults exceeds one third of the nodes.<ce:cross-ref refid="fn0090" id="crf0560"><ce:sup loc="post">9</ce:sup></ce:cross-ref><ce:footnote id="fn0090"><ce:label>9</ce:label><ce:note-para id="np0110" view="all">One could compromise by guaranteeing that nodes recover in bounded time, provided that the number of faults is never overwhelming. In fact, the algorithm presented in this article has the property that in this case nodes will recover faster and deterministically (in contrast to the slower, probabilistic stabilization from arbitrary system states). However, sacrificing stabilization from arbitrary states will not reduce the complexity of the algorithm significantly, and theory strongly indicates that the respective gain is limited to a constant factor in general.</ce:note-para></ce:footnote></ce:para><ce:para id="pr0300" view="all">There is a considerable body of work on distributed synchronization algorithms that are self-stabilizing as well as resilient to permanent faults. However, until recently, there has been no solution worth considering for hardware implementation. Known algorithms exhibit a prohibitively large communication complexity (i.e., nodes send <mml:math altimg="si46.gif" overflow="scroll"><mml:mi>Î©</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> bits over each channel in constant time) <ce:cross-refs refid="br0330 br0340" id="crs0100">[33,34]</ce:cross-refs>, incur an exponential stabilization time <ce:cross-ref refid="br0350" id="crf0570">[35]</ce:cross-ref>, require exponentially small clock drifts <ce:cross-ref refid="br0360" id="crf0580">[36]</ce:cross-ref>, or require much stronger assumptions on the system's behavior <ce:cross-ref refid="br0370" id="crf0590">[37]</ce:cross-ref>. Recently, we proposed an approach that does not suffer from such drawbacks <ce:cross-refs refid="br0130 br0380 br0390" id="crs0110">[13,38,39]</ce:cross-refs>, whose implementation is the subject of this work.</ce:para></ce:section><ce:section id="se0100" view="all"><ce:label>2.1.5</ce:label><ce:section-title id="st0130">Metastability</ce:section-title><ce:para id="pr0310" view="all">In our specific setting, minimizing the potential for metastability is particularly demanding. Metastability results from violating a stateful circuit's input timing constraints, e.g., by changing the data input of a flip-flop at the time of the clock transition. While this can be safely avoided during normal operation, a faulty node might exhibit arbitrary timing and hence cause such a violation. As this can never be prevented in the first place if worst-case faults are considered, it is mandatory to guard the channels against propagating metastability, e.g. by using synchronizers. In order to minimize the required length of synchronizer chains, decreasing latency and area consumption (the latter also on higher layers of the system), however, it is beneficial to avoid the potential for upsets by construction wherever possible.</ce:para><ce:para id="pr0320" view="all">Apart from the (unavoidable) threat originating from faulty nodes, safely preventing timing violations is hindered by the lack of a common time base during the stabilization phase after an excessive number of transient faults. It has been shown that it is impossible to guarantee with certainty that no metastable upsets occur if the system is in an arbitrary initial state, even if all nodes adhere to the protocol <ce:cross-ref refid="br0400" id="crf0600">[40]</ce:cross-ref>. Careful design is thus required in order to minimize the probability of upsets during stabilization, in particular since such upsets might obstruct the stabilization process.</ce:para><ce:para id="pr0330" view="all">Once the system stabilized, i.e., the non-faulty nodes are synchronized, the algorithm can use this synchronization to structure communication in a way that entirely avoids metastable upsets caused by non-faulty nodes. Thus, in the absence of faults, we require that the system operates metastability-free. Note that even this seemingly simple task is not trivial, as one cannot employ the classical wait-for-all paradigm: Doing so would imply that just a single non-responsive node would cause the entire system to deadlock. Therefore, when depending on other nodes in the decision to take a state transition, it is necessary to wait for at most <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> signals. Safely reading signals thus cannot rely on handshaking, but must be based on suitable monotonicity and/or timing conditions (guaranteed by the use of memory flags and local clocks, for example). The bounded-delay "interlocking condition" used in DARTS <ce:cross-ref refid="br0320" id="crf0610">[32]</ce:cross-ref> and the simple algorithm in <ce:cross-ref refid="fg0010" id="crf0620">Fig. 1</ce:cross-ref> are showcases for such techniques.</ce:para></ce:section><ce:section id="se0110" view="all"><ce:label>2.1.6</ce:label><ce:section-title id="st0140">Operating frequency vs. clock precision</ce:section-title><ce:para id="pr0340" view="all">In order to be practical, the logical clocks need to run at a frequency in the GHz range. While one could obviously utilize frequency multiplication to achieve this goal, this is not straightforward to build in the self-stabilizing context. After all, clock multipliers involve complex devices like phase-locked loops and are hence not obviously self-stabilizing. Moreover, for a fixed guaranteed skew (of say 2<ce:italic>d</ce:italic>), naive frequency amplification also increases the logical <ce:italic>clock imprecision</ce:italic> <mml:math altimg="si47.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">}</mml:mo></mml:math> by the scaling factor, which may adversely affect certain services. For example, the size of the FIFO buffers used for inter-domain communication in <ce:cross-ref refid="br0100" id="crf0630">[10]</ce:cross-ref> depends on the clock imprecision and must hence be adapted accordingly. On the other hand, by dividing frequencies, it is clearly possible to guarantee that <mml:math altimg="si48.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">}</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math>. Therefore, it is an important design goal to minimize clock imprecision while at the same time maximizing the frequency at which clocks run. Naturally, this becomes much more involved due to the design goals already presented.</ce:para></ce:section><ce:section id="se0120" view="all"><ce:label>2.1.7</ce:label><ce:section-title id="st0150">Scalability</ce:section-title><ce:para id="pr0350" view="all">Being able to meet all the above design goals is meaningless if one cannot control the amount of resources devoted to the task of clock generation. Pivotal issues are the following:<ce:list id="ls0020"><ce:list-item id="li0060"><ce:label>â¢</ce:label><ce:para id="pr0360" view="all"><ce:bold>Area consumption:</ce:bold> The chip area used by the components of the synchronization algorithm decomposes into the area consumed by the nodes and their interconnections. The former can be captured by the <ce:italic>gate complexity</ce:italic>, i.e., the number of (constant fan-in) gates required to perform the algorithm's computations. The latter significantly depends on the chip layout, which is highly application-dependent and hence outside our scope of control. It is clear, however, that the number of channels and their bandwidth play a crucial role.</ce:para></ce:list-item><ce:list-item id="li0070"><ce:label>â¢</ce:label><ce:para id="pr0370" view="all"><ce:bold>Communication complexity:</ce:bold> Apart from whether two nodes are connected or not, it is of interest how many wires are required. This is well-represented by the <ce:italic>bit complexity</ce:italic> of an algorithm, i.e., the number of bits it exchanges per time unit between communication partners. Note that while the number of wires can be reduced by means of time division, this will require additional memory and computational resources on the receiver's side and increase the communication delay. In any case, it is highly desirable to devise algorithms of (small) constant bit complexity. Moreover, broadcasting the same information to all nodes instead of different information to different receivers is to be preferred, as it allows us to use communication buses.</ce:para></ce:list-item><ce:list-item id="li0080"><ce:label>â¢</ce:label><ce:para id="pr0380" view="all"><ce:bold>Stabilization time:</ce:bold> For reasons stated earlier, we would like to minimize the stabilization time. In particular, it is not good enough to know that an algorithm eventually stabilizes, as the required time might be well above what makes the algorithm self-stabilizing in any practical sense.</ce:para></ce:list-item><ce:list-item id="li0090"><ce:label>â¢</ce:label><ce:para id="pr0390" view="all"><ce:bold>Resilience:</ce:bold> The number <ce:italic>f</ce:italic> of faults that can be concurrently sustained without losing synchronization or the capability to stabilize should grow with system size, as otherwise a larger system will suffer from more frequent outages. Note that while we must accept that stabilization is a random process (due to the unavoidable probability of metastable upsets), we demand that a system that is stable will always remain so as long as there are not too many faults (including upsets). As mentioned earlier, a lower bound shows that always <mml:math altimg="si1.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn></mml:math>, giving a precise meaning to "too many" here.</ce:para></ce:list-item><ce:list-item id="li0100"><ce:label>â¢</ce:label><ce:para id="pr0400" view="all"><ce:bold>Delays:</ce:bold> As the maximal delay <ce:italic>d</ce:italic> accounts both for the delay incurred by communication as well as computation, it is vital to minimize both. Notwithstanding the fact that the communication delay and computing speed is mostly determined by parameters outside our control (technology, spatial distances, number of nodes, etc.), minimizing the gate complexity and, in particular, the depth of the circuits implementing the nodes' algorithms (that determine the computing delays) is important.</ce:para></ce:list-item><ce:list-item id="li0110"><ce:label>â¢</ce:label><ce:para id="pr0410" view="all"><ce:bold>Metastability:</ce:bold> In larger and faster systems, the number of events per time unit that could cause metastable upsets is obviously larger. Therefore, it is vital to safely exclude metastability from occurring during regular operation by construction.<ce:cross-ref refid="fn0100" id="crf0640"><ce:sup loc="post">10</ce:sup></ce:cross-ref><ce:footnote id="fn0100"><ce:label>10</ce:label><ce:note-para id="np0120" view="all">Note that in this regard our approach is superior to standard GALS systems using synchronizers, where the risk of metastability is immanent (at every clock transition) also in normal operation.</ce:note-para></ce:footnote> We admit metastability only during rare exceptional phases of system operation where it cannot be avoided in principle, like during stabilization or in case of faults. As the probabilities for metastable upsets are hard to quantify even in a final product, we do not use a "hard" measure here.<ce:cross-ref refid="fn0110" id="crf0650"><ce:sup loc="post">11</ce:sup></ce:cross-ref><ce:footnote id="fn0110"><ce:label>11</ce:label><ce:note-para id="np0130" view="all">It is worth mentioning, though, that the asymptotic increase in the number of events per time unit that could cause metastable upsets is clearly at least polynomial in <ce:italic>n</ce:italic>. As synchronizer chains decrease the probability of upsets exponentially, the required length of synchronizer chains will asymptotically grow as <mml:math altimg="si49.gif" overflow="scroll"><mml:mi>Î©</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, increasing the system cost and (effectively) decreasing its operational frequency.</ce:note-para></ce:footnote></ce:para></ce:list-item><ce:list-item id="li0120"><ce:label>â¢</ce:label><ce:para id="pr0420" view="all"><ce:bold>Connectivity:</ce:bold> In order to facilitate efficient placement and routing on a chip, it is vital to ensure that the communication network is sparse. Also, a sparse network will consume less area and is beneficial to fault containment.<ce:cross-ref refid="fn0120" id="crf0660"><ce:sup loc="post">12</ce:sup></ce:cross-ref><ce:footnote id="fn0120"><ce:label>12</ce:label><ce:note-para id="np0140" view="all">If a single event such as e.g. an ionizing particle hit can render multiple nodes faulty, even tolerating a large number of faulty nodes is of little use w.r.t. the overall resilience of the system.</ce:note-para></ce:footnote> Tackling this issue is subject to our future work and hence beyond the scope of this article, however.</ce:para></ce:list-item><ce:list-item id="li0130"><ce:label>â¢</ce:label><ce:para id="pr0430" view="all"><ce:bold>Clock size:</ce:bold> If the logical clocks have too few bits, i.e., overflow too frequently, they might be unsuitable for the application logic of the SoC. The algorithm we present in this article can in principle provide clocks of arbitrary bounded size. However, its stabilization time would grow linearly with the maximum clock value once we scale above 8-bit clocks. In a recent publication, we show how to construct larger clocks efficiently <ce:cross-ref refid="br0410" id="crf0670">[41]</ce:cross-ref>.</ce:para></ce:list-item></ce:list></ce:para></ce:section></ce:section><ce:section id="se0130" view="all"><ce:label>2.2</ce:label><ce:section-title id="st0160">Typical modules for clock synchronization protocols</ce:section-title><ce:para id="pr0440" view="all">We next introduce the basic modules that are assumed by the model used in <ce:cross-ref refid="br0130" id="crf0680">[13]</ce:cross-ref>. We first give an intuitive description of the required modules. Subsequently, we introduce a novel formal framework for specifying self-stabilizing fault-tolerant modules and specify our basic modules in this framework. Any implementation satisfying this specification can be plugged into the high-level algorithm in order to yield a system guaranteeing the properties proved in <ce:cross-ref refid="br0130" id="crf0690">[13]</ce:cross-ref>.</ce:para><ce:para id="pr0450" view="all">We now list the building blocks beyond standard logic gates that will explicitly or implicitly be used by the algorithm presented in Section <ce:cross-ref refid="se0270" id="crf0700">5</ce:cross-ref>. Each of these building blocks computes output signals that are constrained by (the history of) its input signals. If the logic function implies an output transition in reaction to an input change, this transition is not required to occur immediately; it must occur within a known time bound, however. Given the time bounds for the individual modules and the connecting wires, one can compute the maximum delay <ce:italic>d</ce:italic>. Moreover, informally speaking, it must be avoided that a single change in the input(s) causes multiple transitions of the output signal, as this could undermine the high-level algorithm's logic. Note also that statefulness, i.e., any sort of memory (including positive feedback loops), bears the potential for metastable upsets and requires careful attention in order to ensure self-stabilization.<ce:cross-ref refid="fn0130" id="crf0710"><ce:sup loc="post">13</ce:sup></ce:cross-ref><ce:footnote id="fn0130"><ce:label>13</ce:label><ce:note-para id="np0150" view="all">In other words, the module must recover from arbitrary corruptions of its memory.</ce:note-para></ce:footnote> Purely combinational elements, on the other hand, differ in their ability to prevent metastable inputs from reaching the output under certain conditions.</ce:para><ce:para id="pr0460" view="all">Each node will be a union of state machines that communicate via channels (both among each other and with remote nodes) and are composed of standard logic gates and all other modules we describe below. <ce:cross-ref refid="fg0050" id="crf0720">Fig. 5</ce:cross-ref> depicts such a state machine.<ce:list id="ls0030"><ce:list-item id="li0140"><ce:label>â¢</ce:label><ce:para id="pr0470" view="all"><ce:bold>Communication channels.</ce:bold> We previously introduced the communication channels from node <ce:italic>i</ce:italic> to node <ce:italic>j</ce:italic> as abstract devices that convey the states with a delay of at most <ce:italic>d</ce:italic> that also accounts for computations. Viewed as a module, the (physical) communication channels do account for the time to communicate the state information only, whereas computations are performed by standard logic gates and the modules we will describe next. A communication channel of this type simply maps its input signal to its output signal. The reason why communication channels are nonetheless listed as modules here is that encoding a non-binary state signal in a glitch- and metastability-free manner is a non-trivial task, as in the absence of (reliable) synchrony both parallel and sequential communication present challenges. In our abstraction, this encoding is performed by the channel, which requires additional logic and thus potentially results in delays beyond the mere wire delays as well as the necessity to consider issues concerning metastability and self-stabilization.</ce:para></ce:list-item><ce:list-item id="li0150"><ce:label>â¢</ce:label><ce:para id="pr0480" view="all"><ce:bold>Memory flags.</ce:bold> These are just simple binary storage elements that can be <ce:italic>set</ce:italic> to 1 by means of one input signal and can be <ce:italic>reset</ce:italic> to 0 by a second input signal; their state is externally accessible via an output signal. Simply put, a memory flag just "remembers" which input signal was 1 most recently. In our algorithms, memory flags will be used to memorize wether an input signal from a remote node was in state 1 at some time after the most recent reset upon a state transition of one of the node's state machines (in <ce:cross-ref refid="fg0010" id="crf0730">Fig. 1</ce:cross-ref>, e.g., a node resets its <ce:italic>propose</ce:italic> flags when switching from <ce:italic>increase</ce:italic> to <ce:italic>ready</ce:italic>).</ce:para></ce:list-item><ce:list-item id="li0160"><ce:label>â¢</ce:label><ce:para id="pr0490" view="all"><ce:bold>Threshold gates.</ce:bold> Frequently, nodes will need to decide whether a certain threshold number (<mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> or <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>) of signals (or sets of signals) satisfy some Boolean predicate (e.g., the conditions for switching to <ce:italic>propose</ce:italic> and <ce:italic>increase</ce:italic> in <ce:cross-ref refid="fg0010" id="crf0740">Fig. 1</ce:cross-ref> involve such a threshold). A threshold gate takes the respective binary input signals and outputs 1 if the threshold is reached and 0 otherwise.</ce:para></ce:list-item><ce:list-item id="li0170"><ce:label>â¢</ce:label><ce:para id="pr0500" view="all"><ce:bold>Watchdog timers.</ce:bold> Watchdog timers are the nodes' sense for the progress of time. Each timer <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, where <ce:italic>T</ce:italic> in <mml:math altimg="si51.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> is a duration and <ce:italic>C</ce:italic> a clock, is associated with state <ce:italic>s</ce:italic> and is either <ce:italic>expired</ce:italic> (output 1) or <ce:italic>not expired</ce:italic> (output 0). The timer is <ce:italic>reset</ce:italic> to 0 when the node's state switches to <ce:italic>s</ce:italic> and will <ce:italic>expire</ce:italic> after <ce:italic>T</ce:italic> time has passed according to clock <ce:italic>C</ce:italic>, unless it is reset again beforehand. Hence, if it is reset at (reference) time <ce:italic>t</ce:italic>, it will expire at some time <mml:math altimg="si52.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>Ï</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>. For instance, the transition to <ce:italic>ready</ce:italic> in <ce:cross-ref refid="fg0010" id="crf0750">Fig. 1</ce:cross-ref> is triggered by a watchdog timer.</ce:para></ce:list-item><ce:list-item id="li0180"><ce:label>â¢</ce:label><ce:para id="pr0510" view="all"><ce:bold>Randomized watchdog timers.</ce:bold> A randomized watchdog timer is identical to a regular watchdog timer except that the duration <ce:italic>T</ce:italic> of the timeout is drawn from a (bounded) random distribution <mml:math altimg="si53.gif" overflow="scroll"><mml:mi mathvariant="script">D</mml:mi></mml:math> over <mml:math altimg="si51.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math>. That is, if randomized timer <mml:math altimg="si54.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">D</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is reset at time <ce:italic>t</ce:italic>, it will expire at time <mml:math altimg="si55.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>Ï</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, where <ce:italic>T</ce:italic> is drawn from <mml:math altimg="si53.gif" overflow="scroll"><mml:mi mathvariant="script">D</mml:mi></mml:math>. How this randomness is implemented subtly affects resilience and security properties of the system, see <ce:cross-ref refid="br0130" id="crf0760">[13]</ce:cross-ref> for a formal definition of the way randomness is to be employed. For the purpose of this article, we confine ourselves to pointing out that, essentially, we require that faulty nodes do not have access to the value <ce:italic>T</ce:italic> drawn from <mml:math altimg="si53.gif" overflow="scroll"><mml:mi mathvariant="script">D</mml:mi></mml:math> before time <mml:math altimg="si56.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0190"><ce:label>â¢</ce:label><ce:para id="pr0520" view="all"><ce:bold>State transition modules.</ce:bold> The algorithm does not demand zero-time state transitions. Nevertheless, it is non-trivial to ensure metastability-free state transitions and consistent memory states in our setting. On a transition from state <ce:italic>s</ce:italic> to state <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, the node needs to switch its state signal (i.e., the input to its outgoing communication channels) exactly once from <ce:italic>s</ce:italic> to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> and reset any memory flag that is to be reset upon transitioning from <ce:italic>s</ce:italic> to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. This is complicated because the condition under which the state transition occurs, a Boolean predicate over a blend of signals from incoming communication channels and local modules' outputs, may be satisfied for a brief period of time only, or a condition for switching to a different state <mml:math altimg="si58.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â³</mml:mo></mml:mrow></mml:msup></mml:math> might become satisfied at almost the same instant. Even worse, it may e.g. be required that memory flags whose output is part of a predicate expressing the condition for switching from <ce:italic>s</ce:italic> to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> are to be reset upon the transition to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. Resolving these issues is the purpose of a state transition module that controls the safe transition from one state to another.</ce:para></ce:list-item></ce:list></ce:para></ce:section></ce:section><ce:section id="se0140" view="all"><ce:label>3</ce:label><ce:section-title id="st0170">A formal modeling framework for self-stabilizing fault-tolerant circuits</ce:section-title><ce:para id="pr0530" view="all">In this section, we introduce a novel formal framework for specifying self-stabilizing fault-tolerant modules. It is a non-trivial extension of <ce:cross-refs refid="br0320 br0420" id="crs0120">[32,42]</ce:cross-refs> that allows us to rigorously express the properties related to self-stabilization as used in <ce:cross-ref refid="br0130" id="crf0770">[13]</ce:cross-ref>. Using this framework, we then give a precise formal specification of our basic modules' behavior.</ce:para><ce:section id="se0150" view="all"><ce:label>3.1</ce:label><ce:section-title id="st0180">Signals</ce:section-title><ce:para id="pr0540" view="all">We define (the trace of) a <ce:italic>signal</ce:italic> to be a timed event trace over a finite alphabet <mml:math altimg="si59.gif" overflow="scroll"><mml:mi mathvariant="double-struck">S</mml:mi></mml:math> of possible signal states: Formally, signal <mml:math altimg="si60.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">S</mml:mi><mml:mo>Ã</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. The elements of <ce:italic>Ï</ce:italic> are called <ce:italic>events</ce:italic>, and for each event <mml:math altimg="si61.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> we call <ce:italic>s</ce:italic> the <ce:italic>state of event</ce:italic> <mml:math altimg="si61.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> and <ce:italic>t</ce:italic> the <ce:italic>time of event</ce:italic> <mml:math altimg="si61.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Note that we allow for events <mml:math altimg="si61.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si62.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>Ï</mml:mi></mml:math>, where <mml:math altimg="si63.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, without having an event <mml:math altimg="si64.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â³</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>Ï</mml:mi></mml:math> with <mml:math altimg="si65.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â </mml:mo><mml:mi>s</mml:mi></mml:math> and <mml:math altimg="si66.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â³</mml:mo></mml:mrow></mml:msup><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. In this case, we call event <mml:math altimg="si67.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> <ce:italic>idempotent</ce:italic>. In general, a signal <ce:italic>Ï</ce:italic> is required to fulfill the following conditions:<ce:list id="ls0040"><ce:list-item id="li0200"><ce:label>(i)</ce:label><ce:para id="pr0550" view="all">From <mml:math altimg="si68.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>Ï</mml:mi></mml:math> and <mml:math altimg="si69.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>Ï</mml:mi></mml:math> follows that <mml:math altimg="si70.gif" overflow="scroll"><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0210"><ce:label>(ii)</ce:label><ce:para id="pr0560" view="all">For each time interval <mml:math altimg="si13.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> of finite length, the number of non-idempotent events in <ce:italic>Ï</ce:italic> with times within <mml:math altimg="si17.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> is finite.</ce:para></ce:list-item><ce:list-item id="li0220"><ce:label>(iii)</ce:label><ce:para id="pr0570" view="all">For any time <ce:italic>t</ce:italic>, there exists an event <mml:math altimg="si71.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>Ï</mml:mi></mml:math> with <mml:math altimg="si72.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â©½</mml:mo><mml:mi>t</mml:mi></mml:math>.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr0580" view="all">We say that <ce:italic>signal Ï switches to s</ce:italic> at time <ce:italic>t</ce:italic> iff event <mml:math altimg="si68.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>Ï</mml:mi></mml:math> is not idempotent. Due to property (ii), there is always a non-zero amount of time between two such events. These events describe when the corresponding physical signal undergoes an actual transition. Therefore, we define that signals <ce:italic>Ï</ce:italic> and <mml:math altimg="si73.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> are <ce:italic>equivalent</ce:italic>, iff they differ in idempotent events only, and identify all signals of an equivalence class. Each equivalence class <mml:math altimg="si74.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> contains a unique signal <mml:math altimg="si75.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub></mml:math> that contains an event for each time <mml:math altimg="si76.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. We identify this signal (and thus the entire class) with the function that maps each time <ce:italic>t</ce:italic> to the state <mml:math altimg="si77.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mi>s</mml:mi></mml:math> satisfying that <mml:math altimg="si78.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub></mml:math>. We call <mml:math altimg="si79.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math> the <ce:italic>state function</ce:italic> of signal <ce:italic>Ï</ce:italic>, and <mml:math altimg="si80.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> the <ce:italic>state of signal Ï at time t</ce:italic>. Note that since the state function of a signal <ce:italic>Ï</ce:italic> depends on <mml:math altimg="si74.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> only, we may add or remove idempotent events at will without changing the state function.</ce:para></ce:section><ce:section id="se0160" view="all"><ce:label>3.2</ce:label><ce:section-title id="st0190">Modules and executions</ce:section-title><ce:para id="pr0590" view="all">Each module comprises a (possibly empty) set of <ce:italic>input ports</ce:italic> and a (possibly empty) set of <ce:italic>output ports</ce:italic>. These sets must be disjoint, i.e., we do not allow a module's output to be identical to one of its inputs; it may be identical to the input port of another module, however. An <ce:italic>execution of ports P on interval</ce:italic> <mml:math altimg="si81.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> assigns a state to each port in <ce:italic>P</ce:italic> at any time in <ce:italic>I</ce:italic>. For convenience of notation, for any port <ce:italic>p</ce:italic>, we identify <ce:italic>p</ce:italic> and its state function whenever the respective execution is clear from the context. Moreover, we may omit the "on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>" for all executions for which <mml:math altimg="si83.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>=</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> when clear from the context. An <ce:italic>execution of module M on I</ce:italic> is an execution of <ce:italic>M</ce:italic>'s input and output ports on <ce:italic>I</ce:italic>. The <ce:italic>restriction of execution</ce:italic> <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> on <ce:italic>I</ce:italic> to <mml:math altimg="si85.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>I</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi>I</mml:mi></mml:math> is the restriction of all of <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>'s state functions to the interval <mml:math altimg="si86.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>I</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. Let <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> be an execution of ports <ce:italic>P</ce:italic> on <ce:italic>I</ce:italic>. Then the <ce:italic>restriction of execution</ce:italic> <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> on <ce:italic>I</ce:italic> to ports <mml:math altimg="si87.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi>P</mml:mi></mml:math> is the execution of ports <mml:math altimg="si88.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> on <ce:italic>I</ce:italic> with state functions equal to <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>'s state functions on <mml:math altimg="si88.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>.</ce:para><ce:para id="pr0600" view="all">Besides input and output ports, a module <ce:italic>M</ce:italic> further has a <ce:italic>module specification</ce:italic>. We allow two kinds of module specifications for a module <ce:italic>M</ce:italic>, distinguishing between <ce:italic>basic</ce:italic> and <ce:italic>compound</ce:italic> modules.</ce:para><ce:section id="se0170" view="all"><ce:section id="se0180" view="all"><ce:section-title id="st0200">Basic modules.</ce:section-title><ce:para id="pr0610" view="all">In this case, the module specification is a function <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> that, for all <ce:italic>I</ce:italic>, maps <ce:italic>every</ce:italic> execution of the module's input ports on <ce:italic>I</ce:italic> to a <ce:italic>set</ce:italic> of executions of the module's output ports on <ce:italic>I</ce:italic>. The intended meaning of <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is to map each and every conceivable execution of <ce:italic>M</ce:italic>'s input ports on <ce:italic>I</ce:italic> to the resulting possible reactions of <ce:italic>M</ce:italic> during the same time, which may be many different ones. For example, a module that may behave arbitrarily for some input execution <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> is specified by setting <mml:math altimg="si91.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> to be the set of <ce:italic>all</ce:italic> conceivable output executions. For a basic module <ce:italic>M</ce:italic> we say that execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> of <ce:italic>M</ce:italic> on some <ce:italic>I</ce:italic> is <ce:italic>feasible</ce:italic> iff <mml:math altimg="si92.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, where <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> are the restrictions of execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> to <ce:italic>M</ce:italic>'s input and output ports, respectively.</ce:para><ce:para id="pr0620" view="all">We require two properties for <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> to hold:<ce:list id="ls0050"><ce:list-item id="li0230"><ce:label>(i)</ce:label><ce:para id="pr0630" view="all"><ce:italic>Non-emptiness</ce:italic>: <mml:math altimg="si94.gif" overflow="scroll"><mml:mi>Î¦</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>â </mml:mo><mml:mo>â</mml:mo></mml:math> for all executions <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> of <ce:italic>M</ce:italic>'s input ports.</ce:para></ce:list-item><ce:list-item id="li0240"><ce:label>(ii)</ce:label><ce:para id="pr0640" view="all"><ce:italic>Properness</ce:italic>: Any restriction (in time) of a feasible execution of <ce:italic>M</ce:italic> is feasible.</ce:para></ce:list-item></ce:list> These properties are motivated by the facts that (i) any given input of a correctly operating module will produce some output and (ii) correct operation on a given time interval implies correct operation on any subinterval of this interval.</ce:para><ce:para id="pr0650" view="all"><ce:enunciation id="en0010"><ce:label>Example 3.1</ce:label><ce:para id="pr0660" view="all">A simple basic module is a (zero-time) <ce:italic>inverter</ce:italic> with (binary) input port <ce:italic>i</ce:italic>, (binary) output port <ce:italic>o</ce:italic>, and module specification <mml:math altimg="si95.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow></mml:msub></mml:math> defined by: For each interval <mml:math altimg="si81.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> and each execution <mml:math altimg="si96.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> of input port <ce:italic>i</ce:italic>, an execution <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> of output port <ce:italic>o</ce:italic> on <ce:italic>I</ce:italic> is in <mml:math altimg="si97.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff for all <mml:math altimg="si98.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi>I</mml:mi></mml:math> it holds that <mml:math altimg="si99.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>Â¬</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:enunciation> <ce:enunciation id="en0020"><ce:label>Example 3.2</ce:label><ce:para id="pr0670" view="all">As an example of a timed basic module, consider a <ce:italic>fixed-delay channel</ce:italic> with input port <ce:italic>i</ce:italic>, output port <ce:italic>o</ce:italic>, and delay <mml:math altimg="si100.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math>. Its module specification <mml:math altimg="si101.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">C</mml:mi></mml:mrow></mml:msub></mml:math> is defined by: For each interval <mml:math altimg="si102.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> and each execution <mml:math altimg="si96.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> of input port <ce:italic>i</ce:italic> on <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>, an execution <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> of output port <ce:italic>o</ce:italic> on <ce:italic>I</ce:italic> is in <mml:math altimg="si104.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">C</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff for all <mml:math altimg="si105.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> we have that <mml:math altimg="si106.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:enunciation></ce:para><ce:para id="pr0680" view="all">Clearly, a basic module needs to adhere to <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> only on intervals <ce:italic>I</ce:italic> during which it is correct, and may behave arbitrarily when it is faulty. Subtle issues originate in the fact that a module may become correct after an earlier (transient) fault, in the sense that its internal components work as intended afterwards. At this point in time, it may or may not be the case that all traces of the transient fault have been vanished from the internal state of the module.</ce:para><ce:para id="pr0690" view="all">The typical use of basic modules is the description of a (sub)problem. For instance, the module specification of a threshold module will be such that the output is required to indicate whether a certain number of binary input ports is in state 1. Basic modules are then employed with the understanding that they require an implementation matching their specification.</ce:para><ce:para id="pr0700" view="all">This use of basic modules in our algorithms entails that correct modules have correct internal states. Although a basic module description abstracts away its internal state, this property can be characterized in a natural way by another constraint on the module specification: We say that the specification of some module <ce:italic>M</ce:italic> is <ce:italic>extendable</ce:italic> iff each feasible execution of <ce:italic>M</ce:italic> on some interval <mml:math altimg="si107.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> is the restriction of a feasible execution of <ce:italic>M</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. In other words, for each execution on some interval <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>, (i) a fault-free history exists that leads to the internal state of the module at time <mml:math altimg="si108.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup></mml:math> (and therefore, for the given input signals, to the same execution on <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>), and (ii) the module is capable of continuing to operate correctly in the future (i.e., there is no fault-free execution that eventually cannot be continued in a way that adheres to <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math>). While (ii) should always be true for essentially the same reason that we demand non-emptiness for, (i) can be seen as the requirement of a correct internal state: For a correct module with an extensible specification, it is required that both all internal components of a physical implementation of the module operate according to their specification and all traces of an earlier transient fault (if any) from the internal state must have worn off, in the sense that it could have been reached by a non-faulty history. Most of the basic module specifications we are going to introduce will be extendable. However, there are also basic modules with non-extendable specifications; we will provide an example later on.</ce:para><ce:para id="pr3270" view="all">The next lemma shows that any extendable module specification is uniquely characterized by its values on input executions of the respective module on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>.</ce:para><ce:para id="pr3280" view="all"><ce:enunciation id="en0150"><ce:label>Lemma 3.3</ce:label><ce:para id="pr3290" view="all"><ce:italic>Any function Î¦ that maps each execution</ce:italic> <mml:math altimg="si109.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> <ce:italic>of a set of input ports</ce:italic> <mml:math altimg="si110.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">in</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>on</ce:italic> <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> <ce:italic>to a non-empty set of executions</ce:italic> <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> <ce:italic>of a set of output ports</ce:italic> <mml:math altimg="si111.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">out</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>on</ce:italic> <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> <ce:italic>specifies a unique module M such that</ce:italic> (i) <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>is extendable and</ce:italic> (ii) <mml:math altimg="si112.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>Î¦</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> <ce:italic>for each execution of M's input ports</ce:italic> <mml:math altimg="si110.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">in</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>on</ce:italic> <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math><ce:italic>. Conversely, for each module M whose specification is extendable,</ce:italic> <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>is uniquely characterized by its values on executions of ports</ce:italic> <mml:math altimg="si110.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">in</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>on</ce:italic> <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math><ce:italic>.</ce:italic></ce:para></ce:enunciation></ce:para><ce:para id="pr0710" view="all"><ce:enunciation id="en0040"><ce:label>Proof</ce:label><ce:para id="pr0730" view="all">We show first that for a function <ce:italic>Î¦</ce:italic> as assumed by the lemma there exists a module <ce:italic>M</ce:italic> such that <mml:math altimg="si113.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>Î¦</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> for executions <mml:math altimg="si109.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> of ports <mml:math altimg="si110.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">in</mml:mi></mml:mrow></mml:msub></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> and <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is extendable. To this end, we simply define that <ce:italic>M</ce:italic> is a module with input ports <mml:math altimg="si110.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">in</mml:mi></mml:mrow></mml:msub></mml:math> and output ports <mml:math altimg="si111.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">out</mml:mi></mml:mrow></mml:msub></mml:math> whose specification <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is given by <mml:math altimg="si114.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> are restrictions of executions <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si116.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, respectively, such that <mml:math altimg="si117.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo>â</mml:mo><mml:mi>Î¦</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:math>. Clearly, <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> satisfies properness and extendability by construction. Regarding non-emptiness, we can extend any input execution <mml:math altimg="si96.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> on some interval <ce:italic>I</ce:italic> arbitrarily to an execution <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. By assumption, <mml:math altimg="si118.gif" overflow="scroll"><mml:mi>Î¦</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo>â </mml:mo><mml:mo>â</mml:mo></mml:math>, so there must be some execution <mml:math altimg="si119.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo>â</mml:mo><mml:mi>Î¦</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:math>. By definition, its restriction <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> to <ce:italic>I</ce:italic> is in <mml:math altimg="si120.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, proving non-emptiness. Hence <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is a valid specification of a module <ce:italic>M</ce:italic> with input ports <mml:math altimg="si110.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">in</mml:mi></mml:mrow></mml:msub></mml:math> and output ports <mml:math altimg="si111.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">out</mml:mi></mml:mrow></mml:msub></mml:math>.</ce:para><ce:para id="pr0740" view="all">We now establish the second claim of the lemma, which will also show that the module <ce:italic>M</ce:italic> we constructed from <ce:italic>Î¦</ce:italic> is unique and thus complete the proof. To this end, let <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si121.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> be any executions of the input and output ports of <ce:italic>M</ce:italic>, respectively. If <mml:math altimg="si122.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, by extendability <mml:math altimg="si109.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> are restrictions of executions <mml:math altimg="si123.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si116.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, respectively, such that <mml:math altimg="si124.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:math>. On the other hand, if <mml:math altimg="si125.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, properness necessitates that there are no such executions <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si126.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math>. This shows the second statement and the lemma follows. â¡</ce:para></ce:enunciation></ce:para><ce:para id="pr3300" view="all">Enabled by this lemma, we will specify most of our basic modules by defining <mml:math altimg="si127.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>â </mml:mo><mml:mo>â</mml:mo></mml:math> for input executions <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> only. For instance, the fixed delay channel from <ce:cross-ref refid="en0020" id="crf2770">Example 3.2</ce:cross-ref> can now be specified equivalently as follows.</ce:para><ce:para id="pr0750" view="all"><ce:enunciation id="en0050"><ce:label>Example 3.4</ce:label><ce:para id="pr0760" view="all">A fixed-delay channel with input port <ce:italic>i</ce:italic>, output port <ce:italic>o</ce:italic>, and delay <mml:math altimg="si100.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math> is a basic module with extendable module specification <mml:math altimg="si101.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">C</mml:mi></mml:mrow></mml:msub></mml:math> defined by: For each execution <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> of input port <ce:italic>i</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, an execution <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> of output port <ce:italic>o</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> is in <mml:math altimg="si104.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">C</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff for all <mml:math altimg="si128.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> we have that <mml:math altimg="si129.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:enunciation></ce:para><ce:para id="pr0770" view="all">Because we do not need to describe <ce:italic>partial</ce:italic> feasible executions on a finite interval <mml:math altimg="si130.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> here, the fact that the condition <mml:math altimg="si129.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> applies only to a subinterval of <ce:italic>I</ce:italic> in <ce:cross-ref refid="en0020" id="crf0790">Example 3.2</ce:cross-ref> becomes superfluous: <mml:math altimg="si131.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>+</mml:mo><mml:mi>d</mml:mi><mml:mo>;</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, so no additional specification is required to describe the module's behavior near the lower bound of intervals <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> with <mml:math altimg="si132.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>â </mml:mo><mml:mo>â</mml:mo></mml:math>. By contrast, in <ce:cross-ref refid="en0020" id="crf0800">Example 3.2</ce:cross-ref>, we had to specify this explicitly, by stating that <ce:italic>any</ce:italic> behavior of the output in <mml:math altimg="si133.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is feasible (by leaving the behavior unspecified in this interval).</ce:para><ce:para id="pr0780" view="all">Whereas the specification in <ce:cross-ref refid="en0050" id="crf0810">Example 3.4</ce:cross-ref> simplifies the one of <ce:cross-ref refid="en0020" id="crf0820">Example 3.2</ce:cross-ref> only marginally, this is very different for the modules exhibiting more complex relations between input and output introduced later on: Accurately describing all suffixes of a non-trivial partial execution can be error-prone and may result in unnecessarily involved module specifications.</ce:para></ce:section></ce:section><ce:section id="se0190" view="all"><ce:section id="se0200" view="all"><ce:section-title id="st0210">Compound modules.</ce:section-title><ce:para id="pr0790" view="all">In this case, the module <ce:italic>M</ce:italic> is given by a finite set <mml:math altimg="si134.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> of <ce:italic>submodules</ce:italic> of <ce:italic>M</ce:italic>. These submodules are interconnected, i.e., an output port of one submodule can be the input port of another, and the ports of <ce:italic>M</ce:italic> may also be ports of submodules. We require that <mml:math altimg="si134.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is <ce:italic>well-formed</ce:italic>, i.e., the following conditions are satisfied:<ce:list id="ls0060"><ce:list-item id="li0250"><ce:label>1.</ce:label><ce:para id="pr0800" view="all">For each output port <ce:italic>p</ce:italic> of <ce:italic>M</ce:italic>, there is exactly one submodule <mml:math altimg="si135.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> such that <ce:italic>S</ce:italic> has output port <ce:italic>p</ce:italic>.</ce:para></ce:list-item><ce:list-item id="li0260"><ce:label>2.</ce:label><ce:para id="pr0810" view="all">For each input port <ce:italic>p</ce:italic> of a submodule of <ce:italic>M</ce:italic>, either <ce:italic>p</ce:italic> is an input port of <ce:italic>M</ce:italic>, or there is exactly one submodule <mml:math altimg="si136.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> such that <ce:italic>S</ce:italic> has output port <ce:italic>p</ce:italic>.</ce:para></ce:list-item></ce:list> The idea behind this definition is to "plug together" ports in a way such that no port is "driven" by more than one port or be left "floating".</ce:para><ce:para id="pr0820" view="all">For a compound module <ce:italic>M</ce:italic>, we now define the <ce:italic>corresponding basic module</ce:italic> <mml:math altimg="si137.gif" overflow="scroll"><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. <mml:math altimg="si137.gif" overflow="scroll"><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>'s input and output ports are the input and output ports of <ce:italic>M</ce:italic>, whereas its module specification <mml:math altimg="si138.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math> is defined as follows: Let <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> be an execution of <ce:italic>M</ce:italic> on <mml:math altimg="si139.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> and denote by <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> its restrictions to <ce:italic>M</ce:italic>'s input and output ports, respectively. Then <mml:math altimg="si140.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, iff there exists an execution <mml:math altimg="si141.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> on <ce:italic>I</ce:italic> of all ports of modules in <mml:math altimg="si142.gif" overflow="scroll"><mml:mo stretchy="false">{</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">}</mml:mo><mml:mo>âª</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math>, such that, for each module <mml:math altimg="si136.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math>, the restriction of execution <mml:math altimg="si141.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> to the ports of <ce:italic>S</ce:italic> is feasible for <ce:italic>S</ce:italic>, and <mml:math altimg="si141.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> restricted to <ce:italic>M</ce:italic>'s ports is equal to <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>. Note that <mml:math altimg="si143.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math> satisfies properness: This follows directly from the definition and properness of all submodules if all submodules are basic, and for more complex modules by structural induction. We further require that the choice of <mml:math altimg="si144.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is such that <mml:math altimg="si138.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math> fulfills non-emptiness. Hence, <mml:math altimg="si137.gif" overflow="scroll"><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is indeed a basic module with specification <mml:math altimg="si138.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math>. We say that execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> of <ce:italic>M</ce:italic> is <ce:italic>feasible for M</ce:italic> iff it is feasible for the corresponding basic module <mml:math altimg="si137.gif" overflow="scroll"><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Intuitively, this means that we consider a compound module correct whenever all its submodules are correct.</ce:para><ce:para id="pr0830" view="all"><ce:enunciation id="en0060"><ce:label>Example 3.5</ce:label><ce:para id="pr0840" view="all">Consider a compound module InvChain with (binary) input port <ce:italic>i</ce:italic> and (binary) output port <ce:italic>o</ce:italic>. InvChain is specified by the set of modules <mml:math altimg="si145.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">InvChain</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:math>, where <mml:math altimg="si146.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si147.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> are (zero-time) inverters, and <mml:math altimg="si148.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si149.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> are (binary) fixed-delay channels with delay <mml:math altimg="si100.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math>. We connect the modules' ports sequentially, as depicted in <ce:cross-ref refid="fg0030" id="crf2780">Fig. 3</ce:cross-ref><ce:float-anchor refid="fg0030"/>: The input port <ce:italic>i</ce:italic> of InvChain is also the input port of <mml:math altimg="si146.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>, whose output port <ce:italic>a</ce:italic> is the input port of <mml:math altimg="si148.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>; the output <ce:italic>b</ce:italic> of <mml:math altimg="si148.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> is fed into <mml:math altimg="si147.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Inv</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>, whose output <ce:italic>c</ce:italic> in turn is input to <mml:math altimg="si149.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>; finally, the output port <ce:italic>o</ce:italic> of <mml:math altimg="si149.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> is also the output port of <ce:italic>M</ce:italic>.</ce:para><ce:para id="pr0850" view="all">Let <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> be the execution of port <ce:italic>i</ce:italic> whose state function is <mml:math altimg="si150.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> for <mml:math altimg="si151.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si152.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> for <mml:math altimg="si153.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>. For the module specification of InvChain's corresponding basic module <mml:math altimg="si154.gif" overflow="scroll"><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="normal">InvChain</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> it then holds that <mml:math altimg="si155.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="normal">InvChain</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:math>, where <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> is the execution of port <ce:italic>o</ce:italic> with <mml:math altimg="si156.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> for <mml:math altimg="si157.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si158.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> for <mml:math altimg="si159.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para><ce:para id="pr0860" view="all">Note that <mml:math altimg="si160.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="normal">InvChain</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math> is extendable: Any feasible execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> on some interval <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> satisfies <mml:math altimg="si161.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>Â¬</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>Â¬</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for all times <mml:math altimg="si162.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>. An infinite feasible execution of InvChain on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> whose restriction to <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> matches <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> is easily found by (i) extending the input ports execution to <mml:math altimg="si163.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> by using <mml:math altimg="si164.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> on <mml:math altimg="si165.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, (ii) extending the output ports execution to <mml:math altimg="si166.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> by using <mml:math altimg="si167.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> on <mml:math altimg="si168.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>, and finally defining <mml:math altimg="si169.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> arbitrarily for <mml:math altimg="si170.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si171.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para><ce:para id="pr0870" view="all">From this observation, we can infer by <ce:cross-ref refid="en0150" id="crf0840">Lemma 3.3</ce:cross-ref> that the module specification of InvChain matches that of a fixed-delay channel with delay 2<ce:italic>d</ce:italic>, as in feasible executions of InvChain on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> we clearly have <mml:math altimg="si169.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> at all times <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. This demonstrates that compound modules permit to reason about the behavior of complex systems in a hierarchical fashion, based on basic modules that can be understood much easier. The level of detail can be adjusted by the granularity at which one relies on basic modules; in particular, it is feasible to refine the analysis later on by further breaking down basic modules into compound modules.</ce:para></ce:enunciation></ce:para><ce:para id="pr0880" view="all"><ce:enunciation id="en0070"><ce:label>Example 3.6</ce:label><ce:para id="pr0890" view="all">As an example of a non-extendable specification, consider the compound module Osc, a simple oscillator that is started at, say, time 0. The module has no input port and one (binary) output port <ce:italic>c</ce:italic>, the clock signal.<ce:cross-ref refid="fn0140" id="crf0850"><ce:sup loc="post">14</ce:sup></ce:cross-ref><ce:footnote id="fn0140"><ce:label>14</ce:label><ce:note-para id="np0160" view="all">In practice, one would of course need an input conveying the control signal starting the oscillator; we conveniently hide this detail within the module specification.</ce:note-para></ce:footnote> It comprises a binary <ce:italic>resettable fixed-delay channel</ce:italic> (RChan) of delay <mml:math altimg="si100.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math>, with input port <ce:italic>c</ce:italic> and output port <ce:italic>o</ce:italic>, whose extendable specification demands that its output fulfills <mml:math altimg="si156.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> for all times <mml:math altimg="si172.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si173.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>c</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for all times <mml:math altimg="si153.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>. Port <ce:italic>o</ce:italic> further is the input port of a (zero-time) inverter (Inv), whose output port is <ce:italic>c</ce:italic>, the clock signal.</ce:para><ce:para id="pr0900" view="all">It is not hard to see that the only feasible execution of Osc on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> maintains signal 0 on port <ce:italic>o</ce:italic> and signal 1 on port <ce:italic>c</ce:italic> until time 0. Then the feedback loop starts to oscillate with frequency <mml:math altimg="si174.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, since the channel reproduces its input with fixed delay <ce:italic>d</ce:italic> and the inverter inverts the signal. The specification of Osc is not extendable. This can be seen from the execution on <mml:math altimg="si175.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math> where <mml:math altimg="si176.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>k</mml:mi><mml:mspace width="0.2em"/><mml:mi mathvariant="normal">mod</mml:mi><mml:mspace width="0.2em"/><mml:mspace width="0.2em"/><mml:mn>2</mml:mn></mml:math> for all <mml:math altimg="si177.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>k</mml:mi><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si178.gif" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="double-struck">N</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow></mml:msub></mml:math>, and <mml:math altimg="si179.gif" overflow="scroll"><mml:mi>c</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>Â¬</mml:mo><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for all <mml:math altimg="si153.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>. This execution is feasible when restricted to each submodule since <mml:math altimg="si180.gif" overflow="scroll"><mml:mi>c</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mo>Â¬</mml:mo><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for all <mml:math altimg="si181.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>, but the output signal <mml:math altimg="si182.gif" overflow="scroll"><mml:mi>c</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> oscillates at frequency <mml:math altimg="si183.gif" overflow="scroll"><mml:mn>3</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Hence this execution is feasible, but not a restriction of the unique feasible execution of Osc on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>.</ce:para></ce:enunciation></ce:para><ce:para id="pr0910" view="all">Note carefully that an oscillator according to <ce:cross-ref refid="fg0040" id="crf0860">Fig. 4</ce:cross-ref><ce:float-anchor refid="fg0040"/> involving a channel with delay <mml:math altimg="si184.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> would be an example of a well-formed set of modules <ce:italic>M</ce:italic> that is <ce:italic>not</ce:italic> a compound module, since it violates non-emptyness of <mml:math altimg="si137.gif" overflow="scroll"><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:section></ce:section></ce:section><ce:section id="se0210" view="all"><ce:label>3.3</ce:label><ce:section-title id="st0220">Forgetfulness</ce:section-title><ce:para id="pr0920" view="all"><ce:cross-refs refid="en0060 en0070" id="crs0150">Examples 3.5 and 3.6</ce:cross-refs> of InvChain and Osc reveal a crucial insight about the behavior of compound modules. While InvChain behaves like a fixed-delay channel in <ce:italic>all</ce:italic> feasible executions, it cannot be said for Osc that it always behaves like an oscillator of frequency <mml:math altimg="si174.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Even though Osc will run at the fixed frequency of <mml:math altimg="si174.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> if it is feasible at all times, an inconsistent initialization or a transient fault can cause it to run forever at an arbitrarily high frequency. In general, when devising compound modules, typically our design goal will be to implement a certain basic module, that is, essentially ensure that the feasible executions of the compound module are also feasible according to the (usually more idealized) specification of the respective basic module. For InvChain, the intended basic module is a fixed-delay channel, where for Osc we had an (externally started) oscillator of frequency <mml:math altimg="si174.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> in mind. Since we strive for self-stabilization properties, intuitively InvChain would be a "good" implementation of a fixed-delay channel, whereas Osc is not satisfactory because it does not recover from transient faults.</ce:para><ce:para id="pr0930" view="all">Before we formalize the concepts of implementation and self-stabilization, let us get a better understanding of the critical difference between InvChain and Osc. In both cases, the output depends on past inputs, so both compound modules have a sort of memory. In any real-world system, this cannot be avoided since physics entails positive delays for any building block we might use. However, InvChain eventually "forgets" about previous inputs, while Osc contains a feedback-loop that, in a feasible execution, determines the future output as a periodic function of the first <ce:italic>d</ce:italic> time units of the execution.</ce:para><ce:para id="pr0940" view="all">This motivates the following definitions. For <mml:math altimg="si185.gif" overflow="scroll"><mml:mi>F</mml:mi><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, we say that a module is <ce:italic>F-forgetful</ce:italic>, iff its specification permits the following construction:<ce:list id="ls0070"><ce:list-item id="li0270"><ce:label>1.</ce:label><ce:para id="pr0950" view="all">Take an arbitrary feasible execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> of <ce:italic>M</ce:italic> on some interval <mml:math altimg="si13.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. Denote by <mml:math altimg="si96.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> its restrictions to the input and output ports of <ce:italic>M</ce:italic>, respectively.</ce:para></ce:list-item><ce:list-item id="li0280"><ce:label>2.</ce:label><ce:para id="pr0960" view="all">Restrict <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> to <mml:math altimg="si186.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> on <mml:math altimg="si187.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>. Then for each execution <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> whose restriction to <mml:math altimg="si17.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> equals <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math>, there is a feasible execution of <ce:italic>M</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> whose respective restrictions to the input and output ports (and in time) are <mml:math altimg="si123.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si116.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math>.</ce:para></ce:list-item></ce:list> We say a module is <ce:italic>forgetful</ce:italic> iff it is <ce:italic>F</ce:italic>-forgetful for some <mml:math altimg="si188.gif" overflow="scroll"><mml:mi>F</mml:mi><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>. Essentially, <ce:italic>F</ce:italic>-forgetfulness requires that feasibility of the output at time <ce:italic>t</ce:italic> merely depends on the inputs during <mml:math altimg="si189.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>. That is, the effects of earlier inputs, as well as all traces of a possible transient fault, wear out from the internal state within time <ce:italic>F</ce:italic>. Note that 0-forgetful modules are exactly those with extendable specifications, i.e., forgetfulness is a generalization of extendability.</ce:para><ce:para id="pr0970" view="all">Let the <ce:italic>circuit graph</ce:italic> of a compound module <ce:italic>M</ce:italic> be the directed graph whose nodes are the submodules <mml:math altimg="si134.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math>, and for each port <ce:italic>p</ce:italic> that is an output port of <mml:math altimg="si136.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> and an input port of <mml:math altimg="si190.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> it contains a (directed) edge from <ce:italic>S</ce:italic> to <mml:math altimg="si191.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. We recursively define that <ce:italic>M</ce:italic> is <ce:italic>feedback-free</ce:italic> iff (i) all its basic submodules are forgetful, (ii) all its compound submodules are feedback-free, and (iii) its circuit graph is acyclic. Finally, we define the <ce:italic>idealized basic module</ce:italic> <mml:math altimg="si192.gif" overflow="scroll"><mml:mi>Î¹</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> corresponding to compound module <ce:italic>M</ce:italic> (with the same ports as <ce:italic>M</ce:italic>) by execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> of <mml:math altimg="si192.gif" overflow="scroll"><mml:mi>Î¹</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> being feasible iff it is the restriction of a feasible execution of <ce:italic>M</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>.</ce:para><ce:para id="pr0980" view="all">According to these definitions, InvChain is clearly 2<ce:italic>d</ce:italic>-forgetful and feedback-free. Since we observed that <mml:math altimg="si193.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="normal">InvChain</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math> is extendable, it is in fact 0-forgetful and its corresponding basic and idealized basic modules are identical. In contrast, Osc satisfies neither of these properties. Note, however, that replacing a basic module in InvChain by a compound module might result in a module that does not have these properties either.</ce:para><ce:para id="pr0990" view="all">We are now in the position to formulate a theorem that states that any feedback-free module will eventually behave like its idealized basic module in a feasible execution.</ce:para><ce:para id="pr1000" view="all"><ce:enunciation id="en0080"><ce:label>Theorem 3.7</ce:label><ce:para id="pr1010" view="all"><ce:italic>Suppose M is a feedback-free compound module. Let</ce:italic> <mml:math altimg="si194.gif" overflow="scroll"><mml:mi mathvariant="script">P</mml:mi></mml:math> <ce:italic>be the set of paths in its circuit graph and submodule</ce:italic> <mml:math altimg="si136.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>be</ce:italic> <mml:math altimg="si195.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub></mml:math><ce:italic>-forgetful. Then M is F-forgetful with</ce:italic><ce:display><ce:formula id="fm0010"><mml:math altimg="si196.gif" overflow="scroll"><mml:mi>F</mml:mi><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mi mathvariant="normal">max</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:mo stretchy="true">{</mml:mo><mml:munderover><mml:mo>â</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:munderover><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">}</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:math></ce:formula></ce:display></ce:para></ce:enunciation></ce:para><ce:para id="pr1020" view="all"><ce:enunciation id="en0090"><ce:label>Proof</ce:label><ce:para id="pr1030" view="all">Consider an arbitrary execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> on <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> on the ports of <ce:italic>M</ce:italic> and its submodules whose restriction to the ports of <ce:italic>M</ce:italic> (and thus also its restrictions to each submodule of <ce:italic>M</ce:italic>) is feasible, its restrictions <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si121.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> to the input and output ports of <ce:italic>M</ce:italic>, the restriction <mml:math altimg="si116.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> of <mml:math altimg="si197.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> to <mml:math altimg="si187.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>, and an arbitrary execution <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> satisfying that its restriction to <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> equals <mml:math altimg="si198.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msub></mml:math>. Denote for each <mml:math altimg="si135.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math><ce:display><ce:formula id="fm0020"><mml:math altimg="si199.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mi mathvariant="normal">max</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:mrow></mml:munder><mml:mrow><mml:mo stretchy="true">{</mml:mo><mml:munderover><mml:mo>â</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>k</mml:mi></mml:munderover><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="true">}</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:math></ce:formula></ce:display> Note that <mml:math altimg="si200.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo><mml:mo>=</mml:mo><mml:mi>F</mml:mi></mml:math>.</ce:para><ce:para id="pr1040" view="all">By induction on the submodules of <ce:italic>M</ce:italic>, we will construct a feasible execution <mml:math altimg="si201.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> on the ports of <ce:italic>M</ce:italic> and its submodules on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> that is feasible for <ce:italic>M</ce:italic> when restricted to the ports of <ce:italic>M</ce:italic> and whose respective restrictions equal <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si186.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math>. In each step of the induction, we will add the output ports of some submodule of <ce:italic>M</ce:italic> to the execution. The induction halts once we run out of submodules of <ce:italic>M</ce:italic> after <mml:math altimg="si202.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub><mml:mo>â©½</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">|</mml:mo></mml:math> steps. The induction hypothesis states for the execution <mml:math altimg="si203.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> on the union of the input ports of <ce:italic>M</ce:italic> and the ports of a subset of its submodules that<ce:list id="ls0080"><ce:list-item id="li0290"><ce:label>â¢</ce:label><ce:para id="pr1050" view="all">its respective restrictions to submodules are feasible,</ce:para></ce:list-item><ce:list-item id="li0300"><ce:label>â¢</ce:label><ce:para id="pr1060" view="all">its restriction to the input ports of <ce:italic>M</ce:italic> equals <mml:math altimg="si123.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math>,</ce:para></ce:list-item><ce:list-item id="li0310"><ce:label>â¢</ce:label><ce:para id="pr1070" view="all">its restriction to output ports of <ce:italic>M</ce:italic> on <mml:math altimg="si187.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> matches the restriction of <mml:math altimg="si116.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> to such ports, and</ce:para></ce:list-item><ce:list-item id="li0320"><ce:label>â¢</ce:label><ce:para id="pr1080" view="all">for each submodule <mml:math altimg="si136.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> whose execution <mml:math altimg="si204.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub></mml:math> is already fully specified by <mml:math altimg="si203.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>, we have that <mml:math altimg="si204.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub></mml:math> restricted to <mml:math altimg="si205.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> equals the corresponding restriction of <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>.</ce:para></ce:list-item></ce:list> Note that these properties together prove the theorem, since they show the claims we made on the properties of <mml:math altimg="si201.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math>, and <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> and <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> are chosen arbitrarily (respecting the constraints imposed by the definition of forgetfulness). We set <mml:math altimg="si206.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> and anchor the induction at <mml:math altimg="si207.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow></mml:msub></mml:math>, trivially satisfying the induction hypothesis for <mml:math altimg="si208.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> and guaranteeing that all <mml:math altimg="si203.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> restricted to the input ports of <ce:italic>M</ce:italic> equal <mml:math altimg="si115.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math>.<ce:cross-ref refid="fn0150" id="crf0890"><ce:sup loc="post">15</ce:sup></ce:cross-ref><ce:footnote id="fn0150"><ce:label>15</ce:label><ce:note-para id="np0170" view="all">Note that if any submodule is already covered by <mml:math altimg="si207.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow></mml:msub></mml:math>, it must not have any output port and due to non-emptiness the only possible (trivial) execution on the output ports is always feasible.</ce:note-para></ce:footnote> Recall that the input ports of <ce:italic>M</ce:italic> cannot be output ports of its submodules. Any other ports of <ce:italic>M</ce:italic> and its submodules are output ports of a submodule, hence the final execution will indeed contain all ports and thus cover all submodules.</ce:para><ce:para id="pr1090" view="all">To perform the induction step, suppose we have already constructed <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> for some <mml:math altimg="si210.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:math>. By definition of <mml:math altimg="si211.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow></mml:msub></mml:math>, there is an uncovered submodule left, i.e., <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> does not specify the execution on all ports of all submodules. Because <ce:italic>M</ce:italic> is feedback-free, its circuit graph is acyclic. Consider the subgraph of the circuit graph induced by the remaining uncovered submodules. As it is acyclic as well, there must be a module <ce:italic>S</ce:italic> without an incoming edge, implying that <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> specifies executions of all its input ports. By the induction hypothesis, we have that these executions restricted to <mml:math altimg="si212.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> equal the respective restrictions of <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>: Any such port is either an input port of <ce:italic>M</ce:italic> and therefore its executions in <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> are identical on <mml:math altimg="si103.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>, or it is an output port of some module <mml:math altimg="si191.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> satisfying that there is some path <mml:math altimg="si213.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mi>S</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:math> and therefore the executions of the port in <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> are identical on <mml:math altimg="si214.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math>. Since the output ports of <ce:italic>S</ce:italic> cannot be output ports of other modules and the input ports of <ce:italic>M</ce:italic> cannot be output ports of submodules, <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> does not specify executions for any of the output ports of <ce:italic>S</ce:italic>. We apply that <ce:italic>S</ce:italic> is <mml:math altimg="si195.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub></mml:math>-forgetful to the restriction of <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> to the ports of <ce:italic>S</ce:italic> on the interval <mml:math altimg="si212.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> and the input execution given by the restriction of <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> to the input ports of <ce:italic>S</ce:italic>, which is possible since we observed that the restrictions of these executions to the input ports of <ce:italic>S</ce:italic> on <mml:math altimg="si212.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> are identical. We obtain a feasible execution of <ce:italic>S</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> whose restriction to the input ports matches the restriction of <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> to these ports and whose restriction to the output ports and <mml:math altimg="si215.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> matches the respective restriction of <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>. We define <mml:math altimg="si203.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> by adding these executions of the output ports of <ce:italic>S</ce:italic> to <mml:math altimg="si209.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>. Overall, the first, second, and fourth claim of the induction hypothesis thus hold by construction. Taking into account that <mml:math altimg="si216.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi><mml:mo>,</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si116.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msubsup></mml:math> is a restriction of <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>, the same holds for the third claim. Hence the induction step succeeds, finishing the proof. â¡</ce:para></ce:enunciation> As a consequence, any feedback-free compound module will eventually "forget" about transient faults and behave according to <ce:italic>some</ce:italic> fault-free history. Note that in general that does not mean that if the module's execution is feasible on two separate intervals there is any guaranteed relation between the behavior on these intervals, as arbitrary transient faults result in arbitrary modifications of the module's state. However, we can assume that such a module, once it becomes non-faulty and thus follows its specification, eventually behaves correctly in the strong sense given by the specification of its corresponding idealized basic module.</ce:para><ce:para id="pr1100" view="all">The bad news is that we have to introduce feedback-loops into the system at some point: After all, any clock source is some kind of oscillator. As demonstrated by Osc, we cannot expect a strong generic result like <ce:cross-ref refid="en0080" id="crf0900">Theorem 3.7</ce:cross-ref> for compound modules that are not feedback-free. Also, clearly such a structure cannot be forgetful. Hence, let us turn to a less restrictive concept of recovery from transient faults.</ce:para></ce:section><ce:section id="se0220" view="all"><ce:label>3.4</ce:label><ce:section-title id="st0230">Self-stabilization</ce:section-title><ce:para id="pr1110" view="all">Self-stabilization is the property of a system to recover from arbitrary transient faults in finite time, provided that all transient faults cease. Since arbitrary transient faults may result in arbitrary states, this requirement can be rephrased as the need to reach a valid state within finite time from any initial state. For basic modules, our framework encapsulates this concept by the notion of feasibility; executions completely hide the internal state of a basic module, and we assume (or hope) that the utilized implementation of the module will recover from faults that are considered transient, e.g. particle hits, crosstalk, magnetic fields, or power outages. For compound modules, one possible meaning of "valid state" in our context is given by the specification of the corresponding idealized basic module: If, viewed from the outside, the execution is indistinguishable from one that could occur if the module was entirely fault-free, we can safely assume that its state is valid; any fault that is masked is irrelevant to the higher layers of the system anyway, as it solely relies on the guarantees of the utilized model specification on the module's ports' executions.</ce:para><ce:para id="pr1120" view="all">A more general concretization of the same underlying idea is the notion of self-stabilization we present next. It introduces two relaxations of the constraints on the behavior of a module. Firstly, we do not expect that the recovering module is perceived as functional by an outsider immediately after its execution becomes feasible. Rather, we allow for some <ce:italic>stabilization time</ce:italic> during which the module can "clean up" its internal state. Secondly, we do not require that the module fulfills its corresponding idealized basic module specification. Instead, we choose another, weaker specification that is sufficient for our purposes. One specification being stronger than another is captured by the following notion. We define that module <ce:italic>M implements</ce:italic> module <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> iff both modules have the same sets of input and output ports and <mml:math altimg="si218.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> for all <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math>. Thus, <mml:math altimg="si219.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> is stronger than <mml:math altimg="si220.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub></mml:math> in the sense that it imposes at least as many constraints on the output executions as <mml:math altimg="si220.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub></mml:math>. For <mml:math altimg="si221.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, module <ce:italic>M</ce:italic> now is a <ce:italic>T-stabilizing implementation of module</ce:italic> <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, iff the restriction of each feasible execution of <ce:italic>M</ce:italic> on <mml:math altimg="si222.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> to <mml:math altimg="si223.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> is a feasible execution of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. Clearly, for <mml:math altimg="si224.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math>, this allows for <mml:math altimg="si225.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, i.e., a <ce:italic>T</ce:italic>-stabilizing implementation of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> needs not be an implementation of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. For brevity, we may say that "<ce:italic>M</ce:italic> is <ce:italic>T</ce:italic>-stabilizing" to express that <ce:italic>M</ce:italic> is a <ce:italic>T</ce:italic>-stabilizing implementation of its corresponding idealized basic module. We simply say <ce:italic>M</ce:italic> is a <ce:italic>self-stabilizing</ce:italic> (implementation of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>) iff it is a <ce:italic>T</ce:italic>-stabilizing (implementation of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>) for some <mml:math altimg="si221.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>.</ce:para><ce:para id="pr1130" view="all">From our previous definitions and results, we immediately can derive the following statements. <ce:enunciation id="en0100"><ce:label>Lemma 3.8</ce:label><ce:para id="pr1140" view="all"><ce:list id="ls0090"><ce:list-item id="li0330"><ce:label>1.</ce:label><ce:para id="pr1150" view="all"><ce:italic>Every F-forgetful module is F-stabilizing.</ce:italic></ce:para></ce:list-item><ce:list-item id="li0340"><ce:label>2.</ce:label><ce:para id="pr1160" view="all"><ce:italic>Every feedback-free compound module is self-stabilizing.</ce:italic></ce:para></ce:list-item><ce:list-item id="li0350"><ce:label>3.</ce:label><ce:para id="pr1170" view="all"><ce:italic>If M is a self-stabilizing implementation of</ce:italic> <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> <ce:italic>and</ce:italic> <mml:math altimg="si89.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> <ce:italic>is extendable, then M is an implementation of</ce:italic> <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math><ce:italic>.</ce:italic></ce:para></ce:list-item><ce:list-item id="li0360"><ce:label>4.</ce:label><ce:para id="pr1180" view="all"><ce:italic>Every feedback-free compound module whose specification is extendable implements its corresponding idealized basic module.</ce:italic></ce:para></ce:list-item></ce:list></ce:para></ce:enunciation> <ce:enunciation id="en0110"><ce:label>Proof</ce:label><ce:para id="pr1190" view="all">The first statement follows directly from the definition of <ce:italic>F</ce:italic>-forgetfulness. The second statement follows from <ce:cross-ref refid="en0080" id="crf0910">Theorem 3.7</ce:cross-ref> and the first statement. Regarding the third statement, by extendability every feasible execution of <ce:italic>M</ce:italic> on some interval <mml:math altimg="si81.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> is the restriction of a feasible execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> of <ce:italic>M</ce:italic> on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>. By the definition of self-stabilizing implementations, there is some <mml:math altimg="si226.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> such that <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> restricted to <mml:math altimg="si227.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mo>â</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> is feasible for <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. By properness, restricting <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> to <ce:italic>I</ce:italic> yields a feasible execution of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. Since this restriction equals the original feasible execution of <ce:italic>M</ce:italic>, it follows that every feasible execution of <ce:italic>M</ce:italic> is a feasible execution of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. The last statement follows from the second and third. â¡</ce:para></ce:enunciation></ce:para><ce:para id="pr1200" view="all">Recall that InvChain from <ce:cross-ref refid="en0060" id="crf0920">Example 3.5</ce:cross-ref> behaves like a fixed-delay channel with delay 2<ce:italic>d</ce:italic>. As InvChain is feedback-free and its specification is extendable, we could also infer this statement directly from <ce:cross-ref refid="en0100" id="crf0930">Lemma 3.8</ce:cross-ref>. In contrast, Osc is not self-stabilizing at all, i.e., it is not self-stabilizing for any <mml:math altimg="si226.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, which follows from the same arguments that we used to show that its specification is not extendable. In general, determining whether a module <ce:italic>M</ce:italic> is a self-stabilizing implementation of some other module <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> (or even bounding the stabilization time) requires a detailed stabilization analysis.</ce:para><ce:para id="pr1210" view="all">One may as well generalize the above definition to also account for probabilistic stabilization by defining an appropriate probability space on the set of executions of <ce:italic>M</ce:italic>. For the sake of brevity and better readability, we only informally state the probability space in this work by introducing basic modules that act in a probabilistic manner, namely the Randomized Watchdog Timers. Probabilistic bounds on the stabilization time of compound implementations then are naturally derived from the respective distributions of their submodules. The interested reader is referred to <ce:cross-ref refid="br0130" id="crf0940">[13]</ce:cross-ref>, where we give a precise definition of the probability space over which our probabilistic stabilization guarantees are expressed.</ce:para></ce:section><ce:section id="se0230" view="all"><ce:label>3.5</ce:label><ce:section-title id="st0240">Persistent faults</ce:section-title><ce:para id="pr1220" view="all">We next generalize the definition of feasibility for compound modules to potentially faulty submodules. For a compound module <ce:italic>M</ce:italic> and <mml:math altimg="si228.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:math>, we define the <ce:italic>corresponding f-faulty basic module</ce:italic> <mml:math altimg="si229.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>f</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> as follows: <mml:math altimg="si229.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>f</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>'s input and output ports are the input and output ports of <ce:italic>M</ce:italic>. Let <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> be any execution of <ce:italic>M</ce:italic> on <mml:math altimg="si81.gif" overflow="scroll"><mml:mi>I</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> and denote by <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> its restrictions to the input and output ports of <ce:italic>M</ce:italic>, respectively. Then <mml:math altimg="si230.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>f</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, iff there exists an execution <mml:math altimg="si231.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> of all ports of modules in <mml:math altimg="si142.gif" overflow="scroll"><mml:mo stretchy="false">{</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">}</mml:mo><mml:mo>âª</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> and a subset <mml:math altimg="si232.gif" overflow="scroll"><mml:mi mathvariant="script">F</mml:mi></mml:math> of <mml:math altimg="si134.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:math> of size at most <ce:italic>f</ce:italic>, such that, for each module <ce:italic>S</ce:italic> in <mml:math altimg="si233.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi mathvariant="script">F</mml:mi></mml:math>, the restriction of execution <mml:math altimg="si141.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> to the ports of <ce:italic>S</ce:italic> is feasible, and <mml:math altimg="si141.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">S</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> restricted to <ce:italic>M</ce:italic>'s input and output ports is equal to <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math>. As in the fault-free case, we require that <mml:math altimg="si234.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>f</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msub></mml:math> fulfills non-emptiness. For compound module <ce:italic>M</ce:italic> and <mml:math altimg="si228.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:math>, we say an execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> of <ce:italic>M</ce:italic> is <ce:italic>f-faulty feasible</ce:italic> iff it is feasible for the corresponding <ce:italic>f</ce:italic>-faulty basic module <mml:math altimg="si229.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>f</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>M</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Modules whose behavior is unrestricted in execution <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math> (i.e., that belong to the set <mml:math altimg="si232.gif" overflow="scroll"><mml:mi mathvariant="script">F</mml:mi></mml:math>) are called <ce:italic>faulty (in execution</ce:italic> <mml:math altimg="si84.gif" overflow="scroll"><mml:mi mathvariant="script">E</mml:mi></mml:math><ce:italic>)</ce:italic>.</ce:para><ce:para id="pr1230" view="all">Clearly, a compound module <ce:italic>M</ce:italic> cannot mask faults of submodules that have an output port that is also output port of <ce:italic>M</ce:italic>. Consequently, tolerance of ongoing faults necessitates to weaken the constraints on <ce:italic>M</ce:italic>'s output. Hence, for <mml:math altimg="si235.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:math>, compound module <ce:italic>M</ce:italic>, and some other module <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> with the same set of input and output ports, we say that <ce:italic>M</ce:italic> is an <ce:italic>f-tolerant implementation of</ce:italic> <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> iff every <ce:italic>f</ce:italic>-faulty feasible execution of <ce:italic>M</ce:italic> is a feasible execution of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, i.e., the corresponding <ce:italic>f</ce:italic>-faulty basic module of <ce:italic>M</ce:italic> implements <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>. Analogously, <ce:italic>M</ce:italic> is an <ce:italic>f-tolerant T-stabilizing implementation of</ce:italic> <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> iff its corresponding <ce:italic>f</ce:italic>-faulty basic module is a <ce:italic>T</ce:italic>-stabilizing implementation of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>.</ce:para><ce:para id="pr1240" view="all">Note that this entails that the union of output ports of any set consisting of <ce:italic>f</ce:italic> submodules of <ce:italic>M</ce:italic> can be arbitrary. The module specification of <mml:math altimg="si217.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>M</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> thus must not put concurrent restrictions on all its output ports to allow for fault-tolerance. Hence, one demands constraints on the outputs of non-faulty submodules of <ce:italic>M</ce:italic> (i.e., those whose executions are feasible) only.</ce:para></ce:section></ce:section><ce:section id="se0240" view="all"><ce:label>4</ce:label><ce:section-title id="st0250">Formal specification of clock synchronization protocols</ce:section-title><ce:para id="pr1250" view="all">In the formal framework introduced above, a <ce:italic>node</ce:italic> is simply a compound module that will operate according to some specification whenever it is non-faulty. We now specify the submodules of a node introduced informally in Section <ce:cross-ref refid="se0130" id="crf0950">2.2</ce:cross-ref> and reveal how they are connected. The reader might want to take a look at <ce:cross-ref refid="fg0050" id="crf0960">Fig. 5</ce:cross-ref><ce:float-anchor refid="fg0050"/> to get an idea of the general layout of a node at this point. Each node <mml:math altimg="si236.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> has <ce:italic>n</ce:italic> input ports <mml:math altimg="si237.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math>, where <mml:math altimg="si27.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, and <mml:math altimg="si238.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> output ports, namely <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> for all <mml:math altimg="si240.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>. We present all submodules as basic modules whose specifications are sufficiently strong to implement the model used in <ce:cross-ref refid="br0130" id="crf0970">[13]</ce:cross-ref>. As a result, not all specifications can be satisfied by (physical) implementations of the modules for all input executions; we discuss these limitations and their implications in Section <ce:cross-ref refid="se0360" id="crf0980">6</ce:cross-ref>. All of the following specifications are extendable and therefore, by <ce:cross-ref refid="en0150" id="crf0990">Lemma 3.3</ce:cross-ref>, are uniquely characterized by describing them on executions on <mml:math altimg="si82.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> only. It is trivial to verify non-emptyness for the given specifications, hence omit respective discussions.<ce:list id="ls0100"><ce:list-item id="li0370"><ce:label>â¢</ce:label><ce:para id="pr1260" view="all"><ce:bold>Communication channels.</ce:bold> For each <mml:math altimg="si27.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, there is a communication channel of delay <mml:math altimg="si241.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> from node <ce:italic>i</ce:italic>'s internal port <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> to its output port <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. Formally, this communication channel is a basic module with input port <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and output port <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. The module specification <mml:math altimg="si242.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub></mml:math> of the communication channel is as follows. Let <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> be an execution of input port <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> an execution of output port <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. Then <mml:math altimg="si243.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff there exists a continuous, strictly increasing (and thus invertible) <ce:italic>delay function</ce:italic> <mml:math altimg="si244.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>:</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> such that for all <mml:math altimg="si128.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> both (i) <mml:math altimg="si245.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math> and (ii) <mml:math altimg="si246.gif" overflow="scroll"><mml:mn>0</mml:mn><mml:mo>â©½</mml:mo><mml:mi>t</mml:mi><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>&lt;</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub></mml:math> hold.</ce:para><ce:para id="pr1270" view="all">It is important to note that the assumptions on the communication channels are strictly weaker than those on fixed-delay channels, as the delay of a communication channel may vary arbitrarily (within bounds) during an execution.</ce:para></ce:list-item><ce:list-item id="li0380"><ce:label>â¢</ce:label><ce:para id="pr1280" view="all"><ce:bold>Memory flags.</ce:bold> For each state <mml:math altimg="si247.gif" overflow="scroll"><mml:mi>s</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">S</mml:mi></mml:math> and each node <mml:math altimg="si248.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, there is a memory flag <mml:math altimg="si249.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math> at node <ce:italic>i</ce:italic>. It has two input ports, namely <mml:math altimg="si237.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> and a binary reset port, as well as a binary output port <mml:math altimg="si250.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math> whose name is for simplicity identical to the memory flag's name. Given an execution <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> of the flag's input ports, an execution <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> of the output port is in <mml:math altimg="si251.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff properties (Reset) and (Set) hold:<ce:list id="ls0110"><ce:list-item id="li0390"><ce:label>-</ce:label><ce:para id="pr1290" view="all"><ce:italic>(Reset)</ce:italic> For all times <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si252.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> iff the reset port has been in state 1 at some time between <mml:math altimg="si253.gif" overflow="scroll"><mml:mi mathvariant="normal">sup</mml:mi><mml:mo stretchy="false">{</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math> and <ce:italic>t</ce:italic>.</ce:para></ce:list-item><ce:list-item id="li0400"><ce:label>-</ce:label><ce:para id="pr1300" view="all"><ce:italic>(Set)</ce:italic> For all times <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si254.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> iff the reset port continuously has been in state 0 between <mml:math altimg="si253.gif" overflow="scroll"><mml:mi mathvariant="normal">sup</mml:mi><mml:mo stretchy="false">{</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>-</mml:mo><mml:mo>â</mml:mo><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math> and <ce:italic>t</ce:italic>.</ce:para></ce:list-item></ce:list> We say that node <ce:italic>i memorizes node j in state s</ce:italic> at time <ce:italic>t</ce:italic> iff <mml:math altimg="si254.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0410"><ce:label>â¢</ce:label><ce:para id="pr1310" view="all"><ce:bold>Threshold gates.</ce:bold> Node <ce:italic>i</ce:italic> may comprise an arbitrary number of threshold gates with arbitrary thresholds. The module specification <mml:math altimg="si255.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Thr</mml:mi></mml:mrow></mml:msub></mml:math> of a threshold gate with binary input ports <mml:math altimg="si256.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:math>, binary output port <ce:italic>o</ce:italic>, and threshold <mml:math altimg="si257.gif" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>m</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> is defined as follows. Let <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> be an execution of the input ports and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> an execution of output port <ce:italic>o</ce:italic>. Then <mml:math altimg="si258.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Thr</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mi>I</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff for all <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si259.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> if at least <ce:italic>k</ce:italic> input ports are in state 1 at time <ce:italic>t</ce:italic>, and <mml:math altimg="si156.gif" overflow="scroll"><mml:mi>o</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> otherwise.</ce:para></ce:list-item><ce:list-item id="li0420"><ce:label>â¢</ce:label><ce:para id="pr1320" view="all"><ce:bold>Watchdog timers.</ce:bold> For each state <mml:math altimg="si260.gif" overflow="scroll"><mml:mi>s</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">S</mml:mi></mml:math>, there can be watchdog timers <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> at node <ce:italic>i</ce:italic>, where <mml:math altimg="si261.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> is the <ce:italic>duration</ce:italic> of the timer and <ce:italic>C</ce:italic> is a clock. The watchdog timer has input port <mml:math altimg="si262.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and a binary output port <mml:math altimg="si263.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub></mml:math>. The timer's module specification <mml:math altimg="si264.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow></mml:msub></mml:math> is defined as follows. Let <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> be an execution of the timer's input port <mml:math altimg="si262.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> an execution of its output port <mml:math altimg="si263.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub></mml:math>. Then <mml:math altimg="si265.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, iff the following holds:<ce:list id="ls0120"><ce:list-item id="li0430"><ce:label>-</ce:label><ce:para id="pr1330" view="all"><ce:italic>(Clock)</ce:italic> Clock <ce:italic>C</ce:italic> is correct at all times, i.e., <mml:math altimg="si16.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo>â©½</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â©½</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for all <mml:math altimg="si266.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si15.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0440"><ce:label>-</ce:label><ce:para id="pr1340" view="all"><ce:italic>(Reset)</ce:italic> There exists a (binary) signal <mml:math altimg="si267.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:math> (the equivalence class of the output port's signal) such that, for each time <mml:math altimg="si268.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> when <mml:math altimg="si262.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> switches to state <ce:italic>s</ce:italic>, there is a time <mml:math altimg="si269.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:math> such that <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is <ce:italic>reset</ce:italic>, i.e., event <mml:math altimg="si270.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub></mml:math>. This is a one-to-one correspondence, i.e., for each such <mml:math altimg="si271.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math> this time <ce:italic>t</ce:italic> is unique and <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is not reset at any other times.</ce:para></ce:list-item><ce:list-item id="li0450"><ce:label>-</ce:label><ce:para id="pr1350" view="all"><ce:italic>(Expire)</ce:italic> Denote by <mml:math altimg="si272.gif" overflow="scroll"><mml:mi>R</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> the set of times when <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is reset. For each time <mml:math altimg="si273.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi>R</mml:mi></mml:math>, denote by <mml:math altimg="si274.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> the unique time satisfying that <mml:math altimg="si275.gif" overflow="scroll"><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>T</mml:mi></mml:math>. Then, for each <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si276.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> iff <mml:math altimg="si277.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mo>â</mml:mo></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:list-item></ce:list> Iff <mml:math altimg="si278.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub></mml:math>, i.e., <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is not reset during <mml:math altimg="si279.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">]</mml:mo></mml:math> again and hence <mml:math altimg="si263.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub></mml:math> switches to 1 at time <mml:math altimg="si274.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, we say that <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> <ce:italic>expires</ce:italic> at time <mml:math altimg="si274.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>. <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> <ce:italic>is expired</ce:italic> at time <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> iff <mml:math altimg="si280.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math>. For notational convenience, we will omit the clock <ce:italic>C</ce:italic> and simply write <mml:math altimg="si281.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for both the timeout and its signal.</ce:para></ce:list-item><ce:list-item id="li0460"><ce:label>â¢</ce:label><ce:para id="pr1360" view="all"><ce:bold>Randomized watchdog timers.</ce:bold> A randomized watchdog timer <mml:math altimg="si54.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">D</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is a module with input port <mml:math altimg="si262.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> and output port <mml:math altimg="si282.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">D</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub></mml:math>, where <mml:math altimg="si53.gif" overflow="scroll"><mml:mi mathvariant="script">D</mml:mi></mml:math> is a bounded random distribution on <mml:math altimg="si283.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math>, <ce:italic>s</ce:italic> is a state, and <ce:italic>C</ce:italic> a clock. The module specification of <mml:math altimg="si54.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="script">D</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is analogous to the module specification of a watchdog timer, except that property <ce:italic>(Expire)</ce:italic> is replaced by:<ce:list id="ls0130"><ce:list-item id="li0470"><ce:label>-</ce:label><ce:para id="pr1370" view="all"><ce:italic>(Expire')</ce:italic> Denote by <mml:math altimg="si272.gif" overflow="scroll"><mml:mi>R</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> the set of times when <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is reset. For each time <mml:math altimg="si273.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi>R</mml:mi></mml:math>, denote by <mml:math altimg="si274.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> the unique time satisfying that <mml:math altimg="si284.gif" overflow="scroll"><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, where <mml:math altimg="si285.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> is drawn (independently) from <mml:math altimg="si53.gif" overflow="scroll"><mml:mi mathvariant="script">D</mml:mi></mml:math>. Then, for each <mml:math altimg="si11.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si276.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> iff <mml:math altimg="si277.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mo>â</mml:mo></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>R</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:list-item></ce:list> We apply the same notational conventions as for watchdog timers.</ce:para></ce:list-item><ce:list-item id="li0480"><ce:label>â¢</ce:label><ce:para id="pr1380" view="all"><ce:bold>State transition modules.</ce:bold> Node <ce:italic>i</ce:italic>'s state transition module has input ports <mml:math altimg="si237.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> for each node <mml:math altimg="si27.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> as well as one binary input port for each of the memory flags, (randomized) watchdog timers and threshold gates it uses. Furthermore it has an output port <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> as well as one binary Reset output port for each of the memory flags it uses.</ce:para><ce:para id="pr1390" view="all">A node's state transition module executes a state machine specified by (i) a finite set <mml:math altimg="si59.gif" overflow="scroll"><mml:mi mathvariant="double-struck">S</mml:mi></mml:math> of states, (ii) a function <ce:italic>tr</ce:italic>, called the <ce:italic>transition function</ce:italic>, from <mml:math altimg="si286.gif" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">S</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math> to the set of Boolean predicates on the alphabet consisting of expressions of the form "<mml:math altimg="si287.gif" overflow="scroll"><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>s</mml:mi></mml:math>" (used for expressing guards), where <ce:italic>p</ce:italic> is from the state transition module's input ports and <ce:italic>s</ce:italic> is from the set of possible states of signal <ce:italic>p</ce:italic>, and (iii) a function <ce:italic>re</ce:italic>, called the <ce:italic>reset function</ce:italic>, from <mml:math altimg="si288.gif" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi></mml:math> to the power set of the node's memory flags.</ce:para><ce:para id="pr1400" view="all">Intuitively, the transition function specifies the conditions (guards) under which a node switches states, and the reset function determines which memory flags to reset upon the state change. Formally, let <ce:italic>P</ce:italic> be a predicate on the input ports of node <ce:italic>i</ce:italic>'s state transition module. We define <ce:italic>P holds at time t</ce:italic> by structural induction: If <ce:italic>P</ce:italic> is equal to <mml:math altimg="si287.gif" overflow="scroll"><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>s</mml:mi></mml:math>, where <ce:italic>p</ce:italic> is an input port of node <ce:italic>i</ce:italic>'s state transition module and <ce:italic>s</ce:italic> is one of the states signal <ce:italic>p</ce:italic> can obtain, then <ce:italic>P holds at time t</ce:italic> iff <mml:math altimg="si289.gif" overflow="scroll"><mml:mi>p</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>s</mml:mi></mml:math>. Otherwise, if <ce:italic>P</ce:italic> is of the form <mml:math altimg="si290.gif" overflow="scroll"><mml:mo>Â¬</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si291.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>â§</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>, or <mml:math altimg="si292.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>â¨</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>, we define <ce:italic>P holds at time t</ce:italic> in the straightforward manner.</ce:para><ce:para id="pr1410" view="all">For a given transition delay <mml:math altimg="si293.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Trans</mml:mi></mml:mrow></mml:msub><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math>, the module specification <mml:math altimg="si294.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">STM</mml:mi></mml:mrow></mml:msub></mml:math> of node <ce:italic>i</ce:italic>'s state transition module is defined as follows. Let <mml:math altimg="si90.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:math> be an execution of the state transition module's input ports and <mml:math altimg="si93.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub></mml:math> an execution of its output ports. Then <mml:math altimg="si295.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>out</mml:mtext></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:msub><mml:mrow><mml:mi>Î¦</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">STM</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">E</mml:mi></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> iff there is some <mml:math altimg="si296.gif" overflow="scroll"><mml:mi>Îµ</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn></mml:math> and a signal locked such that the following requirements are met. (The intuition is that <mml:math altimg="si297.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">locked</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> means that the node is ready to perform the next state transition once a guard becomes true, whereas in case of <mml:math altimg="si298.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">locked</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> the node is currently executing a previously "locked" transition.)<ce:list id="ls0140"><ce:list-item id="li0490"><ce:label>-</ce:label><ce:para id="pr1420" view="all"><ce:italic>(Safety)</ce:italic> The node (i.e., <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>) does not switch states at any time <ce:italic>t</ce:italic> with <mml:math altimg="si297.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">locked</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math>. In every maximal interval <mml:math altimg="si299.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> satisfying that <mml:math altimg="si300.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">locked</mml:mi></mml:mrow><mml:mo>â¡</mml:mo><mml:mn>1</mml:mn></mml:math> on <mml:math altimg="si301.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>, it switches states exactly once.</ce:para></ce:list-item><ce:list-item id="li0500"><ce:label>-</ce:label><ce:para id="pr1430" view="all"><ce:italic>(Delay)</ce:italic> For each interval <mml:math altimg="si301.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> as above, <mml:math altimg="si302.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>â©½</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Trans</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:mi>Îµ</mml:mi></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0510"><ce:label>-</ce:label><ce:para id="pr1440" view="all"><ce:italic>(Guard)</ce:italic> For each interval <mml:math altimg="si301.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> as above, <mml:math altimg="si303.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:math> and <mml:math altimg="si304.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math> is satisfied at some time <mml:math altimg="si305.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:mi>Îµ</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0520"><ce:label>-</ce:label><ce:para id="pr1450" view="all"><ce:italic>(Responsiveness)</ce:italic> If <mml:math altimg="si297.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">locked</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:math> and there is a state <mml:math altimg="si247.gif" overflow="scroll"><mml:mi>s</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">S</mml:mi></mml:math> such that <mml:math altimg="si306.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:math> and <mml:math altimg="si307.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> holds at time <ce:italic>t</ce:italic>, then <mml:math altimg="si308.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="normal">locked</mml:mi></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo>+</mml:mo><mml:mi>Îµ</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0530"><ce:label>-</ce:label><ce:para id="pr1460" view="all"><ce:italic>(Flags)</ce:italic> For an arbitrary interval <mml:math altimg="si301.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> as above, suppose that the node switches from state <mml:math altimg="si309.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> to state <mml:math altimg="si310.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math> at time <mml:math altimg="si311.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:math>. Then for each memory flag specified by <mml:math altimg="si312.gif" overflow="scroll"><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math>, the corresponding reset output port of the state transition module is in state 1 at some time in <mml:math altimg="si313.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:math> (and therefore the flag is reset). Outside these time intervals, reset ports are in state 0.</ce:para></ce:list-item></ce:list> A node may run multiple, say <mml:math altimg="si314.gif" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math>, state machines in parallel (i.e., contain several state machines as submodules). In this case, its state signal is the joint signal <mml:math altimg="si315.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:math>, where <mml:math altimg="si316.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msubsup></mml:math>, <mml:math altimg="si317.gif" overflow="scroll"><mml:mi>l</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, denotes the <mml:math altimg="si318.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math> state machine of the node. Throughout this article, the different state machines of each node <ce:italic>i</ce:italic> have disjoint state spaces. For simplicity, we hence may say "node <ce:italic>i</ce:italic> is in state <ce:italic>s</ce:italic> at time <ce:italic>t</ce:italic>" instead of "state machine <ce:italic>l</ce:italic> of node <ce:italic>i</ce:italic> is in state <ce:italic>s</ce:italic> at time <ce:italic>t</ce:italic>" when referring to <mml:math altimg="si319.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>l</mml:mi></mml:mrow></mml:msubsup><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>s</mml:mi></mml:math>, etc.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr1470" view="all">To account for the latency of the memory flags, threshold gates and (randomized) watchdog timers, their ports are not directly connected to the state transition module's ports, but via binary communication channels with respective delays. The resulting structure of the compound module node <ce:italic>i</ce:italic> is depicted in <ce:cross-ref refid="fg0050" id="crf1000">Fig. 5</ce:cross-ref>. Note that additional communication channels at the threshold gates' and memory flags' input ports allow to model the fact that memory flags are not necessarily reset at the same time, and signals may arrive shifted in time at the threshold gates.</ce:para><ce:para id="pr1480" view="all">As mentioned earlier, for simplicity we consider the outgoing channels to remote nodes as part of the node. Hence, the output ports of node <ce:italic>i</ce:italic> comprise the output ports <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si27.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, of the channels disseminating its state <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. In addition, in order to solve the actual problem of clock generation, we include the locally computed discrete clock value <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> as an output port.</ce:para><ce:section id="se0250" view="all"><ce:label>4.1</ce:label><ce:section-title id="st0260">Protocols and problem formulation</ce:section-title><ce:para id="pr1490" view="all">We next formalize the concept of a protocol, like the one presented in Section <ce:cross-ref refid="se0270" id="crf1010">5</ce:cross-ref>, followed by what it means for a protocol to solve self-stabilizing clock synchronization in spite of <ce:italic>f</ce:italic> faults. Formally, a <ce:italic>protocol (for an n-node system)</ce:italic> is a compound module consisting of <ce:italic>n</ce:italic> modules referred to as nodes. The nodes are to be specified as modules themselves, and in our case will follow the layout we just described. It thus remains to state in Section <ce:cross-ref refid="se0270" id="crf1020">5</ce:cross-ref> which (randomized) watchdog timers, memory flags and threshold gates our protocol uses as well as the state transition modules' transition and reset functions.</ce:para><ce:para id="pr1500" view="all">A <ce:italic>clock synchronization module with</ce:italic> <mml:math altimg="si320.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math> <ce:italic>nodes, clock imprecision Î£, amortized frequency bounds</ce:italic> <mml:math altimg="si321.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math><ce:italic>, slacks</ce:italic> <mml:math altimg="si322.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math><ce:italic>, maximum frequency</ce:italic> <mml:math altimg="si323.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math><ce:italic>, and at most</ce:italic> <mml:math altimg="si324.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math> <ce:italic>faults</ce:italic> is a module without input ports and with output ports <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si8.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>. Its module specification is extendable. An execution of the module on <mml:math altimg="si325.gif" overflow="scroll"><mml:mi mathvariant="double-struck">R</mml:mi></mml:math> is feasible, iff there exists a subset <mml:math altimg="si326.gif" overflow="scroll"><mml:mi mathvariant="script">C</mml:mi></mml:math> of <mml:math altimg="si327.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math> of size at least <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> satisfying that<ce:list id="ls0150"><ce:list-item id="li0540"><ce:label>â¢</ce:label><ce:para id="pr1510" view="all"><mml:math altimg="si328.gif" overflow="scroll"><mml:mo>â</mml:mo><mml:mi>t</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si329.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">C</mml:mi></mml:math>: <mml:math altimg="si330.gif" overflow="scroll"><mml:mo stretchy="false">|</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mo>â©½</mml:mo><mml:mi>Î£</mml:mi></mml:math>,</ce:para></ce:list-item><ce:list-item id="li0550"><ce:label>â¢</ce:label><ce:para id="pr1520" view="all">â<ce:italic>t</ce:italic>, <mml:math altimg="si331.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:math>, <mml:math altimg="si15.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, <mml:math altimg="si332.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">C</mml:mi></mml:math>: <mml:math altimg="si333.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>â©½</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â©½</mml:mo><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math>, and</ce:para></ce:list-item><ce:list-item id="li0560"><ce:label>â¢</ce:label><ce:para id="pr1530" view="all">â<ce:italic>t</ce:italic>, <mml:math altimg="si334.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi><mml:mo>,</mml:mo><mml:mi>t</mml:mi><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, <mml:math altimg="si332.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">C</mml:mi></mml:math>: <mml:math altimg="si335.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â©½</mml:mo><mml:mo stretchy="false">â</mml:mo><mml:msup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">â</mml:mo></mml:math>.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr1540" view="all">We say a protocol <ce:italic>Î </ce:italic> (for an <ce:italic>n</ce:italic>-node system) with no input ports and output ports <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si8.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math>, <ce:italic>solves self-stabilizing clock synchronization with clock imprecision Î£, amortized frequency bounds</ce:italic> <mml:math altimg="si336.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math><ce:italic>, slacks</ce:italic> <mml:math altimg="si337.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:msubsup><mml:mrow><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math><ce:italic>, maximum frequency</ce:italic> <mml:math altimg="si323.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math><ce:italic>, at most f faults, and stabilization time T</ce:italic> (<ce:italic>with probability p</ce:italic>) iff it is an <ce:italic>f</ce:italic>-tolerant, (with probability at least <ce:italic>p</ce:italic>) <ce:italic>T</ce:italic>-stabilizing implementation of the clock synchronization module with the respective parameters.</ce:para><ce:para id="pr1550" view="all">A (real-world) implementation will output <ce:italic>bounded clocks of size</ce:italic> <mml:math altimg="si338.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math> only. In this case the output ports do not yield <mml:math altimg="si339.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, but only <mml:math altimg="si340.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mi mathvariant="normal">mod</mml:mi><mml:mspace width="0.2em"/><mml:mi>K</mml:mi></mml:math>. Nevertheless, we introduced the signals <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> as abstract functions in this setting, as they allow to state the frequency bounds concisely. Note that there is no physical counterpart of these values in the real-world system; to be strictly accurate, it would be necessary to qualify the above definitions further by "with bounded clocks of size <ce:italic>K</ce:italic>" in order to distinguish this version of the problem from the abstract one with unbounded clocks.</ce:para></ce:section><ce:section id="se0260" view="all"><ce:label>4.2</ce:label><ce:section-title id="st0270">Practical implementability issues</ce:section-title><ce:para id="pr1560" view="all">Our formal model incorporates a precise semantics of what it means for a module to implement some other module, namely, inclusion of <ce:italic>all</ce:italic> feasible (sub-)executions. Unfortunately, however, this strong requirement must often be relaxed when it comes to real implementations. This is primarily a consequence of the fact that there is no physical implementation of a circuit that can avoid <ce:italic>metastability</ce:italic>. Since preventing certain inputs to a module requires output guarantees from others, this is a challenging problem to systems that are self-stabilizing <ce:italic>or</ce:italic> tolerate persistent faults; combining these properties complicates this issue further.</ce:para><ce:para id="pr1570" view="all">More specifically, in order to faithfully implement their specifications, basic modules must be able to (i) deal with <ce:italic>all</ce:italic> possible inputs and (ii) recover reliably from transient faults. Unfortunately, (i) is often impossible to achieve with real circuits. For example, simultaneous input changes may drive any implementation of a Muller C-gate into a metastable state, which implies that its output ports do not even carry signals according to our definition, and are hence not feasible. Of course, metastability can also be caused by physical faults affecting the module; such faults can obviously not be analyzed within our model either. This possibility obviously invalidates any guarantees that compound implementations containing this instance may provide, unless they can mask the error due to fault-tolerance. Moreover, real circuits cannot guarantee (ii) under all circumstances either, as it is impossible to always prohibit the propagation of metastable inputs to the outputs and the system may contain feedback-loops.</ce:para><ce:para id="pr1580" view="all">In principle, it would be possible to extend the presented model to cover also generation and propagation of metastability explicitly, by replacing the finite alphabet <mml:math altimg="si59.gif" overflow="scroll"><mml:mi mathvariant="double-struck">S</mml:mi></mml:math> and discrete events with a continuous range of signal values (the voltages) <ce:cross-ref refid="br0430" id="crf1030">[43]</ce:cross-ref>. Since this would dramatically increase the complexity of any analysis, we choose a different approach that also allows us to handle other implementation intricacies in a pragmatic way.</ce:para><ce:para id="pr1590" view="all">In fact, even in the absence of metastability, it is not necessarily simple and even possible for real implementations to guarantee (ii) under all circumstances. Apart from the fact that transient faults may lead to permanent errors by damaging physical components,<ce:cross-ref refid="fn0160" id="crf1040"><ce:sup loc="post">16</ce:sup></ce:cross-ref><ce:footnote id="fn0160"><ce:label>16</ce:label><ce:note-para id="np0180" view="all">We remark that, technically speaking, excessively high voltages on the input wires could also be interpreted as an "input violation", as this violates the definition of our signals. However, it makes sense to interpret such (hopefully exceptional) events as a fault of the module.</ce:note-para></ce:footnote> our model does not prohibit that temporarily infeasible inputs result in permanent infeasibility, i.e., even when inputs become benign again at a later state of the execution of the module in question, there is no suffix of the execution that is feasible. The oscillator implementation given in <ce:cross-ref refid="en0070" id="crf1050">Example 3.6</ce:cross-ref> demonstrates this issue, and further modules exhibiting persistently faulty behavior after temporary violations of input constraints are easily conceived.</ce:para><ce:para id="pr1600" view="all">As we aim for self-stabilization, it is clear that we cannot allow implementations that suffer from such drawbacks: Neither transient faults nor their consequences, i.e., temporarily arbitrary executions, may result in permanent faults. Clearly, both recovery from transient failures and resilience of a basic module to erroneous inputs, and hence the whole definition of what actually constitutes a transient fault in our model, is implicitly defined by the physical realization of an implementation.</ce:para><ce:para id="pr1610" view="all">These observations have important consequences. On the one hand, careful design of the basic modules is of paramount importance. For instance, in a final product, a watchdog timer must not have its duration stored in a memory register that can be corrupted by a temporary charge injection (e.g. due to a particle hit), a ring oscillator should not be able to run unchecked at e.g. twice its frequency indefinitely (e.g. triggered by a voltage pulse), and one has to make sure that stateful components like memory flags or state transition modules eventually "forget" about potentially erroneous inputs in the past, and eventually behave according to their specification again. As discussed above, however, this cannot usually be perfect: There will always be (rare) scenarios, where an implemented circuit will not work like an ideal one, i.e., violate its specification. We incorporate this in our model, in a pragmatic well-known from critical system design, by means of the notion of imperfect <ce:italic>implementation coverage</ce:italic>. For a given module implementation, the coverage implicitly or explicitly determines the fraction of all possibly executions in which the implementation works as specified. Since exceptional scenarios like metastability are usually extremely rare, we do not bother with defining the notion of coverage formally here: The coverage should be very close to 100% anyway. In Section <ce:cross-ref refid="se0360" id="crf1060">6</ce:cross-ref>, we will argue that each of our basic modules will work as specified, except for very rare situations that may trigger metastability due to a violation of input timing constraints.</ce:para><ce:para id="pr1620" view="all">Thanks to this approach, algorithms and proofs can rely on sufficiently simple specifications of basic modules, which usually also admit robust and efficient implementations in practice. Any unhandled scenarios are relegated to imperfect implementation coverage. This feature is essential for devising proofs of reasonable complexity that show self-stabilization of all compound modules, implying that the system indeed will recover once transient faults of (basic) modules cease. Due to the hierarchical composition of modules, compound modules fully derive their behavior from their submodules and can therefore be analyzed based on the properties of their submodules, while we may switch at will between viewing a module as given (i.e., basic), analyzing it in more detail as a compound implementation, or (for low-level modules) analyzing it in an even more detailed model. This way, our approach also inherently supports tight interaction between algorithmic design and design of the basic building blocks used in the algorithms.</ce:para></ce:section></ce:section><ce:section id="se0270" view="all"><ce:label>5</ce:label><ce:section-title id="st0280">The FATAL<ce:sup loc="post">+</ce:sup> clock synchronization protocol</ce:section-title><ce:para id="pr1630" view="all">In this section, we recast the self-stabilizing clock synchronization algorithm introduced in <ce:cross-ref refid="br0130" id="crf1070">[13]</ce:cross-ref> in the modeling framework of the previous section and summarize its most important properties. Since the main focus of our paper is on the implementation of our algorithm in this model, there is no need to provide a detailed description of the stabilization mechanism, let alone formal proofs of the stated claims; the analysis of the correctness and performance of the algorithm in <ce:cross-ref refid="br0130" id="crf1080">[13]</ce:cross-ref> is based on a simpler abstract system model, assuming a globally valid end-to-end delay bound <ce:italic>d</ce:italic> covering any (local and remote) communication and processing action, which is fully compatible with our modeling framework. More specifically, all that is needed in order to reuse the results of the analysis in <ce:cross-ref refid="br0130" id="crf1090">[13]</ce:cross-ref> is to compute the maximum end-to-end delay occurring in the implementation of our algorithm in the modeling framework introduced in Section <ce:cross-ref refid="se0130" id="crf1100">2.2</ce:cross-ref>.</ce:para><ce:para id="pr1640" view="all">Recall from Section <ce:cross-ref refid="se0130" id="crf1110">2.2</ce:cross-ref> that our top-level clock synchronization module is implemented as a compound module consisting of <ce:italic>n</ce:italic> nodes and their connecting top-level channels (with maximum delay <mml:math altimg="si341.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub></mml:math>). Every node, in turn, is a compound module made up of a state transition module, watchdog timers, memory flags, and threshold modules interconnected by channels (modeling various delays) as shown in <ce:cross-ref refid="fg0050" id="crf1120">Fig. 5</ce:cross-ref>. Finally, a state transition module represents several communicating concurrent asynchronous state machines (with maximum transition time <mml:math altimg="si342.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Trans</mml:mi></mml:mrow></mml:msub></mml:math>). It ensures that state transitions of every constituent state machine occur in an orderly fashion, i.e., that every transition happens exactly once and, if need be, memory flags are consistently reset. The state of each state machine is encoded in a few bits and conveyed via the top-level channels to all other modules in the system that need to receive it on some input port. Given this simple internal structure, computing the resulting end-to-end delay bound <ce:italic>d</ce:italic> (or, for the quick cycle, <mml:math altimg="si343.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si344.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, see below) from the constituent delay bounds is straightforward, see Section <ce:cross-ref refid="se0360" id="crf1130">6</ce:cross-ref> for details.</ce:para><ce:section id="se0280" view="all"><ce:label>5.1</ce:label><ce:section-title id="st0290">State machine representation</ce:section-title><ce:para id="pr1650" view="all">Obviously, the entire logic of our algorithm is encoded in the state machines of a node. In <ce:cross-ref refid="br0130" id="crf1140">[13]</ce:cross-ref>, we use a graphical representation that also reveals the layered structure imposed by their communication. We already employed this description in <ce:cross-ref refid="fg0010" id="crf1150">Fig. 1</ce:cross-ref>. With the definitions from the previous section at hand, we can now give our graphical representation a precise formal meaning that will allow us to translate the results from <ce:cross-ref refid="br0130" id="crf1160">[13]</ce:cross-ref> to our modeling framework.</ce:para><ce:para id="pr1660" view="all">Our graphical representation defines the set of possible states <mml:math altimg="si59.gif" overflow="scroll"><mml:mi mathvariant="double-struck">S</mml:mi></mml:math> of a state machine (in <ce:cross-ref refid="fg0010" id="crf1170">Fig. 1</ce:cross-ref> <ce:italic>ready</ce:italic>, <ce:italic>propose</ce:italic>, and <ce:italic>increase</ce:italic>) and, by means of the arrows between the states, the set of possible state transitions <mml:math altimg="si345.gif" overflow="scroll"><mml:mi mathvariant="script">T</mml:mi><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">S</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:math> (here <ce:italic>ready</ce:italic> to <ce:italic>propose</ce:italic>, <ce:italic>propose</ce:italic> to <ce:italic>increase</ce:italic>, and <ce:italic>increase</ce:italic> to <ce:italic>ready</ce:italic>). If, for a state transition from <ce:italic>s</ce:italic> to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, <mml:math altimg="si346.gif" overflow="scroll"><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â </mml:mo><mml:mo>â</mml:mo></mml:math>, i.e., there are memory flags that need to be reset, <mml:math altimg="si347.gif" overflow="scroll"><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> is given in a rectangular box on the arrow. Since for each node <ce:italic>i</ce:italic> and state <ce:italic>s</ce:italic> we will always reset all memory flags <mml:math altimg="si250.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math> for <mml:math altimg="si348.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math> together, we simply write <mml:math altimg="si349.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math> in such a box to represent the fact that all flags <mml:math altimg="si249.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si348.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math>, <mml:math altimg="si350.gif" overflow="scroll"><mml:mi>s</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:math>, are to be reset. Note that some of these states may be from a different state machine, i.e., the states <mml:math altimg="si349.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:math> need not all be from <mml:math altimg="si59.gif" overflow="scroll"><mml:mi mathvariant="double-struck">S</mml:mi></mml:math>.</ce:para><ce:para id="pr1670" view="all">Completing the description, for each <mml:math altimg="si351.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi mathvariant="script">T</mml:mi></mml:math>, <mml:math altimg="si352.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> is given by the label next to the respective arrow. Again, we make use of a condensed notation. Assume that the state machine in question is part of node <ce:italic>i</ce:italic>. We will employ threshold conditions like "<mml:math altimg="si353.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> <mml:math altimg="si354.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math>", whereby we refer to at least <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> of <ce:italic>i</ce:italic>'s memory flags <mml:math altimg="si355.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> being in state 1, or "<mml:math altimg="si356.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> <mml:math altimg="si354.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> or <mml:math altimg="si357.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>", which is true if <mml:math altimg="si358.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mo>â</mml:mo></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:mrow></mml:msub><mml:mi mathvariant="normal">max</mml:mi><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo><mml:mo>â©¾</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>, i.e., for at least <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> nodes <ce:italic>j</ce:italic> flag <mml:math altimg="si355.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> or flag <mml:math altimg="si359.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> is in state 1. An example for such a rule is the transition from <ce:italic>propose</ce:italic> to <ce:italic>increase</ce:italic> in <ce:cross-ref refid="fg0010" id="crf1180">Fig. 1</ce:cross-ref>. Such conditions will be translated to a binary signal by feeding the memory flags' signals (or, in the latter case, the output of <ce:italic>n</ce:italic> OR-gates with inputs <mml:math altimg="si355.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si359.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:math>) into a threshold gate (of threshold <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> or <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>, respectively). Further abbreviations we use for timeouts. Recall that for a timeout <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, we omit the clock <ce:italic>C</ce:italic> from the notation, i.e., write <mml:math altimg="si281.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> instead of <mml:math altimg="si50.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Timeout <mml:math altimg="si281.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> switches to 1 after <ce:italic>T</ce:italic> local time units (i.e., between <mml:math altimg="si360.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>Ï</mml:mi></mml:math> and <mml:math altimg="si361.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Trans</mml:mi></mml:mrow></mml:msub></mml:math> reference time) has passed since the last switch to state <ce:italic>s</ce:italic> was triggered. In case it is part of a transition rule, we write <mml:math altimg="si281.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> for the condition <mml:math altimg="si362.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math>, and if the transition goes from the state <ce:italic>s</ce:italic> to which the timeout corresponds to some state <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>, we simply write <ce:italic>T</ce:italic>. For instance, the condition "<mml:math altimg="si363.gif" overflow="scroll"><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi></mml:math> local time has passed" in <ce:cross-ref refid="fg0010" id="crf1190">Fig. 1</ce:cross-ref> is concisely stated as "<mml:math altimg="si363.gif" overflow="scroll"><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi></mml:math>".</ce:para><ce:para id="pr1680" view="all">Finally, as for memory flag resets, transition rules may also refer to a state <ce:italic>s</ce:italic> of another state machine. In the special case that a predicate solely depends on the current state of another of the node's state machines, we write "in <ce:italic>s</ce:italic>" or "not in <ce:italic>s</ce:italic>" to indicate the predicates <mml:math altimg="si287.gif" overflow="scroll"><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>s</mml:mi></mml:math> and <mml:math altimg="si364.gif" overflow="scroll"><mml:mo>Â¬</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, respectively, where <ce:italic>p</ce:italic> is the input port connected to the channel communicating the other state machine's state to the state transition module. Finally, the above rules can be composed by logical AND or OR, which we display by connecting expressions with <ce:bold>and</ce:bold> or <ce:bold>or</ce:bold>, respectively. In <ce:cross-ref refid="fg0010" id="crf1200">Fig. 1</ce:cross-ref>, such a composition occurs in <mml:math altimg="si365.gif" overflow="scroll"><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mi mathvariant="italic">ready</mml:mi></mml:mrow><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">propose</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para></ce:section><ce:section id="se0290" view="all"><ce:label>5.2</ce:label><ce:section-title id="st0300">Overview of the algorithm</ce:section-title><ce:para id="pr1690" view="all">Each node is a collection of several state machines that are organized in a layered structure. On each layer, the state machines of the (at least <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>) non-faulty nodes cooperate in order to establish certain synchronization properties of their output signals. The higher is a state machine in the hierarchy, the stronger are these guarantees; the lower it is, the weaker are the synchronization properties its input signals need to satisfy for stabilization. The lowest-layer state machine utilizes randomization to recover from any configuration (provided its basic modules are correct (again), i.e., guarantee feasible executions). Each other layer utilizes auxiliary information from the layer below to stabilize. Finally, the top level state machine outputs the logical clocks <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>.</ce:para><ce:para id="pr1700" view="all">More specifically, we have the following state machines.<ce:list id="ls0160"><ce:list-item id="li0570"><ce:label>â¢</ce:label><ce:para id="pr1710" view="all">At the top level, we have the <ce:italic>quick cycle</ce:italic> state machine (<ce:cross-ref refid="fg0060" id="crf1210">Fig. 6</ce:cross-ref><ce:float-anchor refid="fg0060"/>) that outputs <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. The quick cycle is very similar to the algorithm given in <ce:cross-ref refid="fg0010" id="crf1220">Fig. 1</ce:cross-ref>, except that it is coupled to the state machine beneath it in order to ensure eventual stabilization. Once the system is stabilized, it consistently and deterministically increases <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> at a high frequency while guaranteeing small clock imprecision.</ce:para></ce:list-item><ce:list-item id="li0580"><ce:label>â¢</ce:label><ce:para id="pr1720" view="all">The <ce:italic>main state machine</ce:italic> (<ce:cross-ref refid="fg0080" id="crf1230">Fig. 8</ce:cross-ref>) is the centerpiece of the stabilization mechanism. Once stabilized, it generates slow, roughly synchronized "pulses" within certain frequency bounds. These pulses can be seen as a "heartbeat" of the system; at each pulse, the quick cycle's clocks are reset to 0 and the quick cycle's state machines are forced into state <mml:math altimg="si366.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> (corresponding to the <ce:italic>increase</ce:italic> state in <ce:cross-ref refid="fg0010" id="crf1240">Fig. 1</ce:cross-ref>). This enforces exactly the initial synchrony that we explained to be necessary for the correct operation of the algorithm from <ce:cross-ref refid="fg0010" id="crf1250">Fig. 1</ce:cross-ref>.</ce:para><ce:para id="pr1730" view="all">By itself, however, the main state machine is not capable of recovering from <ce:italic>every</ce:italic> possible initial configuration of the non-faulty nodes. In certain cases, it requires some coarse synchrony to be established first in order to stabilize, which is probabilistically provided by the underlying layer. We remark that, once stabilized, the main state machine operates fully independently of this layer (and thus deterministically).</ce:para></ce:list-item><ce:list-item id="li0590"><ce:label>â¢</ce:label><ce:para id="pr1740" view="all">The auxiliary information potentially required for stabilization by the main state machine is provided by a simple intermediate layer we refer to as <ce:italic>extension</ce:italic> of the main state machine (<ce:cross-ref refid="fg0090" id="crf1260">Fig. 9</ce:cross-ref>). Essentially, it is supposed to be consistently reset by the underlying layer and then communicate information vital for stabilization to the main state machine. This information depends both on the time of reset and the current states of the <ce:italic>n</ce:italic> main state machines, which it therefore monitors.</ce:para></ce:list-item><ce:list-item id="li0600"><ce:label>â¢</ce:label><ce:para id="pr1750" view="all">Finally, the <ce:italic>resynchronization routine</ce:italic> (<ce:cross-ref refid="fg0100" id="crf1270">Fig. 10</ce:cross-ref>) utilizes randomized timeouts to consistently generate events at all non-faulty nodes that could be understood as "randomized pulses". Such a pulse is correct for our purposes if all non-faulty nodes generate a respective event in coarse synchrony and no non-faulty node generates another such event within a time window of a certain length. The crux of the matter is that a single such pulse suffices to achieve stabilization deterministically. Relying on (pseudo-)randomness on this layer greatly simplifies the task of overcoming the interference by faulty nodes at low costs in both time and communication. We note that the main state machine masks this randomness once stabilization is achieved, facilitating deterministic behavior of the higher levels and, ultimately, the nodes' clocks <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr1760" view="all">We will now present the individual state machines. We refrain from a discussion of choosing appropriate durations for the timers, confining ourselves to stating a feasible family of choices later on.</ce:para></ce:section><ce:section id="se0300" view="all"><ce:label>5.3</ce:label><ce:section-title id="st0310">The quick cycle</ce:section-title><ce:para id="pr1770" view="all">The quick cycle state machine is depicted in <ce:cross-ref refid="fg0060" id="crf1280">Fig. 6</ce:cross-ref>. It introduces an additional notation: As the states <mml:math altimg="si367.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">ready</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> and <mml:math altimg="si366.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> are not distinguished in any of the transition conditions in the other state machines, the same state <mml:math altimg="si368.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">none</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> can be communicated here. This allows for a very efficient single-bit representation of the communicated states. In <ce:cross-ref refid="fg0060" id="crf1290">Fig. 6</ce:cross-ref>, this is expressed by dividing the circles representing states, putting the state names in the upper part and the communicated states in the lower part. Apart from saving a wire, this permits to use trivial encoding and decoding of the signal, a simplification of the logic that minimizes delays and therefore maximizes the clock frequency that can be achieved.</ce:para><ce:para id="pr1780" view="all">Essentially, the quick cycle works as the algorithm given in <ce:cross-ref refid="fg0010" id="crf1300">Fig. 1</ce:cross-ref>, where the logical clock is increased whenever the machine switches to state <mml:math altimg="si366.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math>. However, the quick cycle differs from the algorithm in <ce:cross-ref refid="fg0010" id="crf1310">Fig. 1</ce:cross-ref> in that there is an interface to the main state machine given in <ce:cross-ref refid="fg0080" id="crf1320">Fig. 8</ce:cross-ref>. These state machines communicate by means of two signals only, one for each direction of the communication: (i) The quick cycle state machine of node <ce:italic>i</ce:italic> generates the <mml:math altimg="si371.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> signal by which it exerts some limited influence on the time between two successive pulses generated by the main state machine, and (ii) it observes the <mml:math altimg="si372.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> timer. This timer is coupled to the state <ce:italic>accept</ce:italic> of <ce:cross-ref refid="fg0080" id="crf2790">Fig. 8</ce:cross-ref>, in which the pulse synchronization algorithm generates a new pulse. The signal's purpose is to enforce a consistent reset of the quick cycle state machine (once the main state machine has stabilized). The feedback mechanism (i) makes sure that, during regular operation, the reset of the quick cycle does not have any effect on the clocks. This is guaranteed by triggering pulses (by means of the non-faulty nodes briefly changing the <mml:math altimg="si371.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> signal to 1 and back to 0 again) exactly at the wrap-around of the logical clock <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>, i.e., at the time when <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> is "increased" from the maximal clock value <mml:math altimg="si373.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mi>b</mml:mi></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:math> (of a <ce:italic>b</ce:italic>-bit clock) to <mml:math altimg="si374.gif" overflow="scroll"><mml:mn>0</mml:mn><mml:mo>=</mml:mo><mml:mi>K</mml:mi><mml:mi mathvariant="normal">mod</mml:mi><mml:mspace width="0.2em"/><mml:mi>K</mml:mi></mml:math>.</ce:para><ce:para id="pr1790" view="all">Similar to <ce:cross-ref refid="fg0010" id="crf1340">Fig. 1</ce:cross-ref>, the transition conditions of the quick cycle ensure that the logical clocks never have a clock imprecision of more than one. To increase the frequency further, each node could increase the number of clock "ticks" generated in each iteration of the quick cycle by means of a high-frequency local clock (essentially, a watchdog timer together with a counter), at the expense of larger clock imprecision (see <ce:cross-ref refid="br0130" id="crf1350">[13]</ce:cross-ref>).</ce:para></ce:section><ce:section id="se0310" view="all"><ce:label>5.4</ce:label><ce:section-title id="st0320">Main state machine</ce:section-title><ce:para id="pr1800" view="all">Before we show the complete main state machine, consider its <ce:italic>basic cycle</ce:italic> depicted in <ce:cross-ref refid="fg0070" id="crf1360">Fig. 7</ce:cross-ref><ce:float-anchor refid="fg0070"/>. Once the main state machines have stabilized, all non-faulty nodes will undergo the states of the basic cycle in rough synchrony. The states <ce:italic>sleep</ce:italic>, <mml:math altimg="si375.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">sleep</mml:mi></mml:mrow><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">waking</mml:mi></mml:mrow></mml:math>, and <ce:italic>waking</ce:italic> serve diagnostic purposes related to the stabilization process. The duration <mml:math altimg="si376.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> of the timer <mml:math altimg="si377.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> triggering the transition from <ce:italic>waking</ce:italic> to <ce:italic>ready</ce:italic> is so large that the node will always be in state <ce:italic>waking</ce:italic> long before the timer expires. Thus, we can see that the basic cycle has an underlying structure that is very similar to the quick cycle. Due to the more complicated logic and conditions on the duration of timers required for the stabilization mechanism, it is however executed at a frequency that is by orders of magnitude smaller than that of the quick cycle.</ce:para><ce:para id="pr1810" view="all">The difference in the rules for switching to <ce:italic>propose</ce:italic> and <ce:italic>accept</ce:italic>, respectively, are also mostly related to the stabilization process. An exception is the condition "<mml:math altimg="si378.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> <ce:bold>and</ce:bold> <mml:math altimg="si379.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math>" that can trigger a transition from <ce:italic>ready</ce:italic> to <ce:italic>propose</ce:italic>. Choosing <mml:math altimg="si378.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> smaller than <mml:math altimg="si380.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub></mml:math> and taking the signal <mml:math altimg="si381.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> into account, we permit the quick cycle to adjust the time between pulses (i.e., switches to <ce:italic>accept</ce:italic>) triggered by the main state machine: Once both state machines are roughly synchronized among all non-faulty nodes, the main state machines will always be in state <ce:italic>ready</ce:italic> before the logical clocks <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> maintained by the quick cycle reach the wrap-around (i.e., become 0 modulo <ce:italic>K</ce:italic>) and trigger the <mml:math altimg="si371.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> signals. Moreover, this happens at all nodes at close times and before any timer <mml:math altimg="si382.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">ready</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> expires at one of the non-faulty nodes. Hence, by a reasoning similar as for <ce:cross-ref refid="fg0010" id="crf1370">Fig. 1</ce:cross-ref>, all non-faulty nodes will switch to <ce:italic>propose</ce:italic> and subsequently <ce:italic>accept</ce:italic> in a well-synchronized fashion, caused by the wrap-around of the logical clocks.</ce:para><ce:para id="pr1820" view="all">An important observation that is proved in <ce:cross-ref refid="br0130" id="crf1380">[13]</ce:cross-ref> is that, once the main state machines stabilized, the nodes execute the basic cycle deterministically and any state transition is certainly completed <ce:italic>before</ce:italic> one of the conditions for leaving the basic cycle can be satisfied. Apart from small additional slacks in the timer durations, this is a consequence of the fact that none of the transition conditions of the basic cycle refer to the probabilistic lower layers of the protocol; all evaluated timers and memory flags solely involve states of the basic cycle only, and the <mml:math altimg="si371.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> signal is provided by the quick cycle. As we will discuss in Section <ce:cross-ref refid="se0360" id="crf1390">6</ce:cross-ref>, this property prevents non-faulty nodes from introducing metastability once stabilization is achieved.</ce:para><ce:para id="pr1830" view="all">We now turn our attention to the full main state machine that is shown in <ce:cross-ref refid="fg0080" id="crf1400">Fig. 8</ce:cross-ref><ce:float-anchor refid="fg0080"/>. Compared to the basic cycle, we have two additional states, <ce:italic>resync</ce:italic> and <ce:italic>join</ce:italic>, that can be occupied by non-faulty nodes during the stabilization process only, and an additional reset of memory flags on the transition from <mml:math altimg="si383.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">sleep</mml:mi></mml:mrow><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">waking</mml:mi></mml:mrow></mml:math> to <ce:italic>waking</ce:italic>.</ce:para><ce:para id="pr1840" view="all">The various conditions for leaving the basic cycle and switching to <ce:italic>recover</ce:italic> are consistency checks. A node will only leave the basic cycle if it is certain that the system is not operating as desired. As the high-level operation of the algorithm is not the subject of this article, we limit our exposition to briefly discussing the two possible ways to re-enter the basic cycle, corresponding to two different stabilization mechanisms.</ce:para><ce:para id="pr1850" view="all">The first stabilization mechanism is very simple, and it is much faster than the second one. Assuming that at least <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> non-faulty nodes are executing the basic cycle (i.e., the main state machines have already stabilized if we consider the remaining nodes faulty), a recovering node just needs to "jump on the train" and start executing the basic cycle as well. This is realized by the condition for switching from <ce:italic>recover</ce:italic> to <ce:italic>accept</ce:italic>. It is not hard to see that due to this condition, the node will switch to <ce:italic>accept</ce:italic> in sufficient synchrony with the majority of <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> synchronized, non-faulty nodes within at most two consecutive pulses and subsequently follow the basic cycle as well.</ce:para><ce:para id="pr1860" view="all">Note that this condition makes direct use of the state signals instead of using memory flags. This potentially induces metastability at the joining node, but we will explain in Section <ce:cross-ref refid="se0360" id="crf1410">6</ce:cross-ref> why the risk is low.<ce:cross-ref refid="fn0170" id="crf1420"><ce:sup loc="post">17</ce:sup></ce:cross-ref><ce:footnote id="fn0170"><ce:label>17</ce:label><ce:note-para id="np0190" view="all">Recall that during stabilization we cannot exclude metastability with certainty even in the absence of any further faults.</ce:note-para></ce:footnote> On the plus side, this simplifies the algorithm, as the node does not need to implement frequent resets of the respective memory flags to ensure consistent observation of others' states; the sending nodes will just do this implicitly by leaving state <ce:italic>accept</ce:italic>.</ce:para><ce:para id="pr1870" view="all">Clearly, the first stabilization mechanism will fail in certain settings. Most obviously, it cannot "restart" the system if all nodes are in state <ce:italic>recover</ce:italic>. Hence it may not surprise that the second stabilization mechanism, which deals with such cases, is much more involved. Careful attention has to be paid to avoiding the potential for system-wide dead- or live-locks. In view of our design goals, state-of-the-art deterministic solutions for this problem are not sufficiently efficient. Hence, the main state machine relies on a probabilistic lower layer that provides certain guarantees with a very large probability.</ce:para></ce:section><ce:section id="se0320" view="all"><ce:label>5.5</ce:label><ce:section-title id="st0330">Extension of the main state machine</ce:section-title><ce:para id="pr1880" view="all">The extension of the main state machine, given in <ce:cross-ref refid="fg0090" id="crf1430">Fig. 9</ce:cross-ref><ce:float-anchor refid="fg0090"/>, can be seen as a simple control structure for the phases of stabilization. The intricacy lies in designing the interface such that this control does not interfere with the basic cycle if the system is stable. Consequently, the influence of the extension of the main state machine is limited to (i) resetting the <ce:italic>join</ce:italic> and <mml:math altimg="si383.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">sleep</mml:mi></mml:mrow><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">waking</mml:mi></mml:mrow></mml:math> flags upon "initializing" the stabilization process (by switching from <ce:italic>dormant</ce:italic> to <ce:italic>passive</ce:italic>) and (ii) providing the signals of the timers <mml:math altimg="si384.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">active</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> and <mml:math altimg="si385.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">passive</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> the main state machine utilizes in the transition rule from <ce:italic>recover</ce:italic> to <ce:italic>join</ce:italic>.</ce:para><ce:para id="pr1890" view="all">Roughly speaking, the main state machines will stabilize deterministically under the condition that their extensions switch at all non-faulty nodes from <ce:italic>dormant</ce:italic> to <ce:italic>passive</ce:italic> in rough synchrony and then do not switch back to <ce:italic>dormant</ce:italic> too quickly, i.e., before the second stabilization mechanism of the main state machine completes its work. Putting it simply, we require a single, coarsely synchronized pulse, whose generation is the purpose of the lowest layer we present now.</ce:para></ce:section><ce:section id="se0330" view="all"><ce:label>5.6</ce:label><ce:section-title id="st0340">Resynchronization state machine</ce:section-title><ce:para id="pr1900" view="all">The resynchronization state machine is specified in <ce:cross-ref refid="fg0100" id="crf1440">Fig. 10</ce:cross-ref><ce:float-anchor refid="fg0100"/>. Strictly speaking, it actually consists of two separate state machines, one of which is however extremely simple. Every now and then, each node will briefly switch to the <ce:italic>init</ce:italic> state, seeking to induce the generation of a "pulse" (where the pulse here is locally triggered by switching to <ce:italic>resync</ce:italic>) that causes a consistent switch of all non-faulty nodes from <ce:italic>dormant</ce:italic> to <ce:italic>passive</ce:italic>. Leaving <ce:italic>resync</ce:italic> will force the extension state machine back into state <ce:italic>dormant</ce:italic>. This is the only interaction with the above layer, which is sufficient if a pulse is successfully generated once.</ce:para><ce:para id="pr1910" view="all">The generation of a pulse is achieved by all non-faulty nodes following the advice of a <ce:italic>single</ce:italic> node switching to <ce:italic>init</ce:italic>, thus establishing the common time base required for a synchronized pulse. Two obstacles are to be overcome: possibly some of the non-faulty nodes already believe that the system is in the middle of an attempt to stabilize (i.e., they are already in state <ce:italic>resync</ce:italic> and thus not ready to follow the advice given by another node) and possibly inconsistent information by nodes that remain faulty (causing only <ce:italic>some</ce:italic> of the non-faulty nodes to switch to <ce:italic>resync</ce:italic>).</ce:para><ce:para id="pr1920" view="all">In contrast to the higher levels, however, we are satisfied if only <ce:italic>occasionally</ce:italic> a successful pulse is generated. Hence, the above issues can be overcome by randomization. The source of randomness here is the randomized timer <mml:math altimg="si386.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">wait</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math>. The distribution <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> and the logic of the second, more complicated state machine including the state <ce:italic>resync</ce:italic> are designed such that there is a large probability that within time <mml:math altimg="si388.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> all non-faulty nodes will consistently switch to state <ce:italic>resync</ce:italic>. This <mml:math altimg="si3.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> is essentially the factor by which the second stabilization mechanism of the main state machine is slower than the first one.</ce:para></ce:section><ce:section id="se0340" view="all"><ce:label>5.7</ce:label><ce:section-title id="st0350">Timer durations</ce:section-title><ce:para id="pr1930" view="all">Clearly, in order for the protocol to operate as desired, the timer durations need to satisfy certain constraints. We state a feasible family of durations here; the minimal constraints that are required by the proofs are given in <ce:cross-ref refid="br0130" id="crf1450">[13]</ce:cross-ref>.</ce:para><ce:para id="pr1940" view="all">Recall that <mml:math altimg="si389.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>1</mml:mn></mml:math> and that <ce:italic>d</ce:italic> bounds the maximal end-to-end delay incurred between the time when a state transition condition is met and the time when the respective signal transition is observed at all receivers. As the logic of the quick cycle is much simpler than that of the other state machines, it typically permits much tighter upper and lower bounds on this end-to-end delay. As in <ce:cross-ref refid="br0130" id="crf1460">[13]</ce:cross-ref>, these bounds are denoted by <mml:math altimg="si343.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si390.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>â©½</mml:mo><mml:mi>d</mml:mi></mml:math>. In Section <ce:cross-ref refid="se0360" id="crf1470">6</ce:cross-ref>, we will discuss how <ce:italic>d</ce:italic>, <mml:math altimg="si343.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, and <mml:math altimg="si344.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> can be computed out of the constituent delays incurred in our basic modules.</ce:para><ce:para id="pr1950" view="all">Defining<ce:display><ce:formula id="fm0030"><mml:math altimg="si391.gif" overflow="scroll"><mml:mi>Î»</mml:mi><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:msqrt><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>25</mml:mn><mml:mi>Ï</mml:mi><mml:mo>-</mml:mo><mml:mn>9</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>25</mml:mn><mml:mi>Ï</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msqrt><mml:mo>â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mn>5</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mspace width="1em"/><mml:mtext>and</mml:mtext><mml:mspace width="1em"/><mml:mi>Î±</mml:mi><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">/</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mn>4</mml:mn><mml:mi>d</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:math></ce:formula></ce:display> for any <mml:math altimg="si389.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>1</mml:mn></mml:math>, <mml:math altimg="si392.gif" overflow="scroll"><mml:mi>Î±</mml:mi><mml:mo>â©¾</mml:mo><mml:mn>1</mml:mn></mml:math>, the following family of timeout durations meets the requirements stated in <ce:cross-ref refid="br0130" id="crf1480">[13]</ce:cross-ref> (see the reference for a proof):<ce:display><ce:formula id="fm0040"><mml:math altimg="si393.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>6</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>6</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>-</mml:mo><mml:mi>Ï</mml:mi><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0100"><mml:math altimg="si394.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0110"><mml:math altimg="si395.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>6</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>6</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0120"><mml:math altimg="si396.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>4</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0130"><mml:math altimg="si397.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0140"><mml:math altimg="si398.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>31</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0150"><mml:math altimg="si399.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>35</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0160"><mml:math altimg="si400.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>39</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0170"><mml:math altimg="si401.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0180"><mml:math altimg="si402.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>92</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>8</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>78</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>5</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display> and further,<ce:display><ce:formula id="fm0190"><mml:math altimg="si403.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>3</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mi>d</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>109</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0200"><mml:math altimg="si404.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>92</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>3</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>218</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>108</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mi>d</mml:mi></mml:math></ce:formula></ce:display><ce:display><ce:formula id="fm0050"><mml:math altimg="si405.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mtext>uniformly distributed random variable on</mml:mtext><mml:mspace width="0.25em"/><mml:mrow><mml:mo stretchy="true">[</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>92</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>8</mml:mn></mml:mrow></mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>3</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>218</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>8</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>108</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mi>d</mml:mi><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>8</mml:mn><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>92</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msup><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>3</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:msup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>218</mml:mn><mml:mi>Î±</mml:mi><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>7</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>108</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="true">]</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:math></ce:formula></ce:display> Finally, the maximal logical clock value <mml:math altimg="si406.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:math> is not arbitary, as we require<ce:display><ce:formula id="fm0060"><ce:label>(1)</ce:label><mml:math altimg="si407.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>â</mml:mo><mml:mrow><mml:mo stretchy="true">[</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>52</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>12</mml:mn><mml:mo>+</mml:mo><mml:mn>10</mml:mn><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">/</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mi>Î±</mml:mi><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>46</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>32</mml:mn><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>12</mml:mn><mml:mo>+</mml:mo><mml:mn>12</mml:mn><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">/</mml:mo><mml:mi>d</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:mo stretchy="true">]</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:math></ce:formula></ce:display> Note that, by manipulating <ce:italic>Î±</ce:italic>, we can make <ce:italic>K</ce:italic> arbitrarily large, but this comes at the expense of a proportional increase in the timer durations of the main state machine and its underlying layers, increasing the overall stabilization time.</ce:para></ce:section><ce:section id="se0350" view="all"><ce:label>5.8</ce:label><ce:section-title id="st0360">Summary of results from theory</ce:section-title><ce:para id="pr1960" view="all">We conclude the section with a summary of the most important statements proved in <ce:cross-ref refid="br0130" id="crf1490">[13]</ce:cross-ref>, expressed in terms of the model employed in this article. To this end, we need to specify the protocol as a compound implementation about that we will formulate our theorems. <ce:enunciation id="en0120"><ce:label>Definition 5.1</ce:label><ce:section-title id="st0370">The FATAL<ce:sup loc="post">+</ce:sup> Protocol</ce:section-title><ce:para id="pr1970" view="all">The <ce:italic>FATAL</ce:italic><ce:sup loc="post">+</ce:sup> <ce:italic>protocol</ce:italic> is a compound module consisting of nodes <mml:math altimg="si408.gif" overflow="scroll"><mml:mi>i</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math>. It has no input ports and an output port <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> for each node <ce:italic>i</ce:italic>. The <ce:italic>n</ce:italic> input ports of node <ce:italic>i</ce:italic> are connected to the output ports of the channels <mml:math altimg="si237.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math>, <mml:math altimg="si409.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>â¦</mml:mo><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math>. Each node is comprised of one copy of each of the state machines presented in this section, and the implementation of each node is derived from the implementations (given in Section <ce:cross-ref refid="se0360" id="crf1500">6</ce:cross-ref>) of the basic modules defined in Section <ce:cross-ref refid="se0130" id="crf1510">2.2</ce:cross-ref> that are connected as specified in this section. The output port <mml:math altimg="si239.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> of node <ce:italic>i</ce:italic> is the output port of its quick cycle state machine.</ce:para></ce:enunciation></ce:para><ce:para id="pr3310" view="all">The first theorem states a probabilistic stabilization result. Since we did not formally define probabilistically stabilizing implementations, its formulation is somewhat cumbersome. Intuitively (and slightly inaccurately), the statement is to be read as "no matter what the initial state and the execution, the protocol stabilizes almost certainly within <mml:math altimg="si410.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">slow</mml:mi></mml:mrow></mml:msub></mml:math> time". <ce:enunciation id="en0160"><ce:label>Theorem 5.2</ce:label><ce:para id="pr3320" view="all"><ce:italic>Fix any</ce:italic> <mml:math altimg="si411.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â©½</mml:mo><mml:mi>f</mml:mi><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">â</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">â</mml:mo></mml:math> <ce:italic>and feasible Î±, set</ce:italic><ce:display><ce:formula id="fm0070"><mml:math altimg="si412.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">slow</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>24</mml:mn><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î»</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>Ï</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo stretchy="false">/</mml:mo><mml:mi>Ï</mml:mi><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>9</mml:mn><mml:mi>Ï</mml:mi><mml:mo>+</mml:mo><mml:mn>8</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mi>d</mml:mi><mml:mo>+</mml:mo><mml:mn>5</mml:mn><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>-</mml:mo><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msubsup><mml:mo>â</mml:mo><mml:mi>Î</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>Î±</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo></mml:math></ce:formula></ce:display> <ce:italic>and pick</ce:italic> <mml:math altimg="si413.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>â</mml:mo><mml:mi>Î</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>Î±</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> <ce:italic>in accordance with inequality</ce:italic> <ce:cross-ref refid="fm0060" id="crf2800">(1)</ce:cross-ref><ce:italic>.</ce:italic></ce:para><ce:para id="pr3330" view="all"><ce:italic>Consider an execution on</ce:italic> <mml:math altimg="si17.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> <ce:italic>of the FATAL</ce:italic><ce:sup loc="post">+</ce:sup> <ce:italic>protocol where</ce:italic> (<ce:italic>at least</ce:italic>) <mml:math altimg="si414.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> <ce:italic>nodes are feasible. Assume that an adversary that knows everything about the system except that it does not learn about the durations of randomized watchdog timers before they expire controls all other aspects of the execution</ce:italic> (<ce:italic>clock drifts and delays of feasible submodules within the admissible bounds as well as the output ports' signals of faulty modules</ce:italic>)<ce:italic>. Then the execution restricted to</ce:italic> <mml:math altimg="si415.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">slow</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> <ce:italic>is with probability at least</ce:italic> <mml:math altimg="si416.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup></mml:math> <ce:italic>a feasible execution of a clock synchronization module with clock imprecision</ce:italic> <mml:math altimg="si417.gif" overflow="scroll"><mml:mi>Î£</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math><ce:italic>, amortized frequency bounds</ce:italic> <mml:math altimg="si418.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo></mml:math> <ce:italic>and</ce:italic> <mml:math altimg="si419.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math><ce:italic>, slacks</ce:italic> <mml:math altimg="si420.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:msup><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:math><ce:italic>, maximum frequency</ce:italic> <mml:math altimg="si421.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>-</mml:mo><mml:mn>2</mml:mn><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:math><ce:italic>, at most</ce:italic> <mml:math altimg="si422.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> <ce:italic>faults, and clocks of size</ce:italic> <mml:math altimg="si413.gif" overflow="scroll"><mml:mi>K</mml:mi><mml:mo>â</mml:mo><mml:mi>Î</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>Î±</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math><ce:italic>.</ce:italic></ce:para></ce:enunciation></ce:para><ce:para id="pr3340" view="all">In this sense, for each <mml:math altimg="si423.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo>â©½</mml:mo><mml:mi>f</mml:mi></mml:math>, the FATAL<ce:sup loc="post">+</ce:sup> protocol is an <mml:math altimg="si422.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math>-tolerant implementation of a clock synchronization module with the respective parameters that stabilizes with probability at least <mml:math altimg="si416.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mo>-</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:msup></mml:math> within time <mml:math altimg="si424.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">slow</mml:mi></mml:mrow></mml:msub><mml:mo>â</mml:mo><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>Î±</mml:mi><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>.</ce:para><ce:para id="pr2000" view="all">The above theorem corresponds to the slow, but robust, second stabilization mechanism. The next theorem, which corresponds to the faster first stabilization mechanism, essentially states that in an execution where <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> nodes already stabilized, any further non-faulty nodes recover quickly and deterministically, within <mml:math altimg="si425.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>Î±</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> time.</ce:para><ce:para id="pr3350" view="all"><ce:enunciation id="en0170"><ce:label>Theorem 5.3</ce:label><ce:para id="pr2010" view="all"><ce:italic>We use the notation of the previous theorem. Moreover,</ce:italic><ce:display><ce:formula id="fm0080"><mml:math altimg="si426.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">fast</mml:mi></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>4</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mi>Ï</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mn>5</mml:mn><mml:mi>d</mml:mi><mml:mo>â</mml:mo><mml:mi>Î</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>Î±</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>.</mml:mo></mml:math></ce:formula></ce:display></ce:para><ce:para id="pr3360" view="all"><ce:italic>Suppose an execution of the FATAL</ce:italic><ce:sup loc="post">+</ce:sup> <ce:italic>protocol is feasible on</ce:italic> <mml:math altimg="si17.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> <ce:italic>with respect to the clock synchronization module specified in</ce:italic> <ce:cross-ref refid="en0160" id="crf2810"><ce:italic>Theorem</ce:italic> 5.2</ce:cross-ref><ce:italic>. Consider the set of nodes</ce:italic> <mml:math altimg="si427.gif" overflow="scroll"><mml:mi>W</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:math> <ce:italic>whose restricted executions on</ce:italic> <mml:math altimg="si17.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> <ce:italic>are feasible. Then the execution restricted to</ce:italic> <mml:math altimg="si428.gif" overflow="scroll"><mml:mo stretchy="false">[</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>-</mml:mo></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">fast</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">]</mml:mo></mml:math> <ce:italic>is feasible with respect to a clock synchronization module with the same parameters, except that it tolerates</ce:italic> <mml:math altimg="si429.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>W</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:math> <ce:italic>faults only.</ce:italic></ce:para></ce:enunciation></ce:para><ce:para id="pr2030" view="all">We should like to mention that in <ce:cross-ref refid="br0130" id="crf1540">[13]</ce:cross-ref> a number of further results on stabilization are given. In particular, if the faulty nodes exhibit only little coordination among themselves or do not tune their operations to the non-faulty nodes' states, also the "slow" stabilization mechanism will succeed quickly, granted that the resynchronization state machines are not in a "too bad" configuration, i.e., most timers of type <mml:math altimg="si430.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> are expired and timeouts of type <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> are in (roughly) random states. We will informally discuss some of these scenarios in Section <ce:cross-ref refid="se0580" id="crf1550">7</ce:cross-ref>.</ce:para><ce:para id="pr2040" view="all">Finally, we emphasize again that the power of the above theorems severely depends on the quality of basic implementations (cf. Section <ce:cross-ref refid="se0260" id="crf1560">4.2</ce:cross-ref>). While compound modules' properties can be formally analyzed, e.g. giving rise to the theorems above, these results are meaningless if too many basic implementations are infeasible too frequently. Hence it is vital to come up with robust implementations of the basic modules, which is the subject of the next section.</ce:para></ce:section></ce:section><ce:section id="se0360" view="all"><ce:label>6</ce:label><ce:section-title id="st0380">Implementation</ce:section-title><ce:para id="pr2050" view="all">In this section, we present the cornerstones of our FPGA prototype implementation of the FATAL<ce:sup loc="post">+</ce:sup> protocol. The objectives of this implementation are (i) to serve as a proof of concept, (ii) to validate the predictions of the theoretical analysis, and (iii) to form a basis for the future development of protocol variants and engineering improvements. Rather than striving for optimizing performance, area, or power efficiency, our primary goal is hence to essentially provide a direct mapping of the algorithmic description to hardware, and to evaluate its properties in various operating scenarios.</ce:para><ce:para id="pr2060" view="all">Not surprisingly, traditional design principles for digital circuits are not adequate for our purposes. This is true for three major reasons:<ce:list id="ls0170"><ce:list-item id="li0610"><ce:label>â¢</ce:label><ce:para id="pr2070" view="all"><ce:bold>Asynchrony:</ce:bold> Targeting ultra-reliable clock generation in SoCs, the implementation of FATAL<ce:sup loc="post">+</ce:sup> itself cannot rely on the availability of a synchronous clock. Moreover, many guards, like the one of the transition from <ce:italic>propose</ce:italic> to <ce:italic>accept</ce:italic> in <ce:cross-ref refid="fg0080" id="crf1570">Fig. 8</ce:cross-ref>, depend on remote nodes' states and should hence not be synchronized to a local clock in order to maximize performance. Testing for activated guards synchronized to a local clock source also increases the risk of generating metastability, as remote signals originate in different clock domains. On the other hand, conventional <ce:italic>asynchronous state machines</ce:italic> (ASM) are not well-suited for implementing the state machines from <ce:cross-ref refid="fg0060" id="crf1580">Fig. 6</ce:cross-ref>-<ce:cross-ref refid="fg0100" id="crf1590">Fig. 10</ce:cross-ref> due to the possibility of choice w.r.t. successor states and continuously enabled (i.e., non-alternating) guards. Our prototype hence relies on <ce:italic>hybrid state machines</ce:italic> (HSM) that combine ASM with synchronous <ce:italic>transition state machines</ce:italic> (TSM) that are started on demand only.</ce:para></ce:list-item><ce:list-item id="li0620"><ce:label>â¢</ce:label><ce:para id="pr2080" view="all"><ce:bold>Fault tolerance:</ce:bold> The consideration of Byzantine faulty nodes forced us to abandon the classic "wait for all" paradigm traditionally used for enforcing the indication principle in asynchronous designs: Failures may easily inhibit the completion of the request/acknowledge cycles typically used for transition-based flow control. A few timing constraints, established by our theoretical analysis, in conjunction with state-based communication are resorted to in order to establish event ordering and synchronized executions in FATAL<ce:sup loc="post">+</ce:sup>.</ce:para></ce:list-item><ce:list-item id="li0630"><ce:label>â¢</ce:label><ce:para id="pr2090" view="all"><ce:bold>Self-stabilization:</ce:bold> In sharp contrast to non-stabilizing algorithms, which can always assume that there is a (substantial) number of non-faulty nodes that run approximately synchronously and hence jointly adhere to certain timing constraints, self-stabilizing algorithms cannot even assume this. Although FATAL<ce:sup loc="post">+</ce:sup> guarantees that non-faulty nodes will eventually execute synchronously, even when started from an arbitrary state, the violation of timing constraints and hence metastability cannot be avoided during stabilization <ce:cross-ref refid="br0440" id="crf1600">[44]</ce:cross-ref>. For example, state <ce:italic>accept</ce:italic> in <ce:cross-ref refid="fg0080" id="crf1610">Fig. 8</ce:cross-ref> has two successors <ce:italic>sleep</ce:italic> and <ce:italic>recover</ce:italic>, the guards of which could become true arbitrarily close to each other in certain stabilization scenarios. This is acceptable, though, as long as such problematic events are neither systematic nor frequent, which is ensured by the design and implementation of FATAL<ce:sup loc="post">+</ce:sup> (see Section <ce:cross-ref refid="se0370" id="crf1620">6.1</ce:cross-ref>).</ce:para></ce:list-item></ce:list> Inspecting <ce:cross-refs refid="fg0060 fg0070 fg0080 fg0090 fg0100" id="crs0160">Figs. 6-10</ce:cross-refs> reveals that the state transitions of the FATAL<ce:sup loc="post">+</ce:sup> state machines are triggered by AND/OR combinations of the following different types of conditions:<ce:list id="ls0180"><ce:list-item id="li0640"><ce:label>(1)</ce:label><ce:para id="pr2100" view="all">A watchdog timer expires ["<mml:math altimg="si377.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">accept</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math>"].</ce:para></ce:list-item><ce:list-item id="li0650"><ce:label>(2)</ce:label><ce:para id="pr2110" view="all">The state machines of a certain number (1, <mml:math altimg="si353.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math>, or <mml:math altimg="si356.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>) of nodes reached a particular (subset of) state(s) at least once since the reset of the corresponding memory flags ["<mml:math altimg="si356.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> <ce:italic>accept</ce:italic>"].</ce:para></ce:list-item><ce:list-item id="li0660"><ce:label>(3)</ce:label><ce:para id="pr2120" view="all">The state machines of a certain number (1, <mml:math altimg="si353.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math>, or <mml:math altimg="si356.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>) of nodes are currently in (one of) a particular (subset of) state(s) ["in <ce:italic>resync</ce:italic>"].</ce:para></ce:list-item><ce:list-item id="li0670"><ce:label>(4)</ce:label><ce:para id="pr2130" view="all">Always ["true"].</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr2140" view="all">These requirements reveal the need for the following major building blocks (cf. Section <ce:cross-ref refid="se0240" id="crf1650">4</ce:cross-ref>):<ce:list id="ls0190"><ce:list-item id="li0680"><ce:label>â¢</ce:label><ce:para id="pr2150" view="all">Concurrent HSMs, implementing the states and transitions specified in the protocol. An ideal HSM would always provide feasible executions of its state transition module.</ce:para></ce:list-item><ce:list-item id="li0690"><ce:label>â¢</ce:label><ce:para id="pr2160" view="all">Communication infrastructure between these state machines, continuously conveying state information. This is simply done by the channels <mml:math altimg="si237.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> propagating the signal <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> to all receivers.</ce:para></ce:list-item><ce:list-item id="li0700"><ce:label>â¢</ce:label><ce:para id="pr2170" view="all">Watchdog timers (also with random timeouts) for implementing type (1) guards.</ce:para></ce:list-item><ce:list-item id="li0710"><ce:label>â¢</ce:label><ce:para id="pr2180" view="all">Threshold modules and memory flags for implementing type (2) and type (3) guards.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr2190" view="all">If we could provide implementations of <ce:italic>all</ce:italic> these building blocks that match the specifications of the formal model in Section <ce:cross-ref refid="se0130" id="crf1660">2.2</ce:cross-ref> under <ce:italic>all</ce:italic> circumstances, in the sense that all executions at non-faulty nodes are always feasible, the theoretical guarantees derived in <ce:cross-ref refid="br0130" id="crf1670">[13]</ce:cross-ref> would apply without restriction. As already noted, however, this is impossible to guarantee, since there is no way to rule out metastable upsets with complete certainty, and there are no elements available for our purpose whose behavior is specified for metastable inputs. Nevertheless, it is possible to design our basic modules in a way that keeps the probability of such events acceptably low. Moreover, all stateful components must be implemented in a self-stabilizing way: They must be able to eventually recover from an arbitrary erroneous internal state, including metastability, when facing sufficiently long executions on their input ports that do not induce metastability.</ce:para><ce:para id="pr2200" view="all">Before we proceed with a description of the implementations of the required basic modules, we discuss how FATAL<ce:sup loc="post">+</ce:sup> deals with the threat of metastability arising from our extreme fault scenarios.</ce:para><ce:section id="se0370" view="all"><ce:label>6.1</ce:label><ce:section-title id="st0390">Metastability issues</ce:section-title><ce:para id="pr2210" view="all">Reducing the potential for both metastability generation and metastability propagation are important goals in the design and implementation of FATAL<ce:sup loc="post">+</ce:sup>. Although it is impossible to completely rule out metastability generation in the presence of Byzantine faulty nodes (which may issue signal transitions at arbitrary times anyway) and during self-stabilization (where all nodes may be completely unsynchronized), we nevertheless achieve the following properties.</ce:para><ce:para id="pr2220" view="all">Robustness against metastable upsets and their propagation:<ce:list id="ls0200"><ce:list-item id="li0720"><ce:label>(I)</ce:label><ce:para id="pr2230" view="all">Guaranteed <ce:italic>metastability-freedom in fault-free executions</ce:italic> after stabilization.</ce:para></ce:list-item><ce:list-item id="li0730"><ce:label>(II)</ce:label><ce:para id="pr2240" view="all"><ce:italic>Low probability of metastable upsets</ce:italic>: We have taken care to keep the windows of vulnerability of our implementations of basic modules as small as possible. Thus, desynchronized or faulty nodes must be very lucky to actually trigger a metastable upset. In addition, mechanisms for decreasing the upset probability even further could be incorporated, if required in particularly critical applications.</ce:para></ce:list-item><ce:list-item id="li0740"><ce:label>(III)</ce:label><ce:para id="pr2250" view="all"><ce:italic>Metastability containment</ce:italic>: Non-faulty nodes are very robust against propagation of metastable upsets due to the algorithm's control flow.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr2260" view="all">Limited consequences of metastable upsets:<ce:list id="ls0210"><ce:list-item id="li0750"><ce:label>(IV)</ce:label><ce:para id="pr2270" view="all"><ce:italic>Limited impact of metastable upsets during stabilization</ce:italic>: Metastable upsets that occur at non-faulty nodes during the stabilization phase can only delay stabilization. Since these are rare events even then, the respective effect on the (average) stabilization time is very small.</ce:para></ce:list-item><ce:list-item id="li0760"><ce:label>(V)</ce:label><ce:para id="pr2280" view="all"><ce:italic>Fast recovery from metastability after stabilization</ce:italic>: As long as <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> non-faulty nodes remain synchronized, a metastable upset at a node may disrupt its synchrony towards the other nodes only for a short time. Due to the fast stabilization mechanism the node will fully recover within <mml:math altimg="si431.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:math> time once metastability ceases.</ce:para></ce:list-item><ce:list-item id="li0770"><ce:label>(VI)</ce:label><ce:para id="pr2290" view="all"><ce:italic>Masking of metastable upsets as faults</ce:italic>: Provided that the measures ensuring (II) and (III) are effective (i.e., metastability does not spread) and the system-level fault-tolerance of <ce:italic>f</ce:italic> nodes operating outside their specification is not exhausted, metastable upsets at some nodes do not affect the correctness of other nodes.</ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr2300" view="all">The following approaches have been used in FATAL<ce:sup loc="post">+</ce:sup> to accomplish these goals (additional details will be given in the subsequent sections):<ce:list id="ls0220"><ce:list-item id="li0780"><ce:label>(I)</ce:label><ce:para id="pr2310" view="all">If all nodes are synchronized and fault-free, we can satisfy timing constraints on the modules' input ports' signals that ensure that even our (necessarily imperfect) implementations of the abstract modules maintain feasibility at all times. Essentially, the argument is that since there is no initial violation of the constraints and no faults are imposed by external events, we can conclude that the constraints will be satisfied at later points in time as well. This property is formally proved in <ce:cross-ref refid="br0130" id="crf1680">[13]</ce:cross-ref>.</ce:para></ce:list-item><ce:list-item id="li0790"><ce:label>(II)</ce:label><ce:para id="pr2320" view="all">All building blocks that are susceptible to metastable upsets, like memory flags, are implemented in a way that minimizes the time span during which they are vulnerable. Moreover, elastic pipelines acting as metastability filters <ce:cross-ref refid="br0400" id="crf1690">[40]</ce:cross-ref> or synchronizers could be added easily to our design to further protect such elements.</ce:para></ce:list-item><ce:list-item id="li0800"><ce:label>(III)</ce:label><ce:para id="pr2330" view="all">We enforce (standard) error containment by avoiding any explicit control flow between ASMs: Since the communication is exclusively performed by virtue of states, a faulty receiver cannot impact a non-faulty sender, and a faulty sender, in turn, cannot directly interfere with the operation of a non-faulty receiver (apart from conveying an incorrect state, of course). To extend error containment to also cover metastability to the best possible extent, several forms of logical masking are employed. One example is the combination of memory flags and threshold gates, which ensure that possibly upset memory flags are always overruled quickly by correct ones at the threshold output.<ce:cross-ref refid="fn0180" id="crf1700"><ce:sup loc="post">18</ce:sup></ce:cross-ref><ce:footnote id="fn0180"><ce:label>18</ce:label><ce:note-para id="np0200" view="all">It is not self-evident that this type of masking is very effective for metastability as well. Later on we will discuss why this is indeed the case.</ce:note-para></ce:footnote> A higher-level form of logical masking occurs due to the fact that, after stabilization, all non-faulty nodes execute the outer cycle of the main state machine (<ce:cross-ref refid="fg0080" id="crf1710">Fig. 8</ce:cross-ref>) only. The outer cycle's guards do not involve any of the timeouts, states, or flags accessed by the resynchronization routine (<ce:cross-ref refid="fg0100" id="crf1720">Fig. 10</ce:cross-ref>) or the extension of the main state machine (<ce:cross-ref refid="fg0090" id="crf1730">Fig. 9</ce:cross-ref>); hence any metastability of the corresponding signals does not affect the logic of the main state machine and the layers on top of it (including the logical clocks).</ce:para></ce:list-item><ce:list-item id="li0810"><ce:label>(IV)</ce:label><ce:para id="pr2340" view="all">The measures outlined in (II) and (III) are complemented by adding time masking using randomization. The resynchronization routine (<ce:cross-ref refid="fg0100" id="crf1740">Fig. 10</ce:cross-ref>) tries to initialize recovery from arbitrary states at random, sufficiently sparse points in time. Hence non-faulty nodes cannot be systematically kept from stabilizing. The proofs in <ce:cross-ref refid="br0130" id="crf1750">[13]</ce:cross-ref> reveal that within <mml:math altimg="si3.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> time in fact it is likely that there are multiple events that will imply subsequent stabilization. Considering that metastable upsets are rare events in our setting, their impact thus becomes negligible.</ce:para></ce:list-item><ce:list-item id="li0820"><ce:label>(V)</ce:label><ce:para id="pr2350" view="all">This property directly follows from the results shown in <ce:cross-ref refid="br0130" id="crf1760">[13]</ce:cross-ref>: If <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> nodes faithfully execute the basic cycle, any non-faulty node will (re)synchronize within <mml:math altimg="si431.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:math> time, irrespectively of its current state.</ce:para></ce:list-item><ce:list-item id="li0830"><ce:label>(VI)</ce:label><ce:para id="pr2360" view="all">If metastability does not spread to a given receiver, the latter will observe for each sender some execution, even if the sender does not send a valid signal in terms of our system model. Since we assume that faulty nodes may output arbitrary signals at their output ports, our model thus makes no distinction between a "conventionally" faulty node and one that behaves erratically due to metastable upsets.<ce:cross-ref refid="fn0190" id="crf1770"><ce:sup loc="post">19</ce:sup></ce:cross-ref><ce:footnote id="fn0190"><ce:label>19</ce:label><ce:note-para id="np0210" view="all">To match our model, invalid signal states are simply mapped to some default state, e.g. <ce:italic>resync</ce:italic> for the main state machine.</ce:note-para></ce:footnote> As the algorithm is resilient to up to <ce:italic>f</ce:italic> faults, such upsets are masked as long as the total number of nodes operating outside their module specification is at most <ce:italic>f</ce:italic>.</ce:para></ce:list-item></ce:list></ce:para></ce:section><ce:section id="se0380" view="all"><ce:label>6.2</ce:label><ce:section-title id="st0400">State machine communication</ce:section-title><ce:para id="pr2370" view="all">According to our system model, an HSM of node <ce:italic>i</ce:italic> must continuously communicate its current state system-wide via the channels <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. For simplicity, we use parallel communication, by means of a suitably sized data bus, in our implementation.<ce:cross-ref refid="fn0200" id="crf1780"><ce:sup loc="post">20</ce:sup></ce:cross-ref><ce:footnote id="fn0200"><ce:label>20</ce:label><ce:note-para id="np0220" view="all">It is, however, possible to replace parallel communication by serial communication, e.g., by extending the (synchronous) TSM (see Section <ce:cross-ref refid="se0470" id="crf1790">6.3</ce:cross-ref>) appropriately.</ce:note-para></ce:footnote> A complete receiver as described below is employed for every state machine in the system. Since a node treats itself like any other node in type (2) and type (3) guards with thresholds, every node receives its own state as well.</ce:para><ce:section id="se0390" view="all"><ce:label>6.2.1</ce:label><ce:section-title id="st0410">Channels</ce:section-title><ce:para id="pr2380" view="all"><ce:cross-ref refid="fg0110" id="crf1800">Fig. 11</ce:cross-ref><ce:float-anchor refid="fg0110"/> shows the circuitry used for communicating the current state of the main algorithm in <ce:cross-ref refid="fg0080" id="crf1810">Fig. 8</ce:cross-ref>.</ce:para><ce:para id="pr2390" view="all">The sender consists of a simple array of flip-flops, which drive the parallel data bus that thus continuously reflects the current state of the sender's HSM. Technically speaking, the flip-flops are not part of the channel but rather the sender's HSM; they are the "physical location" of the HSM's state in the sense of our model. The channel thus "begins" with the wires conveying the stored values.<ce:cross-ref refid="fn0210" id="crf1820"><ce:sup loc="post">21</ce:sup></ce:cross-ref><ce:footnote id="fn0210"><ce:label>21</ce:label><ce:note-para id="np0230" view="all">Note that there is some freedom with respect to the mapping of module ports to the physical system, which also affects which module(s) become(s) infeasible due to a (physical) fault. However, no matter what the precise mapping, care has to be taken to avoid correlated failures. For instance, if all channels meet in a single spot due to bad routing, manufacturing defects or electromigration could connect several channels, therefore rendering our system-level fault-tolerance (i.e., the resilience to <ce:italic>f</ce:italic> node failures) ineffective.</ce:note-para></ce:footnote></ce:para><ce:para id="pr2400" view="all">In sharp contrast to handshake-based communication, reading at the receiver occurs without any direct coordination with the sender. To avoid the unacceptable risk of reading and capturing false intermediate sender states, which might be perceived by the receiver upon a sender state transition in case of different delays on the data bus wires, delay-insensitive state coding <ce:cross-ref refid="br0450" id="crf1830">[45]</ce:cross-ref> must be used. We have chosen the following encoding for the main state machine in <ce:cross-ref refid="fg0080" id="crf1840">Fig. 8</ce:cross-ref>:<ce:display><ce:table xmlns="http://www.elsevier.com/xml/common/cals/dtd" rowsep="0" colsep="0" frame="none" id="tl0010"><tgroup cols="4"><colspec colnum="1" colname="col1" align="left"/><colspec colnum="2" colname="col2" align="left"/><colspec colnum="3" colname="col3" align="left"/><colspec colnum="4" colname="col4" align="left"/><tbody valign="top"><row><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>propose</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">0000</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>accept</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">1001</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>sleep</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">1011</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>sleep</italic><hsp sp="0.2"/>â<hsp sp="0.2"/><italic>waking</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">0011</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>waking</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">0101</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>ready</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">0110</entry></row><row><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>recover</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">1100</entry><entry xmlns="http://www.elsevier.com/xml/common/dtd"><italic>join</italic></entry><entry xmlns="http://www.elsevier.com/xml/common/dtd">1010</entry></row></tbody></tgroup></ce:table></ce:display></ce:para><ce:para id="pr2410" view="all">The receiver comprises a simple combinational decoder consisting of AND gates, which generate a 1-out-of-<ce:italic>m</ce:italic> encoding of the binary representation of the state communicated via the data bus. The decoded signals correspond to a single sender state each. This information is directly used for type (3) guards, and fed into memory flags for type (2) guards.</ce:para><ce:para id="pr2420" view="all">For the other state machines making up FATAL<ce:sup loc="post">+</ce:sup>, it suffices to communicate only a single bit of state information (<ce:italic>supp</ce:italic> or <ce:italic>none</ce:italic> in <ce:cross-ref refid="fg0090" id="crf1850">Fig. 9</ce:cross-ref>, <ce:italic>init</ce:italic> or <ce:italic>wait</ce:italic> in <ce:cross-ref refid="fg0100" id="crf1860">Fig. 10</ce:cross-ref>, and <mml:math altimg="si432.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi mathvariant="italic">propose</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:math> or <ce:italic>none</ce:italic><ce:sup loc="post">+</ce:sup> in <ce:cross-ref refid="fg0060" id="crf2820">Fig. 6</ce:cross-ref>). Hence, every bus consists of a single sender flip-flop plus a wire here, and the decoder in the receiver becomes trivial. In the sequel, we restrict our discussion to the main state machine's channel, as the simpler single-bit channels clearly meet the specification of a channel. Note that in both cases the (physical) channels used in our implementation trivially recover from any inputs and transient faults, as they are obviously forgetful. The memory flags at the receiver's side contain feedback-loops, however, which do not allow us to apply <ce:cross-ref refid="en0080" id="crf1880">Theorem 3.7</ce:cross-ref> and <ce:cross-ref refid="en0100" id="crf1890">Lemma 3.8</ce:cross-ref>.</ce:para><ce:section id="se0400" view="all"><ce:section-title id="st0420">Correctness.</ce:section-title><ce:para id="pr2430" view="all">We now argue informally<ce:cross-ref refid="fn0220" id="crf1900"><ce:sup loc="post">22</ce:sup></ce:cross-ref><ce:footnote id="fn0220"><ce:label>22</ce:label><ce:note-para id="np0240" view="all">Our basic modules appear simple enough to be amenable to formal verification. Still, there are complications: Besides the fact that we assume not only continuous time but also continuous computations, which rules out using standard verification approaches, there is the challenge of finding and expressing suitable input port execution constraints required for implementation correctness. Exploring this avenue is part of our future work.</ce:note-para></ce:footnote> why and when the above implementation matches the specifications given in Section <ce:cross-ref refid="se0240" id="crf1910">4</ce:cross-ref>. Note that when affected by faults or provided with illegal inputs, modules may of course exhibit arbitrary behavior. In that case we rely on (a) the system-level fault tolerance properties (for fault masking), (b) the self-stabilization properties of the affected modules (for recovery), and (c) the rare occurrence of these situations (in order to not exhaust the system-level fault tolerance limits). In addition to considering the fault-free behavior, it hence suffices to restrict our attention to (b) and (c) here.</ce:para><ce:para id="pr2440" view="all">For fault-free operation, the described implementation essentially realizes a channel as specified in Section <ce:cross-ref refid="se0240" id="crf1920">4</ce:cross-ref> with some maximum delay <mml:math altimg="si433.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub></mml:math>, granted that changes of the input provided by the sender are separated in time sufficiently well. To see this, consider an input switch from state <ce:italic>s</ce:italic> to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> (note that not all flip-flops will switch their output signals at exactly the same instant), where initially the signal is stable also on the receiver's side. Once the signal change propagated through the wires and the AND gates, the decoder output signal corresponding to state <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> will be 1, while all other signals will be 0. Due to the use of delay-insensitive state encoding, there are no glitches and the signals for all other states <mml:math altimg="si434.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â³</mml:mo></mml:mrow></mml:msup><mml:mo>â</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup><mml:mo stretchy="false">}</mml:mo></mml:math> will continuously be 0. Nevertheless, formally, this behavior does not yet fully match the definition of our communication channels in Section <ce:cross-ref refid="se0240" id="crf1930">4</ce:cross-ref>: It is possible that temporarily both <ce:italic>s</ce:italic> and <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> are 1. Since our algorithms are completely oblivious to the exact point in time when the perceived <mml:math altimg="si237.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> changes after the sender's state <mml:math altimg="si435.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:math> changed (the analysis in <ce:cross-ref refid="br0130" id="crf1940">[13]</ce:cross-ref> only requires that this happens within <ce:italic>d</ce:italic> time), however, this problem can easily be abstracted away.<ce:cross-ref refid="fn0230" id="crf1950"><ce:sup loc="post">23</ce:sup></ce:cross-ref><ce:footnote id="fn0230"><ce:label>23</ce:label><ce:note-para id="np0250" view="all">Formally, this abstraction builds upon a weakened definition of lower-level channels, which attain values from <mml:math altimg="si436.gif" overflow="scroll"><mml:mi mathvariant="double-struck">S</mml:mi><mml:mo>âª</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="center"><mml:mi mathvariant="double-struck">S</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="center"><mml:mn>2</mml:mn></mml:mtd></mml:mtr></mml:mtable><mml:mo>)</mml:mo></mml:mrow></mml:math>. Alternatively, it would also be possible to use an explicit transition state â¥ (encoded by any bit sequence not corresponding to a state), and force the sender to always perform state transition via â¥.</ce:note-para></ce:footnote> All that is needed here is to interpret, in a static way, the situation where both <ce:italic>s</ce:italic> and <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> are valid as, say, <ce:italic>s</ce:italic>.</ce:para><ce:para id="pr2450" view="all">The attentive reader will have noticed that the 1-out-of-<ce:italic>m</ce:italic> decoder outputs (i.e., the state signals at the inputs of the memory flags) may temporarily be all 0 during the reception of a sender state transition as well. Fortunately, this behavior is completely masked from becoming visible to our algorithms: The memory flags prohibit this from becoming visible in type (2) guards at all, and all state transition conditions involving type (3) guards refer to a single state only. Hence, in terms of the transition condition, a similar abstraction as above is valid (i.e., for a remote state transition from <ce:italic>s</ce:italic> to <mml:math altimg="si57.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>â²</mml:mo></mml:mrow></mml:msup></mml:math> with a "gap" we can define an equivalent execution without gap in which the node in question behaves identically).</ce:para><ce:para id="pr2460" view="all">The above arguments critically rely on the assumption that states change not too rapidly. Otherwise, the receiver could e.g. fail to observe states that the sender assumed for a too short period of time only, or even decode a state that has not been attained. For non-faulty nodes, this is guaranteed in our implementation because the minimal amount of time an HSM needs to complete a state transition is greater than the maximum end-to-end delay variation of the signals employed in the communication channel. This constraint is easy to ensure by proper circuit design rules.</ce:para></ce:section><ce:section id="se0410" view="all"><ce:section-title id="st0430">Metastability.</ce:section-title><ce:para id="pr2470" view="all">Within the communication channels themselves, metastable upsets could only occur in the senders' flip-flops and in the receivers' memory flags; everything else is stateless combinational logic. The flip-flops are clocked by the sender's own clock, hence could become metastable only in case of a faulty sender. The issue of upsets of the memory flags is discussed in Section <ce:cross-ref refid="se0420" id="crf1960">6.2.2</ce:cross-ref>.</ce:para><ce:para id="pr2480" view="all">Viewed at the node level, it is obvious that if the sender's state signal becomes metastable or changes too quickly (which can only happen if the sender is faulty), this can also induce metastability at the receiver side by propagation over the channel. During the stabilization phase, the receiver could also experience a channel-induced metastable upset in memory flags and/or in its HSMs due to the arbitrary desynchronization between sender and receiver; since the windows of vulnerability are very small, the upset probability is very low, though. Eventually, after stabilization, the synchrony between non-faulty nodes guaranteed by the FATAL<ce:sup loc="post">+</ce:sup> protocol ensures that the received state data will always be stable when read in a transition condition in the main algorithm's outer cycle, recall item (I) in Section <ce:cross-ref refid="se0370" id="crf1970">6.1</ce:cross-ref>.</ce:para></ce:section></ce:section><ce:section id="se0420" view="all"><ce:label>6.2.2</ce:label><ce:section-title id="st0440">Memory flags</ce:section-title><ce:para id="pr2490" view="all">Every memory flag is just an SR-latch with dominant reset, whose functional equivalents are also depicted in <ce:cross-ref refid="fg0110" id="crf1980">Fig. 11</ce:cross-ref>. Note that a memory flag is set depending on the state communicated by the sender, but (dominantly) cleared under the receiver's control.</ce:para><ce:section id="se0430" view="all"><ce:section-title id="st0450">Metastability.</ce:section-title><ce:para id="pr2500" view="all">A memory flag may become metastable when the inputs change during stabilization of its feedback loop, which can occur due to (a) input glitches and/or (b) simultaneous falling transitions on both inputs. However, for correct receivers, (a) can only occur in case of a faulty sender, and (b) is again only possible during stabilization: Once non-faulty nodes execute the outer cycle of <ce:cross-ref refid="fg0080" id="crf1990">Fig. 8</ce:cross-ref>, it is guaranteed that e.g. all non-faulty nodes enter <ce:italic>accept</ce:italic> before the first one leaves. Overall, the upset probability is thus very small. It could be further reduced by diverse known means for metastability filtering, like using an elastic pipeline or Schmitt-trigger stages (which must be accounted for in the delay bounds, though). Finally, it is well-known that a metastable flip-flop will recover in finite time with probability one <ce:cross-ref refid="br0440" id="crf2000">[44]</ce:cross-ref>.</ce:para><ce:para id="pr2510" view="all">Any SR latch matches the specification of a memory flag according to Section <ce:cross-ref refid="se0240" id="crf2010">4</ce:cross-ref> followed by a channel with some maximum delay <mml:math altimg="si437.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub></mml:math>, provided that it starts from a clean initial state and the set/reset signals avoid (a) and (b) above. As argued above, the latter is guaranteed by our algorithm except in case of a metastable upset. In case of the memory flag implementation shown in <ce:cross-ref refid="fg0110" id="crf2020">Fig. 11</ce:cross-ref>, <mml:math altimg="si438.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub></mml:math> is primarily determined by the end-to-end settling time of the feedback loop. This delay also determines the vulnerability window with respect to metastability (i.e. critical glitch length, and "simultaneity" of transitions). Hence, making <mml:math altimg="si438.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub></mml:math> small, which is easy to achieve by design, contributes to both speed and robustness.</ce:para><ce:para id="pr2520" view="all">Except in case of metastability, discussed before, our memory flag implementation is self-stabilizing since it is <mml:math altimg="si438.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub></mml:math>-forgetful in the presence of input executions that avoid (a) and (b).</ce:para></ce:section></ce:section><ce:section id="se0440" view="all"><ce:label>6.2.3</ce:label><ce:section-title id="st0460">Threshold modules</ce:section-title><ce:para id="pr2530" view="all">The most straightforward implementation of the threshold modules used for generating the <mml:math altimg="si353.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> and <mml:math altimg="si356.gif" overflow="scroll"><mml:mo>â©¾</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> thresholds in type (2) and type (3) guards is a simple sum-of-product network, which just builds the OR of all AND combinations of <mml:math altimg="si25.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> respectively <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> inputs. This implementation however quickly becomes highly expensive, as it requires <mml:math altimg="si439.gif" overflow="scroll"><mml:mi>Î</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mtable><mml:mtr><mml:mtd columnalign="center"><mml:mi>n</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd columnalign="center"><mml:mi>f</mml:mi></mml:mtd></mml:mtr></mml:mtable><mml:mo>)</mml:mo></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> gates. A more efficient alternative is a sorting network, where the <mml:math altimg="si440.gif" overflow="scroll"><mml:msup><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math> output indicates whether a threshold of <ce:italic>k</ce:italic> is reached. For simplicity, in our FPGA implementation, threshold modules are built by means of lookup-tables (LUT).</ce:para><ce:section id="se0450" view="all"><ce:section-title id="st0470">Correctness.</ce:section-title><ce:para id="pr2540" view="all">Similar to our memory flag implementation, it is impossible to implement the properties of a threshold module as stated in Section <ce:cross-ref refid="se0240" id="crf2030">4</ce:cross-ref>, followed by a channel with some maximum delay <mml:math altimg="si441.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Th</mml:mi></mml:mrow></mml:msub></mml:math>, in case of arbitrary inputs: Finding out whether a certain number of inputs is 1 exactly at the same time cannot be implemented with real circuits. All implementations proposed above are forgetful and their outputs will stabilize quickly if their inputs do not change. Moreover, after stabilization type (2) guards are irrelevant, since neither the basic cycle of the main state machine nor the quick cycle evaluate such guards. Hence, in this case we can restrict our attention to input executions where inputs may change from 0 to 1 only, not back. The reset of the memory flags to 0 is performed during state transitions (when the guards' signals are suppressed by the locked signal) and therefore safe.</ce:para><ce:para id="pr2550" view="all">As any of the proposed threshold module implementations involve combinational logic only, they are trivially self-stabilizing: According to <ce:cross-ref refid="en0080" id="crf2040">Theorem 3.7</ce:cross-ref>, they are forgetful and hence, by <ce:cross-ref refid="en0100" id="crf2050">Lemma 3.8</ce:cross-ref>, self-stabilizing. Therefore, provided that the longest path delay does not exceed <mml:math altimg="si441.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Th</mml:mi></mml:mrow></mml:msub></mml:math>, the properties stated in Section <ce:cross-ref refid="se0240" id="crf2060">4</ce:cross-ref> are satisfied for monotonic inputs.<ce:cross-ref refid="fn0240" id="crf2070"><ce:sup loc="post">24</ce:sup></ce:cross-ref><ce:footnote id="fn0240"><ce:label>24</ce:label><ce:note-para id="np0260" view="all">Some dedicated experiments confirmed that even our LUT implementation on an FPGA, for which we have no control over the placement, operates glitch-free on monotonic inputs.</ce:note-para></ce:footnote></ce:para></ce:section><ce:section id="se0460" view="all"><ce:section-title id="st0480">Metastability.</ce:section-title><ce:para id="pr2560" view="all">As discussed above, type (2) guards cannot be safely evaluated by threshold gates and may cause glitches or metastable upsets. Since this is of relevance before stabilization only, this risk is considered acceptable. Like our channel implementations, threshold modules can propagate metastability: A metastable input could be propagated to the output when there are exactly <mml:math altimg="si442.gif" overflow="scroll"><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:math> non-faulty inputs in state 1 and the metastable input therefore makes the difference between output 0 and 1. In all other cases, however, the metastable input will simply be masked. Thus, albeit not perfect, threshold gates are an efficient means for metastability containment.</ce:para></ce:section></ce:section></ce:section><ce:section id="se0470" view="all"><ce:label>6.3</ce:label><ce:section-title id="st0490">Hybrid state machines</ce:section-title><ce:para id="pr2570" view="all">Our prototype implementation of FATAL<ce:sup loc="post">+</ce:sup> relies on <ce:italic>hybrid state machines</ce:italic> (HSM): An asynchronous state machine (ASM) is used for determining, by asynchronously evaluating the guards, the points in time when a state transition shall occur. Our ASMs have been built by deriving a <ce:italic>state transition graph</ce:italic> (STG) specification directly from <ce:cross-refs refid="fg0060 fg0070 fg0080 fg0090 fg0100" id="crs0170">Figs. 6-10</ce:cross-refs> and generating the delay-insensitive implementation via Petrify <ce:cross-ref refid="br0460" id="crf2100">[46]</ce:cross-ref>. The actual state transition of an HSM is governed by an underlying synchronous <ce:italic>transition state machine</ce:italic> (TSM). The TSM resolves a possibly non-deterministic choice of the successor state and then sequentially performs the required transition actions:<ce:list id="ls0230"><ce:list-item id="li0840"><ce:label>1.</ce:label><ce:para id="pr2580" view="all">"Locking" the transition, i.e., disabling any other transitions of the ASM (despite possibly satisfied guards); this happens at the start of the TSM and is thus asynchronously triggered.</ce:para></ce:list-item><ce:list-item id="li0850"><ce:label>2.</ce:label><ce:para id="pr2590" view="all">Reset of memory flags and watchdog timers.</ce:para></ce:list-item><ce:list-item id="li0860"><ce:label>3.</ce:label><ce:para id="pr2600" view="all">Communication of the new state, i.e., writing its representation into the flip-flops whose output is fed into the channels <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>.</ce:para></ce:list-item><ce:list-item id="li0870"><ce:label>4.</ce:label><ce:para id="pr2610" view="all">Completing the transition to the new state by enabling further transitions of the ASM.</ce:para></ce:list-item></ce:list> The TSM is driven by a pausable clock (see Section <ce:cross-ref refid="se0500" id="crf2110">6.4</ce:cross-ref>), which is started dynamically by the ASM upon triggering the transition. Note that this avoids the need for synchronization with a free-running clock and hence preserves the ASM's continuous time scale.</ce:para><ce:para id="pr2620" view="all">The TSM works as follows (see <ce:cross-ref refid="fg0120" id="crf2120">Fig. 12</ce:cross-ref><ce:float-anchor refid="fg0120"/>): Assume that the ASM is in state <ce:italic>A</ce:italic>, and that the guard <ce:italic>G</ce:italic> for the transition from <ce:italic>A</ce:italic> to <ce:italic>B</ce:italic> becomes true. If no other transition is currently being taken (indicated by the locked signal being 0), the TSM clock is started and the TSM sequence counter is released. With every rising edge of <ce:italic>TSMClock</ce:italic>, the TSM moves through a sequence of three states: <ce:italic>synchronize</ce:italic> (<ce:italic>Syn</ce:italic>), <ce:italic>commit</ce:italic> (<ce:italic>Cmt</ce:italic>), and <ce:italic>terminate</ce:italic> (<ce:italic>Trm</ce:italic>) shown in the rectangular box in <ce:cross-ref refid="fg0120" id="crf2130">Fig. 12</ce:cross-ref>. In <ce:italic>Syn</ce:italic>, the locked signal is activated to prevent other choices from being executed in case of more than one guard becoming true.</ce:para><ce:para id="pr2630" view="all">Once the TSM has reached <ce:italic>Syn</ce:italic>, it has decided to actually take the transition to <ce:italic>B</ce:italic> and hence moves on to state <ce:italic>Cmt</ce:italic>. Here the watchdog timer associated with <ce:italic>B</ce:italic> and possibly some memory flags are cleared according to the FATAL<ce:sup loc="post">+</ce:sup> state machine, and the new state <ce:italic>B</ce:italic> is captured by the output flip-flops driving the state communication data bus (recall Section <ce:cross-ref refid="se0380" id="crf2140">6.2</ce:cross-ref>). Note that the resulting delay must be accounted for in the communication delay bounds <ce:italic>d</ce:italic>, <mml:math altimg="si443.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si444.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>. Finally, the TSM moves on to state <ce:italic>Trm</ce:italic>, in which the reset signals are inactivated again and the TSM clock is halted (and the TSM sequence counter forced to the reset state). The locked signal is also cleared here, which effectively moves the ASM to state <ce:italic>B</ce:italic>. It is only now that guards pertaining to state <ce:italic>B</ce:italic> may become true.</ce:para><ce:section id="se0480" view="all"><ce:section id="se0660" view="all"><ce:section-title id="st0700">Metastability.</ce:section-title><ce:para id="pr3370" view="all">Whereas any ambiguity of state transitions due to multiple activated guards can easily be resolved via some priority rule, metastability due to (a) enabled guards that become immediately disabled again or (b) new guards that are enabled close to "locking" time cannot be ruled out in general. However, as argued in Section <ce:cross-ref refid="se0370" id="crf2830">6.1</ce:cross-ref>, in FATAL<ce:sup loc="post">+</ce:sup> (a) could only occur during stabilization, due to type (3) guards, or due to faulty nodes successfully inducing metastability of memory flags; recall that otherwise type (1) and type (2) guards are always monotonic, with the reset (of watchdog timers and memory flags) being under the control of the local state machine. Similarly, our proofs in <ce:cross-ref refid="br0130" id="crf2840">[13]</ce:cross-ref> reveal that upsets due to (b) do not occur after stabilization in the main state machine and the quick cycle (<ce:cross-refs refid="fg0060 fg0080" id="crs0180">Figs. 6 and 8</ce:cross-refs>). As the main state machine is logically independent of the lower layers (<ce:cross-refs refid="fg0090 fg0100" id="crs0190">Figs. 9 and 10</ce:cross-refs>) after stabilization, any metastability in these layers is fully masked. Thus, after stabilization, metastability of the TSMs we care about can only occur due to unstable inputs, i.e., upsets in memory flags, that are in addition filtered through threshold gates (type (1) guards use local timeouts and are thus considered non-faulty, and all type (2) guards employed by the main state machine and the quick cycle use thresholds). Note that due to the logical masking of metastability provided by the threshold gates (cf. Section <ce:cross-ref refid="se0440" id="crf2210">6.2.3</ce:cross-ref>) any memory flag acts as an implicit synchronizer: If a faulty node successfully induces metastability in the flag, this does not matter until the threshold can actually be reached. If the respective time span is large, the memory flag is likely to have stabilized again already. Therefore, in addition to succeeding in creating metastability, faulty nodes must do so within a specific window of time. Due to the asynchronously triggered transitions, this window of vulnerability of the synchronizing stage for <ce:italic>Syn</ce:italic> is very small. The resulting very low probability of a metastable upset due to a fault is considered acceptable.</ce:para><ce:para id="pr2650" view="all">The residual probability of metastable upsets could be further reduced by introducing synchronizer stages. Considering their performance penalty of one extra clock cycle on the one hand and the low initial risk of metastable upsets (that are handled by the system level fault tolerance with much lower average performance penalty) on the other hand, however, the introduction of synchronizers does not seem beneficial in general.</ce:para></ce:section><ce:section id="se0670" view="all"><ce:section-title id="st0710">Correctness.</ce:section-title><ce:para id="pr2660" view="all">Thanks to the synchronous TSM described above, the maximum state transition time <mml:math altimg="si445.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Trans</mml:mi></mml:mrow></mml:msub></mml:math> can easily be expressed in terms of the frequency of the pausable clock. Hence, it is reasonably easy to see that the HSM satisfies the specification given in Section <ce:cross-ref refid="se0240" id="crf2220">4</ce:cross-ref>, when it starts from a proper initial state and avoids the above scenarios (a) and (b) of unstable guards. A careful simulation analysis of the overall HSM design confirms that it can in fact recover from arbitrary initial states, except metastable ones. With respect to metastable initial states, we conjecture that eventual recovery occurs with probability 1 due to the fact that the only devices used in the implementation that are not forgetful are flip-flops with dominant reset (in the TSM sequence counter) and Muller C-gates (in the control logic of the ASM), for both of which it is known that metastability eventually resolves.</ce:para></ce:section></ce:section></ce:section><ce:section id="se0500" view="all"><ce:label>6.4</ce:label><ce:section-title id="st0520">Clocks and watchdog timers</ce:section-title><ce:section id="se0510" view="all"><ce:label>6.4.1</ce:label><ce:section-title id="st0530">Pausable oscillator</ce:section-title><ce:para id="pr2670" view="all">The TSM clock is an asynchronously startable and synchronously stoppable ring oscillator, which provides a clock signal <ce:italic>TSMClock</ce:italic> that is 0 when the clock is stopped via an active 1 input signal <ce:italic>TSMCStop</ce:italic>. A variant that is also asynchronously stoppable (under certain timing constraints) is used for driving the watchdog timers (see below). The frequency of the ring oscillator is primarily determined by the (odd) number of inverters in the feedback loop.<ce:cross-ref refid="fn0250" id="crf2230"><ce:sup loc="post">25</ce:sup></ce:cross-ref><ce:footnote id="fn0250"><ce:label>25</ce:label><ce:note-para id="np0270" view="all">In our FPGA implementation, the oscillator frequency is so high that, to reduce the hardware overhead for this proof-of-concept implementation, we also employ a frequency divider at the output.</ce:note-para></ce:footnote> It varies heavily with the operating conditions, in particular with supply voltage and temperature: The resulting (two-sided) clock drift <ce:italic>Î¾</ce:italic> is typically in the range of 7 to 9% for uncompensated ring oscillators like ours; in ASICs, it could be lowered down of 1 to 2% by special compensation techniques <ce:cross-ref refid="br0150" id="crf2240">[15]</ce:cross-ref>. Note that the two-sided clock drifts map to <mml:math altimg="si446.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mi>Î¾</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">/</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>Î¾</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> bounds roughly between 1.15 and 1.19 or 1.02 and 1.04, respectively.</ce:para><ce:section id="se0680" view="all"><ce:section-title id="st0720">Correctness.</ce:section-title><ce:para id="pr3380" view="all">The operation of the TSM clock circuit shown in <ce:cross-ref refid="fg0130" id="crf2850">Fig. 13</ce:cross-ref><ce:float-anchor refid="fg0130"/> is straightforward: In its initial state, <ce:italic>TSMCStop</ce:italic><ce:hsp sp="0.2"/>=<ce:hsp sp="0.2"/>1 and the Muller C-gate has 1 at its output, so <ce:italic>TSMClock</ce:italic><ce:hsp sp="0.2"/>=<ce:hsp sp="0.2"/>0. Note that the circuit also stabilizes to the initial state if the Muller C-gate was erroneously initialized to 0, as the ring oscillator would eventually generate <ce:italic>TSMClock</ce:italic><ce:hsp sp="0.2"/>=<ce:hsp sp="0.2"/>1, enforcing the correct initial value 1 of the C-gate. When the ASM requests a state transition, at some arbitrary time when a transition guard becomes true, it just sets <ce:italic>TSMCStop</ce:italic><ce:hsp sp="0.2"/>=<ce:hsp sp="0.2"/>LOW. This starts the TSM clock and produces the first rising edge of <ce:italic>TSMClock</ce:italic> half a clock cycle time later. As long as <ce:italic>TSMCStop</ce:italic> remains 0, the ring oscillator runs freely.</ce:para><ce:para id="pr3390" view="all">The stopping of <ce:italic>TSMClock</ce:italic> is regularly initiated by the TSM itself: With the rising edge of <ce:italic>TSMClock</ce:italic> that moves the TSM into <ce:italic>Trm</ce:italic>, <ce:italic>TSMCStop</ce:italic> is set to 1. Since <ce:italic>TSMClock</ce:italic> is also 1 after the rising edge,<ce:cross-ref refid="fn0330" id="crf2260"><ce:sup loc="post">26</ce:sup></ce:cross-ref><ce:footnote id="fn0330"><ce:label>26</ce:label><ce:note-para id="np0350" view="all">Obviously, we only have to take care in the timing analysis that setting <ce:italic>TSMCStop</ce:italic><ce:hsp sp="0.2"/>=<ce:hsp sp="0.2"/>1 occurs well within the first half period.</ce:note-para></ce:footnote> the output of the C-gate is forced to 1 as well. Hence, after having finished the half period of this final clock cycle, the feedback loop is frozen and <ce:italic>TSMClock</ce:italic> remains 0.</ce:para></ce:section><ce:section id="se0690" view="all"><ce:section-title id="st0730">Metastability.</ce:section-title><ce:para id="pr2700" view="all">The problem of devising a proof that the pausable clock will eventually recover when it starts from a metastable initial state is intricate (and outside the scope of this paper); this is not obvious due to the quite complex feedback loop involved in this circuit. We conjecture that similar arguments as in <ce:cross-ref refid="br0440" id="crf2270">[44]</ce:cross-ref> can be used to show that this will happen with probability 1; with this result established one could hope to infer that the HSM as a whole recovers from arbitrary metastable states with probability 1.</ce:para><ce:para id="pr3400" view="all">For metastability-free operation of the C-gate in <ce:cross-ref refid="fg0130" id="crf2860">Fig. 13</ce:cross-ref>, (a) the falling transition of <ce:italic>TSMCStop</ce:italic> must not occur simultaneously with a rising edge of <ce:italic>TSMClock</ce:italic>, and (b) the rising transition of <ce:italic>TSMCStop</ce:italic> must not occur simultaneously with the falling edge of <ce:italic>TSMClock</ce:italic>. (a) is guaranteed by stopping the clock in state <ce:italic>Trm</ce:italic> of the TSM, since the output of the C-gate is permanently forced to 1 on this occasion; <ce:italic>TSMClock</ce:italic> cannot hence generate a rising transition before <ce:italic>TSMCStop</ce:italic> goes to 0 again. Whereas this synchronous stopping normally also ensures (b), we cannot always rule out the possibility of getting <ce:italic>TSMCStop</ce:italic><ce:hsp sp="0.2"/>=<ce:hsp sp="0.2"/>1 close to the <ce:italic>first</ce:italic> rising edge of <ce:italic>TSMClock</ce:italic>: (b) could thus occur due to prematurely disabled type (3) guards, which we discussed already with respect to their potential to create metastability in the TSM, recall Section <ce:cross-ref refid="se0470" id="crf2290">6.3</ce:cross-ref>. Besides being a rare event, this can only do harm during stabilization, however.</ce:para></ce:section></ce:section><ce:section id="se0540" view="all"><ce:label>6.4.2</ce:label><ce:section-title id="st0560">Watchdog timer design</ce:section-title><ce:para id="pr2720" view="all">Every ASM state, except for <ce:italic>accept</ce:italic> in <ce:cross-ref refid="fg0080" id="crf2300">Fig. 8</ce:cross-ref>, is associated with at most one watchdog timer required for type (1) guards; <ce:italic>accept</ce:italic> is associated with three timers (for <mml:math altimg="si447.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> and <mml:math altimg="si376.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> as well as for <mml:math altimg="si448.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> in <ce:cross-ref refid="fg0060" id="crf2310">Fig. 6</ce:cross-ref>). Recall that a timer is reset by the TSM when its associated state is entered, which does not necessarily happen synchronously with its counting clock.</ce:para><ce:para id="pr2730" view="all">According to <ce:cross-ref refid="fg0140" id="crf2320">Fig. 14</ce:cross-ref><ce:float-anchor refid="fg0140"/>, every watchdog timer consists of a synchronous, dominantly resettable up-counter that is clocked by its own pausable oscillator (as shown in <ce:cross-ref refid="fg0130" id="crf2330">Fig. 13</ce:cross-ref>) and a timeout register that holds the timeout value TO.<ce:cross-ref refid="fn0270" id="crf2340"><ce:sup loc="post">27</ce:sup></ce:cross-ref><ce:footnote id="fn0270"><ce:label>27</ce:label><ce:note-para id="np0290" view="all">Note that these values must be hard-coded in order to avoid that a fault that intuitively should be transient (e.g. a bit flip in volatile memory) becomes permanent by "altering the algorithm".</ce:note-para></ce:footnote> A comparator raises an output signal if the counter value is equal to the TO register value. A "capture flip-flop" with dominant reset memorizes the <ce:italic>expired</ce:italic> condition until the timer is re-triggered. Note that using a (synchronous) flip-flop instead of an SR latch here allows us to completely mask glitches at the comparator output, which may originate from intermediate inconsistent bit patterns at the counter output.</ce:para><ce:para id="pr2740" view="all">The reset signal <ce:italic>TSMresWD</ce:italic>, supplied by the TSM, (re-)triggers the watchdog as follows: The counter is reset to zero, the capture flip-flop is cleared, and the oscillator is temporarily stopped. Stopping the oscillator is necessary to avoid metastability effects due to the unsynchronized release of the reset signal (recall that this signal originates from the clock domain of the TSM!) and the watchdog's local oscillator. Note carefully, however, that the Muller C-gate in <ce:cross-ref refid="fg0130" id="crf2350">Fig. 13</ce:cross-ref> must be extended by a dominant reset input connected to its stop input (<ce:italic>TSMCStop</ce:italic>) to prevent metastable upsets. Moreover, to ensure a proper reset, one has to make sure that the reset duration is sufficiently large. To guarantee this, <ce:italic>TSMresWD</ce:italic> is fed into a pulse shaping circuitry (bottom left part of <ce:cross-ref refid="fg0140" id="crf2360">Fig. 14</ce:cross-ref>) that makes sure that the reset pulse is longer than one period of the local clock.<ce:cross-ref refid="fn0280" id="crf2370"><ce:sup loc="post">28</ce:sup></ce:cross-ref><ce:footnote id="fn0280"><ce:label>28</ce:label><ce:note-para id="np0300" view="all">This is why seven inverters are shown in <ce:cross-ref refid="fg0140" id="crf2380">Fig. 14</ce:cross-ref>, indicating that the output pulse needs to remain active for more than two half periods of the local clock, assuming three inverters in its oscillator's loop.</ce:note-para></ce:footnote> At the end of this shaped reset pulse, counter and flip-flop have attained a clean reset state, and the local oscillator has safely been brought to a stable stopped state (with its output at 0). When reset is finally released (to 0), the oscillator starts running. As soon as the comparator detects a match between the current count and the timeout register, it will set match to 1. This rising edge is captured by the flip-flop, thus keeping the watchdog timeout signal <ce:italic>WDexpired</ce:italic> at 1 even when the comparator reverts its output to 0 later on again (note that the counter keeps on running). This construction ensures that the oscillator continues to operate also after the timeout expires, which is crucial for self-stabilization; in a system where the clocks driving the timeouts can be permanently halted, there is no way to avoid deadlocks for all possible states.</ce:para><ce:para id="pr2750" view="all">As for the watchdog timer with random timeout <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> in <ce:cross-ref refid="fg0100" id="crf2390">Fig. 10</ce:cross-ref>, our implementation uses a <ce:italic>linear feedback shift register</ce:italic> (LFSR) that is continuously clocked by the watchdog's oscillator: A uniformly distributed random value from the specified range, sampled from the LFSR, is loaded into the timeout register whenever the watchdog timer is re-triggered.<ce:cross-ref refid="fn0290" id="crf2400"><ce:sup loc="post">29</ce:sup></ce:cross-ref><ce:footnote id="fn0290"><ce:label>29</ce:label><ce:note-para id="np0310" view="all">Note that for many settings, it is reasonable to assume that the new random value remains a secret until the timeout expires, as it is not read or in any other way considered by the node until then. Under this condition, FATAL<ce:sup loc="post">+</ce:sup> is resilient against the strong adversary specified in <ce:cross-ref refid="br0130" id="crf2410">[13]</ce:cross-ref>. As our prototype implementation is not meant for studying security issues, however, the simple LFSR implementation is sufficient here.</ce:note-para></ce:footnote> If both the watchdog timer and the LFSR are clocked by the same oscillator, this can be done in a synchronous way. In order to avoid metastable upsets of the LFSR, which might occur when stopping the clock upon retriggering the watchdog as described above, we use a standard pausable oscillator for <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>: Since <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> is guaranteed to timeout before it is re-triggered (see <ce:cross-ref refid="fg0100" id="crf2420">Fig. 10</ce:cross-ref>), we can stop the oscillator synchronously (as in the TSM) when the timeout occurs, i.e., tie its stop input to the OR of <ce:italic>WDexpired</ce:italic> and the pulse-shaped reset signal. Another add-on is needed for the random timer <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> in order to guarantee that the LFSR recovers from an arbitrary state after a fault: Since an LFSR has a forbidden internal state (all-0 in our case), we use an additional comparator that detects an all-0 LFSR output and forces a (synchronized) reset of the LFSR to a proper initial state.</ce:para><ce:section id="se0550" view="all"><ce:section-title id="st0570">Metastability.</ce:section-title><ce:para id="pr2760" view="all">Using a dominant reset in conjunction with a reset pulse of sufficient length guarantees that pausable oscillator, counter, and flip-flop cannot become metastable when a watchdog timer is re-triggered. Since all other activities are driven by the local oscillator and hence trivially metastability-free, this leaves the pulse-shaping unit as the only component that could possibly suffer from a metastable upset. However, <ce:italic>TSMresWD</ce:italic> is generated by the TSM, which is guaranteed to generate a clean pulse at every correct node. Hence, the pulse shaping unit could become metastable only at a faulty node. With respect to the recovery from a metastable state, similar considerations as for the memory flags in Section <ce:cross-ref refid="se0420" id="crf2430">6.2.2</ce:cross-ref> suggest that the pulse shaping unit will stabilize to an initial state with reset set to 0 eventually with probability 1.</ce:para></ce:section><ce:section id="se0560" view="all"><ce:section-title id="st0580">Correctness.</ce:section-title><ce:para id="pr2770" view="all">Combining the implementations of the pausable oscillator (with additional reset) and the watchdog timer, it is not too difficult to verify that the specification given in Section <ce:cross-ref refid="se0240" id="crf2440">4</ce:cross-ref> is met, provided all circuits start from a non-metastable initial state.</ce:para><ce:para id="pr2780" view="all">With respect to self-stabilization, the pulse shaping unit can be guaranteed to stabilize to an initial state with its reset output 0 from an arbitrary internal state. Hence, the pausable oscillator and hence the counter will eventually run. Provided that the counter implementation guarantees that it cycles through the full (finite) sequence of possible states (unless reset earlier), i.e., there are no deadlock states or alternative cyclic sequences that might be entered in case of a fault, our implementation ensures that <ce:italic>WDexpired</ce:italic> will eventually be set to 1, even if started from an arbitrary initial state. One should bear in mind, though, that the time to recover a watchdog timer contributes to the overall stabilization time of the system. It is hence advisable to make sure that recovering a watchdog timer does not take much longer than the largest timeout value in the system, e.g. by avoiding oversized counter registers.</ce:para></ce:section></ce:section></ce:section><ce:section id="se0570" view="all"><ce:label>6.5</ce:label><ce:section-title id="st0590">Computing the end-to-end delay bounds</ce:section-title><ce:para id="pr2790" view="all">From the implementations of the individual components, it is straightforward to compute the delays <ce:italic>d</ce:italic>, <mml:math altimg="si343.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, and <mml:math altimg="si344.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>. Recall that <ce:italic>d</ce:italic> bounds, for any node <ce:italic>i</ce:italic>, the maximal time that passes between a state transition of a remote node and a possibly triggered corresponding state change, i.e., the transition of <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. This is done by computing the maximal sum of delays of any possible computing path, ranging over all possible state transitions (cf. <ce:cross-ref refid="fg0050" id="crf2450">Fig. 5</ce:cross-ref>), taking into account the delay of the channels <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>. Clearly, the channel delay for the remote channels <mml:math altimg="si20.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math> exceeds the delays of the local channels; hence, the longest path to the input ports of the state transition module is bounded by <mml:math altimg="si449.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Th</mml:mi></mml:mrow></mml:msub><mml:mo>&gt;</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Time</mml:mi></mml:mrow></mml:msub></mml:math>. Subsequently, the HSM locks the state transition and the TSM executes, which takes about two and a half clock cycles <ce:italic>C</ce:italic> of the pausable oscillator. Note, however, that the new state is written into the flip-flops holding the state already during the <ce:italic>commit</ce:italic> cycle, i.e., after at most 1.5<ce:italic>C</ce:italic>. A more accurate bound on <ce:italic>d</ce:italic> than <mml:math altimg="si450.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Th</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mn>2.5</mml:mn><mml:mi>C</mml:mi></mml:math> is thus<ce:display><ce:formula id="fm0090"><mml:math altimg="si451.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>â©½</mml:mo><mml:mn>1.5</mml:mn><mml:mi>C</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">max</mml:mi><mml:mo stretchy="false">{</mml:mo><mml:mi>C</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Mem</mml:mi></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Th</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo><mml:mo>.</mml:mo></mml:math></ce:formula></ce:display></ce:para><ce:para id="pr2800" view="all">For our approach, <mml:math altimg="si452.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>â</mml:mo><mml:mi>d</mml:mi></mml:math>, since the only difference to <ce:italic>d</ce:italic> is that <mml:math altimg="si433.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub></mml:math> is replaced by <mml:math altimg="si453.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math>, the delay of the simpler 1-bit channels (cf. Section <ce:cross-ref refid="se0390" id="crf2460">6.2.1</ce:cross-ref>). If the main state machine's channels would utilize serial encoding, though, one might well have that <mml:math altimg="si454.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow></mml:msub><mml:mo>â«</mml:mo><mml:mi mathvariant="normal">max</mml:mi><mml:mo stretchy="false">{</mml:mo><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">Chan</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">}</mml:mo></mml:math>. Finally, <mml:math altimg="si455.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>&gt;</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mi>Ï</mml:mi></mml:math>, since this is the minimal time the HSM allows between locking a state transition and actually performing the transition at the port <mml:math altimg="si19.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math>.<ce:cross-ref refid="fn0300" id="crf2470"><ce:sup loc="post">30</ce:sup></ce:cross-ref><ce:footnote id="fn0300"><ce:label>30</ce:label><ce:note-para id="np0320" view="all">Clearly, a more precise analysis would yield tighter bounds.</ce:note-para></ce:footnote></ce:para></ce:section></ce:section><ce:section id="se0580" view="all"><ce:label>7</ce:label><ce:section-title id="st0600">Experimental evaluation</ce:section-title><ce:para id="pr2810" view="all">Our prototype implementation has been written in VHDL and compiled for an Altera Cyclone IV FPGA using the Quartus tool, see <ce:cross-ref refid="br0470" id="crf2480">[47]</ce:cross-ref>.</ce:para><ce:para id="pr2820" view="all">Since FPGAs neither natively provide the basic elements required for asynchronous designs nor allow the designer to exercise control over the actual mapping of functions to the available LUTs (we implemented threshold modules via LUTs rather than via combinational AND-OR networks for complexity reasons), we had to make sure that properties that hold naturally in "real" asynchronous implementations also hold here. Apart from standard functional and timing verification via Modelsim, we therefore conducted some preliminary experiments for verifying the assumed properties (glitch-freeness, monotonicity, etc.) of the synthesized implementations of our core building blocks. Backed up by the (positive) results of these experiments, complete systems consisting of <mml:math altimg="si456.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:math> respectively <mml:math altimg="si457.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>8</mml:mn></mml:math> nodes (tolerating at most <mml:math altimg="si458.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> respectively <mml:math altimg="si459.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:math> Byzantine faulty nodes) have been built and verified to work as expected; overall, they consume 23000 respectively 55000 logic blocks. Note however, that both designs also include the test environment, which makes up a significant part of the setup.</ce:para><ce:para id="pr2830" view="all">To facilitate systematic experiments, we developed a custom test bench that provides the following functionality:<ce:list id="ls0240"><ce:list-item id="li0880"><ce:label>(1)</ce:label><ce:para id="pr2840" view="all">Measurement of pulse frequency and skew at different nodes.</ce:para></ce:list-item><ce:list-item id="li0890"><ce:label>(2)</ce:label><ce:para id="pr2850" view="all">Continuous monitoring of the potential for generating metastability in HSM state transitions.</ce:para></ce:list-item><ce:list-item id="li0900"><ce:label>(3)</ce:label><ce:para id="pr2860" view="all">Starting the entire system from an arbitrary state (including memory flags and timers), either specified deterministically or chosen at random.</ce:para></ce:list-item><ce:list-item id="li0910"><ce:label>(4)</ce:label><ce:para id="pr2870" view="all">Resetting a single node to some initial state, at arbitrary times.</ce:para></ce:list-item><ce:list-item id="li0920"><ce:label>(5)</ce:label><ce:para id="pr2880" view="all">Varying the clock frequency of any oscillator, at arbitrary times.</ce:para></ce:list-item><ce:list-item id="li0930"><ce:label>(6)</ce:label><ce:para id="pr2890" view="all">Choosing the communication delay between each pair of sender and receiver.</ce:para></ce:list-item></ce:list> All these experiments can be performed with Byzantine nodes. To this end, the HSMs of the Byzantine nodes can be replaced by special devices that allow to (possibly inconsistently) communicate, via the communication data buses, any HSM state to any receiver HSM at any time. Points (1) to (6) are achieved as follows:</ce:para><ce:para id="pr2900" view="all">(1) is accomplished using standard measurement equipment (logic analyzer, oscilloscope, frequency counter) attached to the appropriate signals routed via output pins.</ce:para><ce:para id="pr2910" view="all">(2) is implemented by memorizing any event where more than one guard is enabled (at the time when the TSM locks a state transition) in a flag that can be externally monitored.</ce:para><ce:para id="pr2920" view="all">(3) is realized by adding a scan-chain to the FPGA implementation, which allows us to serially shift-in arbitrary initial system states at run-time. Repeated random experiments are controlled via a Python script executed at a PC workstation, which is connected via USB to an ATMega 16 microcontroller (Î¼C) that acts as a scan-controller towards the FPGA. For each experiment, the Python script generates a bit-stream representing an initial configuration. The Î¼C takes this stream, sends it to the FPGA via the serial scan-chain interface, and finally signals the FPGA to start execution of FATAL<ce:sup loc="post">+</ce:sup>. Simultaneously, it starts a timer. When a timeout occurs or the FPGA signals completion of the experiment, the Î¼C informs the Python script which records the time until completion together with the outcome of the experiment and proceeds with sending the next initial configuration.</ce:para><ce:para id="pr2930" view="all">To enable (4) to (6), the testbench provides a global high-resolution clock that can be used for triggering mode changes. To ensure its synchrony w.r.t. the various nodes' clocks, we replaced all start/stoppable ring oscillators by start/stoppable oscillators that derive their output from the global clock signal. Point (4) is achieved by just forcing a node to reset to its initial state for this run at any time during the current execution. In order to facilitate (5), dividers combined with clock multipliers (PLLs) are used: For any oscillator, it is possible to choose one of five different frequencies (0, excessively slow, slow, fast, excessively fast) at any time. For (6), a variable delay line implemented as a synchronous shift register of length <mml:math altimg="si460.gif" overflow="scroll"><mml:mi>X</mml:mi><mml:mo>â</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>15</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:math>, driven by the global clock, can be inserted in any data bus connecting different HSMs individually.</ce:para><ce:para id="pr2940" view="all">In order to exercise also complex test scenarios in a reproducible way, a dedicated <ce:italic>testbed execution state machine</ce:italic> (TESM), driven by the global clock, is used to control the times and nodes when and where clock speeds, transmission delays, and communicated fault states are changed and when a single node is reset throughout an execution of the system. Transition guards may involve global time and any combinatorial expression of signals used in the implementation of FATAL<ce:sup loc="post">+</ce:sup>, i.e., any predicate on the current system state.</ce:para><ce:para id="pr2950" view="all">Using our testbench, it was not too difficult to get our FATAL<ce:sup loc="post">+</ce:sup> implementation up and running. With the implementation parameters <mml:math altimg="si461.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo>=</mml:mo><mml:mn>1.3</mml:mn></mml:math>, <mml:math altimg="si462.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>13</mml:mn><mml:mi>T</mml:mi></mml:math>, <mml:math altimg="si463.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:mn>3</mml:mn><mml:mi>T</mml:mi></mml:math>, where <mml:math altimg="si464.gif" overflow="scroll"><mml:mi>T</mml:mi><mml:mo>=</mml:mo><mml:mn>400</mml:mn><mml:mspace width="0.25em"/><mml:mtext>ns</mml:mtext></mml:math> (2.5 MHz) is the experimental clock period, and minimal timeouts according to the constraints listed in <ce:cross-ref refid="br0130" id="crf2490">[13]</ce:cross-ref> (cf. Section <ce:cross-ref refid="se0340" id="crf2500">5.7</ce:cross-ref>), pulses of an 8 node FATAL respectively FATAL<ce:sup loc="post">+</ce:sup> system (including the quick cycle) occur at a frequency of about 62 Hz respectively 10 kHz. A logic analyzer screenshot is depicted in <ce:cross-ref refid="fg0150" id="crf2510">Fig. 15</ce:cross-ref><ce:float-anchor refid="fg0150"/>. Note that the quite low values for the frequency stem from the fact that we were intentionally slowing down the system, enabling better control of the execution.</ce:para><ce:para id="pr2960" view="all">As to be expected from such a fairly complex setup, we spotted several hidden design errors that showed up during our experiments, but also some minor, yet problematic errors in our theoretical analysis (like a missing factor of <ce:italic>Ï</ce:italic> in one of our timeouts due to a typo). In the original setup, these issues manifested in deviations of the measured w.r.t. the predicted performance. After resolving them, we conducted the following experiments, observing the behavior of both the overall FATAL<ce:sup loc="post">+</ce:sup> and the underlying FATAL pulse generation protocol.</ce:para><ce:section id="se0590" view="all"><ce:label>7.1</ce:label><ce:section-title id="st0610">Worst-case skew experiment</ce:section-title><ce:para id="pr2970" view="all">To drive an 8-node FATAL system into a worst-case skew scenario,<ce:cross-ref refid="fn0310" id="crf2520"><ce:sup loc="post">31</ce:sup></ce:cross-ref><ce:footnote id="fn0310"><ce:label>31</ce:label><ce:note-para id="np0330" view="all">The maximal imprecision is meaningful in connection with the system's frequency only. In contrast, the skew captures the maximal time difference between corresponding signal transitions at the nodes, which reflects the quality of synchronization without requiring additional context.</ce:note-para></ce:footnote> the set of nodes was split into four sets:<ce:list id="ls0250"><ce:list-item id="li0940"><ce:label>â¢</ce:label><ce:para id="pr2980" view="all">A set <ce:italic>A</ce:italic> of two nodes with slow clock sources. All communication to these nodes is maximally delayed.</ce:para></ce:list-item><ce:list-item id="li0950"><ce:label>â¢</ce:label><ce:para id="pr2990" view="all">A set <ce:italic>B</ce:italic> of two nodes with fast clock sources. All communication to these nodes is minimally delayed.</ce:para></ce:list-item><ce:list-item id="li0960"><ce:label>â¢</ce:label><ce:para id="pr3000" view="all">Another set <ce:italic>C</ce:italic> of two nodes with fast clock sources. All communication to these nodes is maximally delayed.</ce:para></ce:list-item><ce:list-item id="li0970"><ce:label>â¢</ce:label><ce:para id="pr3010" view="all">A set <ce:italic>D</ce:italic> of two faulty nodes. These nodes always send <ce:italic>propose</ce:italic> to the nodes in <ce:italic>B</ce:italic> and do not send any other signals.<ce:cross-ref refid="fn0320" id="crf2530"><ce:sup loc="post">32</ce:sup></ce:cross-ref><ce:footnote id="fn0320"><ce:label>32</ce:label><ce:note-para id="np0340" view="all">In our model, this behavior is mapped to a default signal at the receivers, e.g. <ce:italic>resync</ce:italic> in the main state machine.</ce:note-para></ce:footnote></ce:para></ce:list-item></ce:list></ce:para><ce:para id="pr3020" view="all">This setup leads to the following behavior of the main state machine (<ce:cross-ref refid="fg0080" id="crf2540">Fig. 8</ce:cross-ref>) once the system is stabilized. The nodes in <mml:math altimg="si465.gif" overflow="scroll"><mml:mi>B</mml:mi><mml:mo>âª</mml:mo><mml:mi>C</mml:mi></mml:math> will always switch to <ce:italic>propose</ce:italic> first because their timeouts <mml:math altimg="si378.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expire (it is shown in <ce:cross-ref refid="br0130" id="crf2550">[13]</ce:cross-ref> that at this time <mml:math altimg="si466.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mtext><ce:small-caps>next</ce:small-caps></mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> at all non-faulty nodes), and due to the "help" of the faulty nodes, the threshold of <mml:math altimg="si467.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>6</mml:mn></mml:math> for switching to <ce:italic>accept</ce:italic> is reached at the nodes in <ce:italic>B</ce:italic> after the minimal delay. It takes the maximal delay until the nodes in <ce:italic>A</ce:italic> realize that <mml:math altimg="si468.gif" overflow="scroll"><mml:mn>4</mml:mn><mml:mo>â©¾</mml:mo><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> nodes reached state <ce:italic>propose</ce:italic> and switch to this state. Since <mml:math altimg="si469.gif" overflow="scroll"><mml:mn>4</mml:mn><mml:mo>&lt;</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math>, the nodes in <mml:math altimg="si470.gif" overflow="scroll"><mml:mi>A</mml:mi><mml:mo>âª</mml:mo><mml:mi>C</mml:mi></mml:math> require the support of the nodes in <ce:italic>A</ce:italic> to follow to state <ce:italic>accept</ce:italic>. Hence, this happens another maximal delay later. The resulting scenario is depicted in <ce:cross-ref refid="fg0160" id="crf2560">Fig. 16</ce:cross-ref><ce:float-anchor refid="fg0160"/>. Assuming that the communication delay is at most <ce:italic>d</ce:italic> and at least <mml:math altimg="si471.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow></mml:msub><mml:mo>â©¾</mml:mo><mml:mn>0</mml:mn></mml:math>, we predict a skew of at most <mml:math altimg="si472.gif" overflow="scroll"><mml:mn>2</mml:mn><mml:mi>d</mml:mi><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow></mml:msub></mml:math> between the nodes in <ce:italic>B</ce:italic> switching to <ce:italic>accept</ce:italic> and the nodes in <mml:math altimg="si470.gif" overflow="scroll"><mml:mi>A</mml:mi><mml:mo>âª</mml:mo><mml:mi>C</mml:mi></mml:math> catching up.</ce:para><ce:para id="pr3030" view="all">The experimental results confirmed the analytic predictions as being essentially tight: Letting the fast nodes run at a speed of 3 MHz and the slow nodes at 2.5 MHz, and setting the maximum delay <ce:italic>d</ce:italic> to about 3.6 Î¼s (9 clock cycles), we observed a skew of about 6 Î¼s. This is consistent with the relatively large minimum delay <mml:math altimg="si473.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow></mml:msub></mml:math> arising in our testbed. A logic analyzer screenshot is depicted in <ce:cross-ref refid="fg0170" id="crf2570">Fig. 17</ce:cross-ref><ce:float-anchor refid="fg0170"/>.</ce:para><ce:para id="pr3040" view="all">The figure also demonstrates the capability of FATAL<ce:sup loc="post">+</ce:sup> to generate pulses with significantly less skew (1 Î¼s) on top of the FATAL pulses with worst-case skew.</ce:para></ce:section><ce:section id="se0600" view="all"><ce:label>7.2</ce:label><ce:section-title id="st0620">Metastability experiments</ce:section-title><ce:para id="pr3050" view="all">We run a series of experiments dedicated to finding situations that potentially lead to metastable upsets. We repeatedly set up 8-node systems with randomly chosen clock speeds between 2.5 MHz and 3.25 MHz and communication delays of at most 16 clock cycles. While the system stabilized from these random initial states, we monitored the nodes' HSM state transitions after stabilization for multiple active conflicting state transitions during a period of over 60 h in total. As predicted by our theoretical findings, in none of the experiments two conflicting guards were ever active at the same (global testbench) time after stabilization.</ce:para></ce:section><ce:section id="se0610" view="all"><ce:label>7.3</ce:label><ce:section-title id="st0630">Stabilization time experiments</ce:section-title><ce:para id="pr3060" view="all">We evaluated stabilization time both in the absence and in the presence of faulty nodes. In the latter case, we demonstrated the influence of the choice of the random timeout <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> on the stabilization time.</ce:para><ce:section id="se0620" view="all"><ce:label>7.3.1</ce:label><ce:section-title id="st0640">Stabilization in the absence of faulty nodes</ce:section-title><ce:para id="pr3070" view="all">To evaluate stabilization times in the absence of faulty nodes, we set up an 8 node system and run over 250000 experiments in each of which the nodes booted from random initial states, with randomly chosen clock speeds between 2.5 MHz and <mml:math altimg="si474.gif" overflow="scroll"><mml:mn>3.25</mml:mn><mml:mspace width="0.25em"/><mml:mtext>MHz</mml:mtext><mml:mo>=</mml:mo><mml:mn>2.5</mml:mn><mml:mi>Ï</mml:mi><mml:mspace width="0.25em"/><mml:mtext>MHz</mml:mtext></mml:math>, and message delays of up to <mml:math altimg="si475.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>16</mml:mn></mml:math> clock cycles. As soon as all nodes switched to state <ce:italic>accept</ce:italic> within 2<ce:italic>d</ce:italic> time, the FPGA signaled the Î¼C to record the elapsed time and start the next experiment. A considerable fraction of the scenarios (over 45%) stabilizes within less than 0.035 s (less than 5500<ce:italic>d</ce:italic>), which can be credited to the fast stabilization mechanism intended for individual nodes resynchronizing to a running system (see <ce:cross-ref refid="fg0180" id="crf2580">Fig. 18</ce:cross-ref><ce:float-anchor refid="fg0180"/>). The remaining runs (see <ce:cross-ref refid="fg0190" id="crf2590">Fig. 19</ce:cross-ref><ce:float-anchor refid="fg0190"/>; please mind the different <ce:italic>y</ce:italic>-axis scale) stabilize, supported by the resynchronization routine, in less than 12 s (about <mml:math altimg="si476.gif" overflow="scroll"><mml:mn>1.9</mml:mn><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math>), which is less than the system's upper bound on <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> of approximately 14.9 s (about <mml:math altimg="si477.gif" overflow="scroll"><mml:mn>2.3</mml:mn><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math>) and significantly less than the system's upper bound on <mml:math altimg="si410.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">slow</mml:mi></mml:mrow></mml:msub></mml:math> given in <ce:cross-ref refid="en0160" id="crf2600">Theorem 5.2</ce:cross-ref>, which is no more than 44.5 s (about <mml:math altimg="si478.gif" overflow="scroll"><mml:mn>7</mml:mn><mml:mo>â</mml:mo><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mn>6</mml:mn></mml:mrow></mml:msup><mml:mi>d</mml:mi></mml:math>) in this scenario. Note that the stabilization time is inversely proportional to the frequency, i.e., in a system that is not artificially slowed down, stabilization is orders of magnitude faster. For example, assuming <mml:math altimg="si479.gif" overflow="scroll"><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mspace width="0.25em"/><mml:mtext>ns</mml:mtext></mml:math>, we obtain that over 45% of the experiments stabilize within 5.5 Î¼s, and all experiments stabilize within 1.9 ms.</ce:para><ce:para id="pr3080" view="all">Experimental results carried out for a 4-node system were analogous.</ce:para><ce:para id="pr3090" view="all">Either the main algorithm was capable to stabilize by itself (as for a large fraction the experiments in the head of the distribution), or once the resynchronization algorithm provided support after <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expired at some node and <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> nodes switched to <ce:italic>resync</ce:italic> in approximate synchrony (the experiments in the tail of the distribution). <ce:cross-ref refid="fg0200" id="crf2610">Fig. 20</ce:cross-ref><ce:float-anchor refid="fg0200"/> shows stabilization by the resynchronization algorithm in a 4-node system: Eventually, all nodes switch to state <ce:italic>none</ce:italic>. A node whose timeout <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expires at a time when all timeouts <mml:math altimg="si480.gif" overflow="scroll"><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mrow><mml:mi mathvariant="italic">supp</mml:mi></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:math> are expired, say node 1, forces all nodes from <ce:italic>none</ce:italic> into <mml:math altimg="si481.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">supp</mml:mi></mml:mrow><mml:mspace width="0.2em"/><mml:mn>1</mml:mn></mml:math>. Additional <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> timers, expiring at other nodes, may only force nodes into <ce:italic>supp</ce:italic><ce:hsp sp="0.2"/><ce:italic>j</ce:italic>, with <mml:math altimg="si482.gif" overflow="scroll"><mml:mi>j</mml:mi><mml:mo>â </mml:mo><mml:mn>1</mml:mn></mml:math>, but do not prevent nodes from eventually communicating <ce:italic>supp</ce:italic> to all other nodes. Thus nodes finally switch to <mml:math altimg="si483.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">supp</mml:mi></mml:mrow><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">resync</mml:mi></mml:mrow></mml:math> and from there to <ce:italic>resync</ce:italic>, in synchrony. This again suffices to deterministically stabilize the nodes' main algorithm (as shown in <ce:cross-ref refid="br0130" id="crf2620">[13]</ce:cross-ref>). Note that the condition that all corresponding <mml:math altimg="si430.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> timeouts are expired when a timeout <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expires (actually, <mml:math altimg="si2.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>f</mml:mi></mml:math> suffice) will eventually be satisfied. This happens at the latest when <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expires for the second time at some node, simply because the distribution of the randomized timeout <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> guarantees that the picked duration is always larger than (roughly) <mml:math altimg="si484.gif" overflow="scroll"><mml:mi>Ï</mml:mi><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math>.</ce:para></ce:section><ce:section id="se0630" view="all"><ce:label>7.3.2</ce:label><ce:section-title id="st0650">Stabilization with Byzantine nodes and deterministic timeouts</ce:section-title><ce:para id="pr3100" view="all">The importance of timeout <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> being randomly distributed is demonstrated in the following experiment. We set up a 4-node FATAL+ system with one Byzantine faulty node, say node 4, and chose all <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> to be equal and initially synchronized, i.e., all <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> timeouts expire at about the same time at all correct nodes. If the Byzantine node knows when <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> is going to expire, it can prohibit correct nodes from simultaneously switching to <ce:italic>resync</ce:italic>, thereby preventing synchronization of the Main Algorithm and thus stabilization: Shortly before <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expires at the correct nodes, it sends <ce:italic>init</ce:italic> to two nodes, say 1 and 3, making them switch to <mml:math altimg="si485.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">supp</mml:mi></mml:mrow><mml:mspace width="0.2em"/><mml:mn>4</mml:mn></mml:math>. Subsequently, however, it only supports node 1 by sending <ce:italic>supp</ce:italic> to it. This forces node 1 to switch to <mml:math altimg="si486.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">supp</mml:mi></mml:mrow><mml:mo>â</mml:mo><mml:mrow><mml:mi mathvariant="italic">resync</mml:mi></mml:mrow></mml:math> and then <ce:italic>resync</ce:italic> alone. While node 1 is in <ce:italic>resync</ce:italic> (i.e., while <mml:math altimg="si487.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:math> is running), it does not support other nodes by sending <ce:italic>supp</ce:italic>. Specifically, it does not support nodes 2 and 3 when they switch to <mml:math altimg="si481.gif" overflow="scroll"><mml:mrow><mml:mi mathvariant="italic">supp</mml:mi></mml:mrow><mml:mspace width="0.2em"/><mml:mn>1</mml:mn></mml:math>. Eventually all nodes switch back to <ce:italic>none</ce:italic>, and the scenario can be repeated. <ce:cross-ref refid="fg0210" id="crf2630">Fig. 21</ce:cross-ref><ce:float-anchor refid="fg0210"/> depicts the scenario and <ce:cross-ref refid="fg0220" id="crf2640">Fig. 22</ce:cross-ref><ce:float-anchor refid="fg0220"/> shows a logic analyzer screenshot of this experiment. Note, however, that by definition of the probability distribution of <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math>, executions where <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expires in synchrony at all correct nodes forever occur with probability 0.</ce:para><ce:para id="pr3110" view="all">We remark that there is always a nonzero probability that the randomly chosen durations of the timeouts <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> at non-faulty nodes align in a fortunate manner, so that stabilization could not be prevented even by an omniscient adversary orchestrating clock drifts, message delays, and faulty nodes. While the probability of such a convenient event occurring in <mml:math altimg="si3.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> time decreases exponentially in the number of nodes <ce:italic>n</ce:italic>, it is reasonably likely for <mml:math altimg="si488.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>7</mml:mn></mml:math> and in particular <mml:math altimg="si456.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:math> (i.e., systems that tolerate <mml:math altimg="si459.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:math> or <mml:math altimg="si458.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math> faults, respectively). This observation has been verified for <mml:math altimg="si456.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>4</mml:mn></mml:math> by the first of the two experiments below.</ce:para></ce:section><ce:section id="se0640" view="all"><ce:label>7.3.3</ce:label><ce:section-title id="st0660">Stabilization with Byzantine nodes and probabilistic timeouts</ce:section-title><ce:para id="pr3120" view="all">Two experimental setups were chosen to test stabilization in the presence of Byzantine nodes, using probabilistic timeouts <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> for correct nodes. In the first experiment, a Byzantine node has access to the timeout values of all nodes as soon as they start their <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> timers. In this case, the Byzantine node followed the strategy from before, obstructing any stabilization attempt that would otherwise be successful. We observed that the Byzantine node was able to block at most one stabilization attempt of each non-faulty node. Then it failed to prevent stabilization because the <mml:math altimg="si430.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> timeouts corresponding to the Byzantine node did not expire on time before some non-faulty node successfully initialized stabilization.</ce:para><ce:para id="pr3130" view="all">In the second experiment, the Byzantine node has no access to timeout values, and therefore simply sends inconsistent <ce:italic>init</ce:italic> and <ce:italic>supp</ce:italic> signals as often as allowed by the timeouts <mml:math altimg="si430.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:math> corresponding to it. We did not observe any inhibited synchronized switch to <ce:italic>resync</ce:italic> when <mml:math altimg="si387.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>R</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msub></mml:math> expired at a correct node, however.</ce:para><ce:para id="pr3140" view="all">It should be noted that weaker adversaries and "better" initial configurations result in a constant stabilization time, irrespectively of the number of nodes <ce:italic>n</ce:italic> (see <ce:cross-ref refid="br0130" id="crf2650">[13]</ce:cross-ref> for details). The second experiment above demonstrates such a case; <ce:cross-ref refid="en0170" id="crf2660">Theorem 5.3</ce:cross-ref> states another. The common-case stabilization time will therefore be considerably smaller than the (probabilistic) worst-case bound that is linear in <ce:italic>n</ce:italic>.</ce:para></ce:section></ce:section></ce:section><ce:section id="se0650" role="conclusion" view="all"><ce:label>8</ce:label><ce:section-title id="st0670">Conclusions</ce:section-title><ce:para id="pr3150" view="all">In this work, we introduced a novel modeling framework for self-stabilizing, fault-tolerant asynchronous digital circuits and demonstrated its applicability to our recently introduced FATAL<ce:sup loc="post">+</ce:sup> clock generation scheme for multi-synchronous GALS architectures. Our framework enables to reason about high-level properties of the system based on the behavior of basic building blocks, at arbitrary granularity and in a seamless manner. At the same time, the hierarchical structure of the model permits to do this in a fashion amenable to formal analysis. We believe this to be the first approach concurrently providing all these features, and therefore consider it as a promising foundation for future research in the area of fault-tolerant digital circuits.</ce:para><ce:para id="pr3160" view="all">As the conclusion of our paper, we now assess to which extent the properties of our implementation of the FATAL<ce:sup loc="post">+</ce:sup> algorithm, which have been expressed and verified within our modeling framework and tested experimentally, meet our design goals. Furthermore, we will discuss a number of potential improvements and future research avenues. Our exposition will follow the optimization criteria listed in Section <ce:cross-ref refid="se0120" id="crf2670">2.1.7</ce:cross-ref>.<ce:list id="ls0260"><ce:list-item id="li0980"><ce:label>â¢</ce:label><ce:para id="pr3170" view="all"><ce:bold>Area consumption:</ce:bold> For a suitable implementation, the total number of gates is <mml:math altimg="si489.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> per node. This can be seen by observing that the complexity of the threshold gates is dominating the asymptotic number of gates, since the <mml:math altimg="si3.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> remaining components of a node have a constant number of gates each; using sorting networks to implement threshold gates, the stated complexity bound follows <ce:cross-ref refid="br0480" id="crf2680">[48]</ce:cross-ref>. Trivially, this number of gates is a factor of <mml:math altimg="si490.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> from optimal. We conjecture that in fact this complexity is asymptotically optimal, unless one is willing to sacrifice other desirable properties of the algorithm (e.g. optimal resilience). Assuming that the gate complexity of the nodes adequately represents the area consumption of our algorithm, we conclude that our solution is satisfactory in that regard.</ce:para></ce:list-item><ce:list-item id="li0990"><ce:label>â¢</ce:label><ce:para id="pr3180" view="all"><ce:bold>Communication complexity:</ce:bold> Our implementation uses 7 (1-bit) wires per channel, and sequential encoding of the states of the main state machine would reduce this number to 5. All communication are broadcasts. Considering the complexity of the task, there seems to be very limited room for improvement.</ce:para></ce:list-item><ce:list-item id="li1000"><ce:label>â¢</ce:label><ce:para id="pr3190" view="all"><ce:bold>Stabilization time:</ce:bold> Our algorithm has a stabilization time of <mml:math altimg="si3.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> in the worst case. Recent findings <ce:cross-ref refid="br0490" id="crf2690">[49]</ce:cross-ref> show that a polylogarithmic stabilization time can be achieved at a low communication complexity; however, this comes at the expense of suboptimal resilience, a weaker adversarial model, and, most importantly, constants in the complexity bounds that make the resulting algorithm inferior to our solution for any practical range of parameters. Moreover, as formalized in <ce:cross-ref refid="br0130" id="crf2700">[13]</ce:cross-ref> and demonstrated in Section <ce:cross-ref refid="se0580" id="crf2710">7</ce:cross-ref>, for a wide range of scenarios our algorithm achieves constant stabilization time. Considering the severe fault model, we conclude that despite not being optimal, our algorithm performs satisfactory with respect to this quality measure.</ce:para></ce:list-item><ce:list-item id="li1010"><ce:label>â¢</ce:label><ce:para id="pr3200" view="all"><ce:bold>Resilience:</ce:bold> It is known that <mml:math altimg="si491.gif" overflow="scroll"><mml:mn>3</mml:mn><mml:mi>f</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math> nodes are necessary to tolerate <ce:italic>f</ce:italic> faults <ce:cross-refs refid="br0250 br0140" id="crs0130">[25,14]</ce:cross-refs> unless cryptographic tools are available. Since the complexity incurred by cryptographic tools is prohibitive in our setting, our algorithm features optimal resilience.</ce:para></ce:list-item><ce:list-item id="li1020"><ce:label>â¢</ce:label><ce:para id="pr3210" view="all"><ce:bold>Delays:</ce:bold> As mentioned, the delay of wires is outside our control. Taking <mml:math altimg="si343.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">min</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> and <mml:math altimg="si344.gif" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="normal">max</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msubsup></mml:math> into account in the quick cycle machine, we make best use of the available bounds in terms of the final frequency/synchrony trade-off. The delays incurred by the computations performed at nodes are proportional to the depths of the involved circuits. Again, the implementation of the threshold gates is the dominant cost factor here. The sorting network by Ajtai et al. <ce:cross-ref refid="br0480" id="crf2720">[48]</ce:cross-ref> exhibits depth <mml:math altimg="si490.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>. Assuming constant fan-in of gates, this is clearly asymptotically optimal if the decision when to increase the logical clock <mml:math altimg="si492.gif" overflow="scroll"><mml:msub><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>v</mml:mi></mml:mrow></mml:msub></mml:math> next indeed depends on all <mml:math altimg="si493.gif" overflow="scroll"><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:math> input signals of <ce:italic>v</ce:italic> from remote nodes. We conclude that, so far as within our control, the design goal of minimizing the incurred delays is met by our algorithm.</ce:para></ce:list-item><ce:list-item id="li1030"><ce:label>â¢</ce:label><ce:para id="pr3220" view="all"><ce:bold>Metastability:</ce:bold> We discussed several effective measures to prevent metastability in Section <ce:cross-ref refid="se0360" id="crf2730">6</ce:cross-ref>. Our experiments support our theoretical finding that, after stabilization, metastability may not occur in absence of further faults. However, since metastability is an elusive problem for which it is difficult to transfer insights and observations to other modes of operation of a given system-let alone to different implementation technology-a mathematical treatment of metastability is highly desirable. Our model opens up various possible approaches to this issue. For one, it is feasible to switch to a more accurate description of signals in terms of signals' voltages as continuous functions of time. Another option choosing an intermediate level of complexity would be to add an additional signal state (e.g. â¥) for "invalid" signals, representing e.g. creeping or oscillating signals. Assigning appropriate probabilities of metastability propagation and decay to modules, this would enable a unified probabilistic analysis of metastability generation, propagation, and decay within a modeling framework using discrete state representations. Such an approach could yield entirely unconditional guarantees on system recovery; in contrast, our current description requires an <ce:italic>a priori</ce:italic> guarantee that metastability is sufficiently contained during the stabilization process.</ce:para></ce:list-item><ce:list-item id="li1040"><ce:label>â¢</ce:label><ce:para id="pr3230" view="all"><ce:bold>Connectivity:</ce:bold> The algorithm presented in this work requires to connect all pairs of nodes and is therefore not scalable. Unfortunately, it is known that <mml:math altimg="si494.gif" overflow="scroll"><mml:mi>Î©</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:math> links are required for tolerating <mml:math altimg="si495.gif" overflow="scroll"><mml:mi>f</mml:mi><mml:mo>â</mml:mo><mml:mi>Î©</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> faults in the worst case <ce:cross-refs refid="br0260 br0270" id="crs0140">[26,27]</ce:cross-refs>. We argued for the assumption of worst-case behavior of faulty nodes; however, it appears reasonable that typical systems will not exhibit a worst-case <ce:italic>distribution</ce:italic> of faults within the system. Indeed, many interesting scenarios justify to assume a much more benign distribution of faults. In the extreme case where faults are distributed uniformly and independently at random with a constant probability, say, 10%, of a node being faulty, node degrees of <mml:math altimg="si496.gif" overflow="scroll"><mml:mi mathvariant="normal">Î</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> would suffice to guarantee (at a given point in time) that the probability that more than <mml:math altimg="si497.gif" overflow="scroll"><mml:mi mathvariant="normal">Î</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>9</mml:mn></mml:math> neighbors of any node are faulty, is at most <mml:math altimg="si498.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>c</mml:mi></mml:mrow></mml:msup></mml:math>. Note that this implies that the mean time until this property is violated polynomially <ce:italic>grows</ce:italic> with system size. Using the FATAL<ce:sup loc="post">+</ce:sup> protocol in small subsystems (of less than Î nodes), system-wide synchronization will be much easier to achieve than if one would start from scratch. In this setting, <mml:math altimg="si499.gif" overflow="scroll"><mml:mi mathvariant="normal">Î</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> would replace <ce:italic>n</ce:italic> in all complexity bounds of the FATAL<ce:sup loc="post">+</ce:sup> algorithm, resulting in particular in gate complexity <mml:math altimg="si500.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> per node, computational delay <mml:math altimg="si501.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math>, and stabilization time <mml:math altimg="si502.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>c</mml:mi><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> with probability <mml:math altimg="si498.gif" overflow="scroll"><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">/</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>c</mml:mi></mml:mrow></mml:msup></mml:math>. Thus, this approach promises "local" fault-tolerance of <mml:math altimg="si503.gif" overflow="scroll"><mml:mi>Î©</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">Î</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> faults in each neighborhood in combination with excellent scalability in all complexity measures, and realizing this is a major goal of our future work.</ce:para></ce:list-item><ce:list-item id="li1050"><ce:label>â¢</ce:label><ce:para id="pr3240" view="all"><ce:bold>Clock size:</ce:bold> The constraint <ce:cross-ref refid="fm0060" id="crf2740">(1)</ce:cross-ref> entails that either clock size is bounded or large clocks result in larger stabilization time. This restriction can be overcome if we use the clocks of bounded size generated by FATAL<ce:sup loc="post">+</ce:sup> as input to another layer that runs a synchronous consensus algorithm in order to agree on exponentially larger clocks <ce:cross-ref refid="br0410" id="crf2750">[41]</ce:cross-ref>.</ce:para></ce:list-item></ce:list> Finally, we would like to mention two more prospective extensions of our work. First, building on our modeling framework, it seems feasible to tackle an even more strict verification of the algorithm's properties than "standard" mathematical analysis. The hierarchical structure and formal specifications of modules seem amenable to formal verification methods. Such an approach should benefit from the possibilities to adjust the granularity of the model by the distinction between basic and compound modules as well as the restrictions imposed by the module specifications; more restrictive modules may be simpler to analyze, yet will guarantee the same properties as the stated variants. Second, it should be noted that it is straightforward to derive clocks of even higher frequency from the FATAL<ce:sup loc="post">+</ce:sup> clocks. This is essentially done by frequency multiplication, at the expense of increasing the clock skew. We refer to Dolev et al. <ce:cross-ref refid="br0130" id="crf2760">[13]</ce:cross-ref> for details.</ce:para><ce:para id="pr3250" view="all">Overall, we consider the present work an important step towards a practical, ultra-robust clocking scheme for SoC. We plan to address the open problems discussed above in the future, and hope that this will ultimately lead to dependable real-world systems clocked by variants of the scheme proposed in this article.</ce:para></ce:section></ce:sections><ce:acknowledgment id="ac0010" view="all"><ce:section-title id="st0680">Acknowledgments</ce:section-title><ce:para id="pr3260" view="all">We would like to thank the anonymous reviewers for their valuable comments.</ce:para></ce:acknowledgment></body><tail view="all"><ce:bibliography id="bl0010" view="all"><ce:section-title id="st0690">References</ce:section-title><ce:bibliography-sec id="bs0010" view="all"><ce:bib-reference id="br0010"><ce:label>[1]</ce:label><sb:reference id="bib574C47474C4D533738s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.H.</ce:given-name><ce:surname>Wensley</ce:surname></sb:author><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Lamport</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Goldberg</ce:surname></sb:author><sb:author><ce:given-name>M.W.</ce:given-name><ce:surname>Green</ce:surname></sb:author><sb:author><ce:given-name>K.N.</ce:given-name><ce:surname>Levitt</ce:surname></sb:author><sb:author><ce:given-name>P.M.</ce:given-name><ce:surname>Melliar-Smith</ce:surname></sb:author><sb:author><ce:given-name>R.E.</ce:given-name><ce:surname>Shostak</ce:surname></sb:author><sb:author><ce:given-name>C.B.</ce:given-name><ce:surname>Weinstock</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>SIFT: design and analysis of a fault-tolerant computer for aircraft control</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Proc. IEEE</sb:maintitle></sb:title><sb:volume-nr>66</sb:volume-nr></sb:series><sb:date>1978</sb:date></sb:issue><sb:pages><sb:first-page>1240</sb:first-page><sb:last-page>1255</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0020"><ce:label>[2]</ce:label><sb:reference id="bib495452533037s1"><sb:contribution langtype="en"><sb:title><sb:maintitle>International technology roadmap for semiconductors</sb:maintitle></sb:title></sb:contribution><sb:host><sb:e-host><ce:inter-ref xlink:role="http://www.elsevier.com/xml/linking-roles/text/html" xlink:href="http://www.itrs.net" id="inf0010" xlink:type="simple">http://www.itrs.net</ce:inter-ref><sb:date>2012</sb:date></sb:e-host></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0030"><ce:label>[3]</ce:label><sb:reference id="bib4672693031s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>E.G.</ce:given-name><ce:surname>Friedman</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Clock distribution networks in synchronous digital integrated circuits</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Proc. IEEE</sb:maintitle></sb:title><sb:volume-nr>89</sb:volume-nr></sb:series><sb:date>2001</sb:date></sb:issue><sb:pages><sb:first-page>665</sb:first-page><sb:last-page>692</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0040"><ce:label>[4]</ce:label><sb:reference id="bib50423933s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Peercy</ce:surname></sb:author><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Banerjee</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Fault tolerant VLSI systems</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Proc. IEEE</sb:maintitle></sb:title><sb:volume-nr>81</sb:volume-nr></sb:series><sb:date>1993</sb:date></sb:issue><sb:pages><sb:first-page>745</sb:first-page><sb:last-page>758</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0050"><ce:label>[5]</ce:label><sb:reference id="bib4D796572733031s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>C.J.</ce:given-name><ce:surname>Myers</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Asynchronous Circuit Design</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:date>2001</sb:date><sb:publisher><sb:name>John Wiley &amp; Sons, Inc.</sb:name></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0060"><ce:label>[6]</ce:label><sb:reference id="bib4368613834s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.M.</ce:given-name><ce:surname>Chapiro</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Globally-asynchronous locally-synchronous systems</sb:maintitle></sb:title></sb:contribution><sb:comment>PhD thesis</sb:comment><sb:host><sb:book class="report"><sb:date>1984</sb:date><sb:publisher><sb:name>Stanford University</sb:name></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0070"><ce:label>[7]</ce:label><ce:other-ref id="boref0070"><ce:textref>Y. Semiat, R. Ginosar, Timing measurements of synchronization circuits, in: Proc. 9th Symposium on Asynchronous Circuits and Systems (ASYNC), pp. 68-77.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0080"><ce:label>[8]</ce:label><sb:reference id="bib54474C3037s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Teehan</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Greenstreet</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Lemieux</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>A survey and taxonomy of GALS design styles</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Des. Test Comput.</sb:maintitle></sb:title><sb:volume-nr>24</sb:volume-nr></sb:series><sb:date>2007</sb:date></sb:issue><sb:pages><sb:first-page>418</sb:first-page><sb:last-page>428</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0090"><ce:label>[9]</ce:label><sb:reference id="bib504D3036s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Martin</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Nystrom</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Asynchronous techniques for system-on-chip design</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Proc. IEEE</sb:maintitle></sb:title><sb:volume-nr>94</sb:volume-nr></sb:series><sb:date>2006</sb:date></sb:issue><sb:pages><sb:first-page>1089</sb:first-page><sb:last-page>1120</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0100"><ce:label>[10]</ce:label><ce:other-ref id="boref0100"><ce:textref>T. Polzer, T. Handl, A. Steininger, A metastability-free multi-synchronous communication scheme for SoCs, in: Proc. 11th Symposium on Stabilization, Safety, and Security of Distributed Systems (SSS), pp. 578-592.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0110"><ce:label>[11]</ce:label><ce:other-ref id="boref0110"><ce:textref>S. Fairbanks, S. Moore, Self-timed circuitry for global clocking, in: Proc. 11th Symposium on Advanced Research in Asynchronous Circuits and Systems (ASYNC), pp. 86-96.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0120"><ce:label>[12]</ce:label><sb:reference id="bib47433030s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>V.</ce:given-name><ce:surname>Gutnik</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Chandrakasan</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Active GHz clock network using distributed PLLs</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE J. Solid-State Circuits</sb:maintitle></sb:title><sb:volume-nr>35</sb:volume-nr></sb:series><sb:date>2000</sb:date></sb:issue><sb:pages><sb:first-page>1553</sb:first-page><sb:last-page>1560</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0130"><ce:label>[13]</ce:label><sb:reference id="bib646F6C65763134666174616Cs1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Dolev</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Fuegger</ce:surname></sb:author><sb:author><ce:given-name>C.</ce:given-name><ce:surname>Lenzen</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Posch</ce:surname></sb:author><sb:author><ce:given-name>U.</ce:given-name><ce:surname>Schmid</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Steininger</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Fault-tolerant algorithms for tick-generation in asynchronous logic: Robust pulse generation</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. ACM</sb:maintitle></sb:title></sb:series><sb:date>2014</sb:date></sb:issue></sb:host><sb:comment>in press</sb:comment></sb:reference></ce:bib-reference><ce:bib-reference id="br0140"><ce:label>[14]</ce:label><sb:reference id="bib4448533836s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Dolev</ce:surname></sb:author><sb:author><ce:given-name>J.Y.</ce:given-name><ce:surname>Halpern</ce:surname></sb:author><sb:author><ce:given-name>H.R.</ce:given-name><ce:surname>Strong</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>On the possibility and impossibility of achieving clock synchronization</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. Comput. Syst. Sci.</sb:maintitle></sb:title><sb:volume-nr>32</sb:volume-nr></sb:series><sb:date>1986</sb:date></sb:issue><sb:pages><sb:first-page>230</sb:first-page><sb:last-page>250</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0150"><ce:label>[15]</ce:label><sb:reference id="bib5341413036s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>K.</ce:given-name><ce:surname>Sundaresan</ce:surname></sb:author><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Allen</ce:surname></sb:author><sb:author><ce:given-name>F.</ce:given-name><ce:surname>Ayazi</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Process and temperature compensation in a 7-MHz CMOS clock oscillator</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE J. Solid-State Circuits</sb:maintitle></sb:title><sb:volume-nr>41</sb:volume-nr></sb:series><sb:date>2006</sb:date></sb:issue><sb:pages><sb:first-page>433</sb:first-page><sb:last-page>442</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0160"><ce:label>[16]</ce:label><sb:reference id="bib575330373A4443s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Widder</ce:surname></sb:author><sb:author><ce:given-name>U.</ce:given-name><ce:surname>Schmid</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Booting clock synchronization in partially synchronous systems with hybrid process and link failures</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Distrib. Comput.</sb:maintitle></sb:title><sb:volume-nr>20</sb:volume-nr></sb:series><sb:date>2007</sb:date></sb:issue><sb:pages><sb:first-page>115</sb:first-page><sb:last-page>140</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0170"><ce:label>[17]</ce:label><sb:reference id="bib436F6E3033s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>C.</ce:given-name><ce:surname>Constantinescu</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Trends and challenges in VLSI circuit reliability</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE MICRO</sb:maintitle></sb:title><sb:volume-nr>23</sb:volume-nr></sb:series><sb:date>2003</sb:date></sb:issue><sb:pages><sb:first-page>14</sb:first-page><sb:last-page>19</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0180"><ce:label>[18]</ce:label><sb:reference id="bib4B48503034s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Karnik</ce:surname></sb:author><sb:author><ce:given-name>P.</ce:given-name><ce:surname>Hazucha</ce:surname></sb:author><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Patel</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Characterization of soft errors caused by single event upsets in CMOS processes</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Trans. Dependable Secure Comput.</sb:maintitle></sb:title><sb:volume-nr>1</sb:volume-nr></sb:series><sb:date>2004</sb:date></sb:issue><sb:pages><sb:first-page>128</sb:first-page><sb:last-page>143</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0190"><ce:label>[19]</ce:label><sb:reference id="bib4261753035s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Baumann</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Radiation-induced soft errors in advanced semiconductor technologies</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Trans. Device Mater. Reliab.</sb:maintitle></sb:title><sb:volume-nr>5</sb:volume-nr></sb:series><sb:date>2005</sb:date></sb:issue><sb:pages><sb:first-page>305</sb:first-page><sb:last-page>316</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0200"><ce:label>[20]</ce:label><sb:reference id="bib474542433036s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.J.</ce:given-name><ce:surname>Gadlage</ce:surname></sb:author><sb:author><ce:given-name>P.H.</ce:given-name><ce:surname>Eaton</ce:surname></sb:author><sb:author><ce:given-name>J.M.</ce:given-name><ce:surname>Benedetto</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Carts</ce:surname></sb:author><sb:author><ce:given-name>V.</ce:given-name><ce:surname>Zhu</ce:surname></sb:author><sb:author><ce:given-name>T.L.</ce:given-name><ce:surname>Turflinger</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Digital device error rate trends in advanced CMOS technologies</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Trans. Nucl. Sci.</sb:maintitle></sb:title><sb:volume-nr>53</sb:volume-nr></sb:series><sb:date>2006</sb:date></sb:issue><sb:pages><sb:first-page>3466</sb:first-page><sb:last-page>3471</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0210"><ce:label>[21]</ce:label><ce:other-ref id="boref0210"><ce:textref>A. Dixit, A. Wood, The impact of new technology on soft error rates, in: Proc. IEEE International Reliability Physics Symposium (IRPS'11), pp. 5B.4.1-5B.4.7.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0220"><ce:label>[22]</ce:label><ce:other-ref id="boref0220"><ce:textref>M.S. Maza, M.L. Aranda, Analysis of clock distribution networks in the presence of crosstalk and groundbounce, in: Proceedings International IEEE Conference on Electronics, Circuits, and Systems (ICECS), pp. 773-776.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0230"><ce:label>[23]</ce:label><ce:other-ref id="boref0230"><ce:textref>A.K. Palit, V. Meyer, W. Anheier, J. Schloeffel, Modeling and analysis of crosstalk coupling effect on the victim interconnect using the ABCD network model, in: Proceedings of the 19th IEEE International Symposium on Defect and Fault Tolerance in VLSI Systems (DFT'04), pp. 174-182.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0240"><ce:label>[24]</ce:label><sb:reference id="bib64696A6B737472613734s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>E.W.</ce:given-name><ce:surname>Dijkstra</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Self-stabilizing systems in spite of distributed control</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Commun. ACM</sb:maintitle></sb:title><sb:volume-nr>17</sb:volume-nr></sb:series><sb:date>1974</sb:date></sb:issue><sb:pages><sb:first-page>643</sb:first-page><sb:last-page>644</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0250"><ce:label>[25]</ce:label><sb:reference id="bib50534C3830s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Pease</ce:surname></sb:author><sb:author><ce:given-name>R.</ce:given-name><ce:surname>Shostak</ce:surname></sb:author><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Lamport</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Reaching agreement in the presence of faults</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. ACM</sb:maintitle></sb:title><sb:volume-nr>27</sb:volume-nr></sb:series><sb:date>1980</sb:date></sb:issue><sb:pages><sb:first-page>228</sb:first-page><sb:last-page>234</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0260"><ce:label>[26]</ce:label><sb:reference id="bib44443832s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>D.</ce:given-name><ce:surname>Dolev</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>The Byzantine generals strike again</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. Algorithms</sb:maintitle></sb:title><sb:volume-nr>3</sb:volume-nr></sb:series><sb:date>1982</sb:date></sb:issue><sb:pages><sb:first-page>14</sb:first-page><sb:last-page>30</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0270"><ce:label>[27]</ce:label><ce:other-ref id="boref0270"><ce:textref>M.J. Fischer, N.A. Lynch, M. Merritt, Easy impossibility proofs for distributed consensus problems, in: Proc. 4th Conference of Principles of Distributed Computing (PODC), pp. 59-70.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0280"><ce:label>[28]</ce:label><ce:other-ref id="boref0280"><ce:textref>M.S. Maza, M.L. Aranda, Interconnected rings and oscillators as gigahertz clock distribution nets, in: Proc. 13th Great Lakes Symposium on VLSI (GLSVLSI), pp. 41-44.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0290"><ce:label>[29]</ce:label><ce:other-ref id="boref0290"><ce:textref>A. Korniienko, E. Colinet, G. Scorletti, E. Blanco, D. Galayko, J. Juillard, A clock network of distributed ADPLLs using an asymmetric comparison strategy, in: Proc. 2010 Symposium on Circuits and Systems (ISCAS), pp. 3212-3215.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0300"><ce:label>[30]</ce:label><sb:reference id="bib53543837s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>T.K.</ce:given-name><ce:surname>Srikanth</ce:surname></sb:author><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Toueg</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Optimal clock synchronization</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. ACM</sb:maintitle></sb:title><sb:volume-nr>34</sb:volume-nr></sb:series><sb:date>1987</sb:date></sb:issue><sb:pages><sb:first-page>626</sb:first-page><sb:last-page>645</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0310"><ce:label>[31]</ce:label><sb:reference id="bib4646534B30363A444654s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Ferringer</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Fuchs</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Steininger</ce:surname></sb:author><sb:author><ce:given-name>G.</ce:given-name><ce:surname>Kempf</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>VLSI implementation of a fault-tolerant distributed clock generation</sb:maintitle></sb:title></sb:contribution><sb:host><sb:edited-book><sb:title><sb:maintitle>IEEE Symposium on Defect and Fault-Tolerance in VLSI Systems (DFT)</sb:maintitle></sb:title><sb:date>2006</sb:date></sb:edited-book><sb:pages><sb:first-page>563</sb:first-page><sb:last-page>571</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0320"><ce:label>[32]</ce:label><sb:reference id="bib6675656767657231327265636F6E63696C696E67s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>FÃ¼gger</ce:surname></sb:author><sb:author><ce:given-name>U.</ce:given-name><ce:surname>Schmid</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Reconciling fault-tolerant distributed computing and systems-on-chip</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Distrib. Comput.</sb:maintitle></sb:title><sb:volume-nr>24</sb:volume-nr></sb:series><sb:date>2012</sb:date></sb:issue><sb:pages><sb:first-page>323</sb:first-page><sb:last-page>355</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0330"><ce:label>[33]</ce:label><ce:other-ref id="boref0330"><ce:textref>A. Daliot, D. Dolev, Self-stabilizing Byzantine pulse synchronization, Computing Research Repository, abs/cs/0608092, 2006.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0340"><ce:label>[34]</ce:label><ce:other-ref id="boref0340"><ce:textref>D. Dolev, E. Hoch, Byzantine self-stabilizing pulse in a bounded-delay model, in: Proc. 9th Symposium on Stabilization, Safety, and Security of Distributed Systems (SSS), vol. 4280, pp. 350-362.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0350"><ce:label>[35]</ce:label><sb:reference id="bib446F6C57656C535342595A43533034s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>S.</ce:given-name><ce:surname>Dolev</ce:surname></sb:author><sb:author><ce:given-name>J.L.</ce:given-name><ce:surname>Welch</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Self-stabilizing clock synchronization in the presence of Byzantine faults</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>J. ACM</sb:maintitle></sb:title><sb:volume-nr>51</sb:volume-nr></sb:series><sb:date>2004</sb:date></sb:issue><sb:pages><sb:first-page>780</sb:first-page><sb:last-page>799</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0360"><ce:label>[36]</ce:label><ce:other-ref id="boref0360"><ce:textref>A. Daliot, D. Dolev, H. Parnas, Self-stabilizing pulse synchronization inspired by biological pacemaker networks, in: Proc. 6th Symposium on Self-Stabilizing Systems (SSS), pp. 32-48.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0370"><ce:label>[37]</ce:label><ce:other-ref id="boref0370"><ce:textref>M. Malekpour, A Byzantine-fault tolerant self-stabilizing protocol for distributed clock synchronization systems, in: Proc. 9th Conference on Stabilization, Safety, and Security of Distributed Systems (SSS), pp. 411-427.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0380"><ce:label>[38]</ce:label><ce:other-ref id="boref0380"><ce:textref>D. Dolev, M. FÃ¼gger, C. Lenzen, U. Schmid, Fault-tolerant algorithms for tick-generation in asynchronous logic: Robust pulse generation [Extended Abstract], in: Proc. 13th Symposium on Stabilization, Safety, and Security of Distributed Systems (SSS), pp. 163-177.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0390"><ce:label>[39]</ce:label><ce:other-ref id="boref0390"><ce:textref>D. Dolev, M. FÃ¼gger, C. Lenzen, U. Schmid, Fault-tolerant algorithms for tick-generation in asynchronous logic: Robust pulse generation, Computing Research Repository, abs/1105.4780, 2011.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0400"><ce:label>[40]</ce:label><ce:other-ref id="boref0400"><ce:textref>G. Fuchs, M. FÃ¼gger, A. Steininger, On the threat of metastability in an asynchronous fault-tolerant clock generation scheme, in: Proc. 15th Symposium on Asynchronous Circuits and Systems (ASYNC), Chapel Hill, N. Carolina, USA, pp. 127-136.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0410"><ce:label>[41]</ce:label><ce:other-ref id="boref0410"><ce:textref>M. FÃ¼gger, M. HofstÃ¤tter, C. Lenzen, U. Schmid, Efficient construction of global time in socs despite arbitrary faults, in: Proc. 16th Conference on Digital System Design (DSD), pp. 142-151.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0420"><ce:label>[42]</ce:label><sb:reference id="bib46756531303A64697373s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>FÃ¼gger</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Analysis of on-chip fault-tolerant distributed algorithms</sb:maintitle></sb:title></sb:contribution><sb:comment>PhD thesis</sb:comment><sb:host><sb:book class="report"><sb:date>2010</sb:date><sb:publisher><sb:name>Technische UniversitÃ¤t Wien, Institut fÃ¼r Technische Informatik</sb:name></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0430"><ce:label>[43]</ce:label><sb:reference id="bib4D533933s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Mendler</ce:surname></sb:author><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Stroup</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Newtonian arbiters cannot be proven correct</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Form. Methods Syst. Des.</sb:maintitle></sb:title><sb:volume-nr>3</sb:volume-nr></sb:series><sb:date>1993</sb:date></sb:issue><sb:pages><sb:first-page>233</sb:first-page><sb:last-page>257</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0440"><ce:label>[44]</ce:label><sb:reference id="bib4D61723831s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Marino</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>General theory of metastable operation</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>IEEE Trans. Comput.</sb:maintitle></sb:title><sb:volume-nr>C-30</sb:volume-nr></sb:series><sb:date>1981</sb:date></sb:issue><sb:pages><sb:first-page>107</sb:first-page><sb:last-page>115</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0450"><ce:label>[45]</ce:label><sb:reference id="bib5665723838s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>T.</ce:given-name><ce:surname>Verhoeff</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Delay-insensitive codes - an overview</sb:maintitle></sb:title></sb:contribution><sb:host><sb:issue><sb:series><sb:title><sb:maintitle>Distrib. Comput.</sb:maintitle></sb:title><sb:volume-nr>3</sb:volume-nr></sb:series><sb:date>1988</sb:date></sb:issue><sb:pages><sb:first-page>1</sb:first-page><sb:last-page>8</sb:last-page></sb:pages></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0460"><ce:label>[46]</ce:label><sb:reference id="bib434B4B4C593032s1"><sb:contribution langtype="en"><sb:authors><sb:author><ce:given-name>J.</ce:given-name><ce:surname>Cortadella</ce:surname></sb:author><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Kishinevsky</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Kondratyev</ce:surname></sb:author><sb:author><ce:given-name>L.</ce:given-name><ce:surname>Lavagno</ce:surname></sb:author><sb:author><ce:given-name>A.</ce:given-name><ce:surname>Yakovlev</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Logic Synthesis for Asynchronous Controllers and Interfaces</sb:maintitle></sb:title></sb:contribution><sb:host><sb:book><sb:date>2002</sb:date><sb:publisher><sb:name>Springer</sb:name></sb:publisher></sb:book></sb:host></sb:reference></ce:bib-reference><ce:bib-reference id="br0470"><ce:label>[47]</ce:label><sb:reference id="bib506F7331323A6D6173746572s1"><sb:contribution xml:lang="de" langtype="iso"><sb:authors><sb:author><ce:given-name>M.</ce:given-name><ce:surname>Posch</ce:surname></sb:author></sb:authors><sb:title><sb:maintitle>Selbststabilisierende Byzantinisch Fehlertolerante Takterzeugung in FPGAs</sb:maintitle></sb:title></sb:contribution><sb:comment>Master's thesis</sb:comment><sb:host><sb:book class="report"><sb:date>2012</sb:date><sb:publisher><sb:name>Technische UniversitÃ¤t Wien, Institut fÃ¼r Technische Informatik</sb:name></sb:publisher></sb:book></sb:host><sb:comment>Treitlstrasse 1-3/182-1, A-1040, Vienna, Austria</sb:comment></sb:reference></ce:bib-reference><ce:bib-reference id="br0480"><ce:label>[48]</ce:label><ce:other-ref id="boref0480"><ce:textref>M. Ajtai, J. KomlÃ³s, E. SzemerÃ©di, An <mml:math altimg="si489.gif" overflow="scroll"><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mi mathvariant="normal">log</mml:mi><mml:mspace width="0.2em"/><mml:mi>n</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:math> sorting network, in: Proc. 15th Symposium on Theory of Computing (STOC), pp. 1-9.</ce:textref></ce:other-ref></ce:bib-reference><ce:bib-reference id="br0490"><ce:label>[49]</ce:label><ce:other-ref id="boref0490"><ce:textref>D. Dolev, C. Lenzen, Improved bounds for Byzantine self-stabilizing clock synchronization, 2014, in preparation.</ce:textref></ce:other-ref></ce:bib-reference></ce:bibliography-sec></ce:bibliography></tail></article></xocs:serial-item></xocs:doc>
